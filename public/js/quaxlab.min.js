jQuery(window).on("load", function() {
    $('#preloader').fadeOut(500);
    $('#main-wrapper').addClass('show');

    $('body').attr('data-sidebar-style') === "mini" ? $(".hamburger").addClass('is-active') : $(".hamburger").removeClass('is-active')
});

(function($) {
    "use strict";






    $("#menu").metisMenu();

    $('.nk-nav-scroll').slimscroll({
        position: "right",
        size: "5px",
        height: "100%",
        color: "transparent"
    });



    $(".nav-control").on('click', function() {

        $('#main-wrapper').toggleClass("menu-toggle");

        $(".hamburger").toggleClass("is-active");
    });


    $(function() {
        for (var nk = window.location, 
            o = $("ul#menu a").filter(function() {
                    return this.href == nk;
                })
                .addClass("active")
                .parent()
                .addClass("active");;) {
            if (!o.is("li")) break;
            o = o.parent()
                .addClass("in")
                .parent()
                .addClass("active");
        }
    });

    $(function() {
        var win_h = window.outerHeight;
        if (win_h > 0 ? win_h : screen.height) {
            $(".content-body").css("min-height", (win_h + 60) + "px");
        };
    });





    $('.selectpicker').selectpicker();



    $('[data-toggle="popover"]').popover();
    $('[data-toggle="tooltip"]').tooltip();


  

    const headerHight = $('.header').innerHeight();

    $(window).scroll(function() {
        if($('body').attr('data-layout') === "horizontal" && $('body').attr('data-header-position') === "static" && $('body').attr('data-sidebar-position') === "fixed")
            $(this.window).scrollTop() >= headerHight ? $('.metismenu').addClass('fixed') :  $('.metismenu').removeClass('fixed')
    });

    $('.sidebar-right-trigger').on('click', function() {
        $('.sidebar-right').toggleClass('show');
    });






})(jQuery);


(function($) {
    "use strict"

    new quixSettings({
        version: "light", //2 options "light" and "dark"
        layout: "vertical", //2 options, "vertical" and "horizontal"
        navheaderBg: "color_1", //have 10 options, "color_1" to "color_10"
        headerBg: "color_1", //have 10 options, "color_1" to "color_10"
        sidebarStyle: "vertical", //defines how sidebar should look like, options are: "full", "compact", "mini" and "overlay". If layout is "horizontal", sidebarStyle won't take "overlay" argument anymore, this will turn into "full" automatically!
        sidebarBg: "color_1", //have 10 options, "color_1" to "color_10"
        sidebarPosition: "static", //have two options, "static" and "fixed"
        headerPosition: "static", //have two options, "static" and "fixed"
        containerLayout: "wide",  //"boxed" and  "wide". If layout "vertical" and containerLayout "boxed", sidebarStyle will automatically turn into "overlay".
        direction: "ltr" //"ltr" = Left to Right; "rtl" = Right to Left
    });


})(jQuery);

// // data-sibebarbg="color_2"
const body = $('body');
const html = $('html');

function quixSettings({version, layout, navheaderBg, headerBg, sidebarStyle, sidebarBg, sidebarPosition, headerPosition, containerLayout, direction}) {
    this.version = version || "light";
    this.layout = layout || "vertical";
    this.navheaderBg = navheaderBg || "color_1";
    this.headerBg = headerBg || "color_1";
    this.sidebarStyle = sidebarStyle || "full";
    this.sidebarBg = sidebarBg || "color_1";
    this.sidebarPosition = sidebarPosition || "static";
    this.headerPosition = headerPosition || "static";
    this.containerLayout = containerLayout || "wide";
    this.direction = direction || "ltr";

    this.manageVersion();
    this.manageLayout();
    this.manageNavHeaderBg();
    this.manageHeaderBg();
    this.manageSidebarStyle();
    this.manageSidebarBg();
    this.manageSidebarPosition();
    this.manageHeaderPosition();
    this.manageContainerLayout();
    this.manageRtlLayout();
    this.manageResponsiveSidebar();

}

quixSettings.prototype.manageVersion = function() {
    switch(this.version) {
        case "light": 
            body.attr("data-theme-version", "light");
            break;
        case "dark": 
            body.attr("data-theme-version", "dark");
            break;
        default: 
            body.attr("data-theme-version", "light");
    }
}

quixSettings.prototype.manageLayout = function() {
    switch(this.layout) {
        case "horizontal": 
            this.sidebarStyle === "overlay" ? body.attr("data-sidebar-style", "full") : body.attr("data-sidebar-style", `${this.sidebarStyle}`);
            body.attr("data-layout", "horizontal");
            break;
        case "vertical": 
            body.attr("data-layout", "vertical");
            break;
        default:
            body.attr("data-layout", "vertical");
    }
}

quixSettings.prototype.manageNavHeaderBg = function() {
    switch(this.navheaderBg) {
        case "color_1": 
            body.attr("data-nav-headerbg", "color_1");
            break;
        case "color_2": 
            body.attr("data-nav-headerbg", "color_2");
            break;
        case "color_3": 
            body.attr("data-nav-headerbg", "color_3");
            break;
        case "color_4": 
            body.attr("data-nav-headerbg", "color_4");
            break;
        case "color_5": 
            body.attr("data-nav-headerbg", "color_5");
            break;
        case "color_6": 
            body.attr("data-nav-headerbg", "color_6");
            break;
        case "color_7": 
            body.attr("data-nav-headerbg", "color_7");
            break;
        case "color_8": 
            body.attr("data-nav-headerbg", "color_8");
            break;
        case "color_9": 
            body.attr("data-nav-headerbg", "color_9");
            break;
        case "color_10": 
            body.attr("data-nav-headerbg", "color_10");
            break;
        default:
            body.attr("data-nav-headerbg", "color_1");
    }
}

quixSettings.prototype.manageHeaderBg = function() {
    switch(this.headerBg) {
        case "color_1": 
            body.attr("data-headerbg", "color_1");
            break;
        case "color_2": 
            body.attr("data-headerbg", "color_2");
            break;
        case "color_3": 
            body.attr("data-headerbg", "color_3");
            break;
        case "color_4": 
            body.attr("data-headerbg", "color_4");
            break;
        case "color_5": 
            body.attr("data-headerbg", "color_5");
            break;
        case "color_6": 
            body.attr("data-headerbg", "color_6");
            break;
        case "color_7": 
            body.attr("data-headerbg", "color_7");
            break;
        case "color_8": 
            body.attr("data-headerbg", "color_8");
            break;
        case "color_9": 
            body.attr("data-headerbg", "color_9");
            break;
        case "color_10": 
            body.attr("data-headerbg", "color_10");
            break;
        default:
            body.attr("data-headerbg", "color_1");
    }
}

quixSettings.prototype.manageSidebarStyle = function() {
    switch(this.sidebarStyle) {
        case "full":
            body.attr("data-sidebar-style", "full");
            break;
        case "mini":
            body.attr("data-sidebar-style", "mini");
            break;
        case "compact":
            body.attr("data-sidebar-style", "compact");
            break;
        case "overlay":
            this.layout === "horizontal" ? body.attr("data-sidebar-style", "full") : body.attr("data-sidebar-style", "overlay");
            break;
        default:
            body.attr("data-sidebar-style", "full");
    }
}

quixSettings.prototype.manageSidebarBg = function() {
    switch(this.sidebarBg) {
        case "color_1": 
            body.attr("data-sibebarbg", "color_1");
            break;
        case "color_2": 
            body.attr("data-sibebarbg", "color_2");
            break;
        case "color_3": 
            body.attr("data-sibebarbg", "color_3");
            break;
        case "color_4": 
            body.attr("data-sibebarbg", "color_4");
            break;
        case "color_5": 
            body.attr("data-sibebarbg", "color_5");
            break;
        case "color_6": 
            body.attr("data-sibebarbg", "color_6");
            break;
        case "color_7": 
            body.attr("data-sibebarbg", "color_7");
            break;
        case "color_8": 
            body.attr("data-sibebarbg", "color_8");
            break;
        case "color_9": 
            body.attr("data-sibebarbg", "color_9");
            break;
        case "color_10": 
            body.attr("data-sibebarbg", "color_10");
            break;
        default:
            body.attr("data-sibebarbg", "color_1");
    }
}

quixSettings.prototype.manageSidebarPosition = function() {
    switch(this.sidebarPosition) {
        case "fixed": 
            this.sidebarStyle === "overlay" && this.layout === "vertical" ? body.attr("data-sidebar-position", "static") : body.attr("data-sidebar-position", "fixed");
            break;
        case "static": 
            body.attr("data-sidebar-position", "static");
            break;
        default: 
            body.attr("data-sidebar-position", "static");       
    }
}

quixSettings.prototype.manageHeaderPosition = function() {
    switch(this.headerPosition) {
        case "fixed": 
            body.attr("data-header-position", "fixed");
            break;
        case "static": 
            body.attr("data-header-position", "static");
            break;
        default: 
            body.attr("data-header-position", "static");       
    }
}

quixSettings.prototype.manageContainerLayout = function() {
    switch(this.containerLayout) {
        case "boxed":
            if(this.layout === "vertical" && this.sidebarStyle === "full") {
                body.attr("data-sidebar-style", "overlay");
            }
            body.attr("data-container", "boxed");
            break;
        case "wide":
            body.attr("data-container", "wide");
            break;
        default:
            body.attr("data-container", "wide");
    }
}

quixSettings.prototype.manageRtlLayout = function() {
    switch(this.direction) {
        case "rtl":
            html.attr("dir", "rtl");
            html.addClass('rtl');
            body.attr("direction", "rtl");
            break;
        case "ltr": 
            html.attr("dir", "ltr");
            html.removeClass('rtl');
            body.attr("direction", "ltr");
            break;
        default: 
            html.attr("dir", "ltr");
            body.attr("direction", "ltr");
    }
}

quixSettings.prototype.manageResponsiveSidebar = function() {
    const innerWidth = $(window).innerWidth();
    if(innerWidth < 1200) {
        body.attr("data-layout", "vertical");
        body.attr("data-container", "wide");
    }

    if(innerWidth > 767 && innerWidth < 1200) {
        body.attr("data-sidebar-style", "mini");
    }

    if(innerWidth < 768) {
        body.attr("data-sidebar-style", "overlay");
    }
}
(function($) {
    "use strict"

    const versionSelect = $('#theme_version');
    const layoutSelect = $('#theme_layout');
    const sidebarStyleSelect = $('#sidebar_style');
    const sidebarPositionSelect = $('#sidebar_position');
    const headerPositionSelect = $('#header_position');
    const containerLayoutSelect = $('#container_layout');
    const themeDirectionSelect = $('#theme_direction');

    versionSelect.on('change', function() {
        $('body').attr('data-theme-version', this.value);
    });

    sidebarPositionSelect.on('change', function() {
        $('body').attr('data-sidebar-position', this.value);
    });

    headerPositionSelect.on('change', function() {
        $('body').attr('data-header-position', this.value);
    });

    themeDirectionSelect.on('change', function() {
        $('html').attr('dir', this.value);
        $('html').attr('class', '');
        $('html').addClass(this.value);
        $('body').attr('direction', this.value);
    });

    layoutSelect.on('change', function() {
        if($('body').attr('data-sidebar-style') === 'overlay') {
            $('body').attr('data-sidebar-style', 'full');
            $('body').attr('data-layout', this.value);
            return;
        }

        $('body').attr('data-layout', this.value);
    });

    containerLayoutSelect.on('change', function() {
        if(this.value === "boxed") {
            // if($('body').attr('data-sidebar-style') === "overlay" && $('body').attr('data-layout') === "horizontal") {
            //     $('body').attr('data-sidebar-style', 'full');
            //     $('body').attr('data-container', this.value);
            //     return;
            // }

            if($('body').attr('data-layout') === "vertical" && $('body').attr('data-sidebar-style') === "full") {
                $('body').attr('data-sidebar-style', 'overlay');
                $('body').attr('data-container', this.value);
                return;
            }
        }

        $('body').attr('data-container', this.value);
    });

    sidebarStyleSelect.on('change', function() {
        if($('body').attr('data-layout') === "horizontal") {
            if(this.value === "overlay") {
                alert("Sorry! Overlay is not possible in Horizontal layout.");
                return;
            }
        }

        if($('body').attr('data-layout') === "vertical") {
            if($('body').attr('data-container') === "boxed" && this.value === "full") {
                alert("Sorry! Full menu is not available in Vertical Boxed layout.");
                return;
            }
        }

        $('body').attr('data-sidebar-style', this.value);
    });

    $('input[name="navigation_header"]').on('click', function() {
        $('body').attr('data-nav-headerbg', this.value);
    });

    $('input[name="header_bg"]').on('click', function() {
        $('body').attr('data-headerbg', this.value);
    });

    $('input[name="sidebar_bg"]').on('click', function() {
        $('body').attr('data-sibebarbg', this.value);
    });







})(jQuery);
$(document).ready(function () {

    "use strict"; // Start of use strict

    //amchart
    var chart = AmCharts.makeChart("combined-bullet", {
        "type": "serial",
        "theme": "dark",
        "dataDateFormat": "YYYY-MM-DD",
        "precision": 2,
        "color": "#FFFFFF",
        "valueAxes": [{
            "id": "v1",
            "title": "Sales",
            "position": "left",
            "autoGridCount": false,
            "labelFunction": function (value) {
                return "$" + Math.round(value) + "M";
            }
        }, {
            "id": "v2",
            "title": "Market Days",
            "gridAlpha": 0,
            "position": "right",
            "autoGridCount": false
        }],
        "graphs": [{
            "id": "g3",
            "valueAxis": "v1",
            "lineColor": "#e1ede9",
            "fillColors": "#e1ede9",
            "fillAlphas": 1,
            "type": "column",
            "title": "Actual Sales",
            "valueField": "sales2",
            "clustered": false,
            "columnWidth": 0.5,
            "legendValueText": "$[[value]]M",
            "balloonText": "[[title]]<br /><b style='font-size: 130%'>$[[value]]M</b>"
        }, {
            "id": "g4",
            "valueAxis": "v1",
            "lineColor": "#03A9F5",
            "fillColors": "#03A9F5",
            "fillAlphas": 1,
            "type": "column",
            "title": "Target Sales",
            "valueField": "sales1",
            "clustered": false,
            "columnWidth": 0.3,
            "legendValueText": "$[[value]]M",
            "balloonText": "[[title]]<br /><b style='font-size: 130%'>$[[value]]M</b>"
        }, {
            "id": "g1",
            "valueAxis": "v2",
            "bullet": "round",
            "bulletBorderAlpha": 1,
            "bulletColor": "#FFFFFF",
            "bulletSize": 5,
            "hideBulletsCount": 50,
            "lineThickness": 2,
            "lineColor": "#0000FF",
            "type": "smoothedLine",
            "title": "Market Days",
            "useLineColorForBulletBorder": true,
            "valueField": "market1",
            "balloonText": "[[title]]<br /><b style='font-size: 130%'>[[value]]</b>"
        }, {
            "id": "g2",
            "valueAxis": "v2",
            "bullet": "round",
            "bulletBorderAlpha": 1,
            "bulletColor": "#FFFFFF",
            "bulletSize": 5,
            "hideBulletsCount": 50,
            "lineThickness": 2,
            "lineColor": "#F44336",
            "type": "smoothedLine",
            "dashLength": 5,
            "title": "Market Days ALL",
            "useLineColorForBulletBorder": true,
            "valueField": "market2",
            "balloonText": "[[title]]<br /><b style='font-size: 130%'>[[value]]</b>"
        }],
        "chartScrollbar": {
            "graph": "g1",
            "oppositeAxis": false,
            "offset": 30,
            "scrollbarHeight": 50,
            "backgroundAlpha": 0,
            "selectedBackgroundAlpha": 0.9,
            "selectedBackgroundColor": "#ffffff",
            "graphFillAlpha": 0,
            "graphLineAlpha": 0.5,
            "selectedGraphFillAlpha": 0,
            "selectedGraphLineAlpha": 1,
            "autoGridCount": true,
            "color": "#AAAAAA"
        },
        "chartCursor": {
            "pan": true,
            "valueLineEnabled": true,
            "valueLineBalloonEnabled": true,
            "cursorAlpha": 0,
            "valueLineAlpha": 0.2
        },
        "categoryField": "date",
        "categoryAxis": {
            "parseDates": true,
            "dashLength": 1,
            "minorGridEnabled": true
        },
        "legend": {
            "useGraphSettings": true,
            "color": "#FFFFFF",
            "position": "top"
        },
        "balloon": {
            "borderThickness": 1,
            "shadowAlpha": 0
        },
        "export": {
            "enabled": true
        },
        "dataProvider": [{
            "date": "2013-01-16",
            "market1": 71,
            "market2": 75,
            "sales1": 5,
            "sales2": 8
        }, {
            "date": "2013-01-17",
            "market1": 74,
            "market2": 78,
            "sales1": 4,
            "sales2": 6
        }, {
            "date": "2013-01-18",
            "market1": 78,
            "market2": 88,
            "sales1": 5,
            "sales2": 2
        }, {
            "date": "2013-01-19",
            "market1": 85,
            "market2": 89,
            "sales1": 8,
            "sales2": 9
        }, {
            "date": "2013-01-20",
            "market1": 82,
            "market2": 89,
            "sales1": 9,
            "sales2": 6
        }, {
            "date": "2013-01-21",
            "market1": 83,
            "market2": 85,
            "sales1": 3,
            "sales2": 5
        }, {
            "date": "2013-01-22",
            "market1": 88,
            "market2": 92,
            "sales1": 5,
            "sales2": 7
        }, {
            "date": "2013-01-23",
            "market1": 85,
            "market2": 90,
            "sales1": 7,
            "sales2": 6
        }, {
            "date": "2013-01-24",
            "market1": 85,
            "market2": 91,
            "sales1": 9,
            "sales2": 5
        }, {
            "date": "2013-01-25",
            "market1": 80,
            "market2": 84,
            "sales1": 5,
            "sales2": 8
        }, {
            "date": "2013-01-26",
            "market1": 87,
            "market2": 92,
            "sales1": 4,
            "sales2": 8
        }, {
            "date": "2013-01-27",
            "market1": 84,
            "market2": 87,
            "sales1": 3,
            "sales2": 4
        }, {
            "date": "2013-01-28",
            "market1": 83,
            "market2": 88,
            "sales1": 5,
            "sales2": 7
        }, {
            "date": "2013-01-29",
            "market1": 84,
            "market2": 87,
            "sales1": 5,
            "sales2": 8
        }, {
            "date": "2013-01-30",
            "market1": 81,
            "market2": 85,
            "sales1": 4,
            "sales2": 7
        }]
    });

    var chartData = [{
        "date": "2017-01-01",
        "distance": 250,
        "townName": "New York",
        "townName2": "New York",
        "townSize": 25,
        "latitude": 40.71,
        "duration": 408
    }, {
        "date": "2017-01-02",
        "distance": 371,
        "townName": "Washington",
        "townSize": 14,
        "latitude": 38.89,
        "duration": 482
    }, {
        "date": "2017-01-03",
        "distance": 433,
        "townName": "Wilmington",
        "townSize": 6,
        "latitude": 34.22,
        "duration": 562
    }, {
        "date": "2017-01-04",
        "distance": 345,
        "townName": "Jacksonville",
        "townSize": 7,
        "latitude": 30.35,
        "duration": 379
    }, {
        "date": "2017-01-05",
        "distance": 480,
        "townName": "Miami",
        "townName2": "Miami",
        "townSize": 10,
        "latitude": 25.83,
        "duration": 501
    }, {
        "date": "2017-01-06",
        "distance": 386,
        "townName": "Tallahassee",
        "townSize": 7,
        "latitude": 30.46,
        "duration": 443
    }, {
        "date": "2017-01-07",
        "distance": 348,
        "townName": "New Orleans",
        "townSize": 10,
        "latitude": 29.94,
        "duration": 405
    }, {
        "date": "2017-01-08",
        "distance": 238,
        "townName": "Houston",
        "townName2": "Houston",
        "townSize": 16,
        "latitude": 29.76,
        "duration": 309
    }, {
        "date": "2017-01-09",
        "distance": 218,
        "townName": "Dalas",
        "townSize": 17,
        "latitude": 32.8,
        "duration": 287
    }, {
        "date": "2017-01-10",
        "distance": 349,
        "townName": "Oklahoma City",
        "townSize": 11,
        "latitude": 35.49,
        "duration": 485
    }, {
        "date": "2017-01-11",
        "distance": 603,
        "townName": "Kansas City",
        "townSize": 10,
        "latitude": 39.1,
        "duration": 890
    }, {
        "date": "2017-01-12",
        "distance": 534,
        "townName": "Denver",
        "townName2": "Denver",
        "townSize": 18,
        "latitude": 39.74,
        "duration": 810
    }, {
        "date": "2017-01-13",
        "townName": "Salt Lake City",
        "townSize": 12,
        "distance": 425,
        "duration": 670,
        "latitude": 40.75,
        "alpha": 0.4
    }, {
        "date": "2017-01-14",
        "latitude": 36.1,
        "duration": 470,
        "townName": "Las Vegas",
        "townName2": "Las Vegas",
        "bulletClass": "lastBullet"
    }, {
        "date": "2017-01-15"
    }, {
        "date": "2017-01-16"
    }];




    var chart = AmCharts.makeChart("duration-value-axis", {
        "type": "serial",
        "theme": "dark",

        "dataDateFormat": "YYYY-MM-DD",
        "dataProvider": chartData,

        "addClassNames": true,
        "startDuration": 1,
        "color": "#FFFFFF",
        "marginLeft": 0,

        "categoryField": "date",
        "categoryAxis": {
            "parseDates": true,
            "minPeriod": "DD",
            "autoGridCount": false,
            "gridCount": 50,
            "gridAlpha": 0.1,
            // "gridColor": "#FFFFFF",
            "axisColor": "#555555",
            "dateFormats": [{
                "period": 'DD',
                "format": 'DD'
            }, {
                "period": 'WW',
                "format": 'MMM DD'
            }, {
                "period": 'MM',
                "format": 'MMM'
            }, {
                "period": 'YYYY',
                "format": 'YYYY'
            }]
        },

        "valueAxes": [{
            "id": "a1",
            "title": "distance",
            "gridAlpha": 0,
            "axisAlpha": 0
        }, {
            "id": "a2",
            "position": "right",
            "gridAlpha": 0,
            "axisAlpha": 0,
            "labelsEnabled": false
        }, {
            "id": "a3",
            "title": "duration",
            "position": "right",
            "gridAlpha": 0,
            "axisAlpha": 0,
            "inside": true,
            "duration": "mm",
            "durationUnits": {
                "DD": "d. ",
                "hh": "h ",
                "mm": "min",
                "ss": ""
            }
        }],
        "graphs": [{
            "id": "g1",
            "valueField": "distance",
            "title": "distance",
            "type": "column",
            "fillAlphas": 0.9,
            "valueAxis": "a1",
            "balloonText": "[[value]] miles",
            "legendValueText": "[[value]] mi",
            "legendPeriodValueText": "total: [[value.sum]] mi",
            "lineColor": "#428bca",
            "alphaField": "alpha"
        }, {
            "id": "g2",
            "valueField": "latitude",
            "classNameField": "bulletClass",
            "title": "latitude/city",
            "type": "line",
            "valueAxis": "a2",
            "lineColor": "#03A9F5",
            "lineThickness": 1,
            "legendValueText": "[[value]]/[[description]]",
            "descriptionField": "townName",
            "bullet": "round",
            "bulletSizeField": "townSize",
            "bulletBorderColor": "#0000FF",
            "bulletBorderAlpha": 1,
            "bulletBorderThickness": 2,
            "bulletColor": "#00A2FF",
            "labelText": "[[townName2]]",
            "labelPosition": "right",
            "balloonText": "latitude:[[value]]",
            "showBalloon": true,
            "animationPlayed": true
        }, {
            "id": "g3",
            "title": "duration",
            "valueField": "duration",
            "type": "line",
            "valueAxis": "a3",
            "lineColor": "#F44336",
            "balloonText": "[[value]]",
            "lineThickness": 1,
            "legendValueText": "[[value]]",
            "bullet": "square",
            "bulletBorderColor": "#F44336",
            "bulletBorderThickness": 1,
            "bulletBorderAlpha": 1,
            "dashLengthField": "dashLength",
            "animationPlayed": true
        }],

        "chartCursor": {
            "zoomable": false,
            "categoryBalloonDateFormat": "DD",
            "cursorAlpha": 0,
            "valueBalloonsEnabled": false
        },
        "legend": {
            "bulletType": "round",
            "equalWidths": false,
            "valueWidth": 120,
            "useGraphSettings": true,
            "color": "#FFFFFF"
        }
    });








    /**
     * SVG path for target icon
     */
    var targetSVG = "M9,0C4.029,0,0,4.029,0,9s4.029,9,9,9s9-4.029,9-9S13.971,0,9,0z M9,15.93 c-3.83,0-6.93-3.1-6.93-6.93S5.17,2.07,9,2.07s6.93,3.1,6.93,6.93S12.83,15.93,9,15.93 M12.5,9c0,1.933-1.567,3.5-3.5,3.5S5.5,10.933,5.5,9S7.067,5.5,9,5.5 S12.5,7.067,12.5,9z";

    /**
     * SVG path for plane icon
     */
    var planeSVG = "m2,106h28l24,30h72l-44,-133h35l80,132h98c21,0 21,34 0,34l-98,0 -80,134h-35l43,-133h-71l-24,30h-28l15,-47";

    /**
     * Create the map
     */
    var map = AmCharts.makeChart("chartMap", {
        "type": "map",
        "theme": "light",

        "projection": "winkel3",
        "dataProvider": {
            "map": "worldLow",

            "lines": [{
                "id": "line1",
                "arc": -0.85,
                "alpha": 0.3,
                "latitudes": [23.684994, 48.8567, 43.8163, 34.3, 23, 61.524010, 20.593684, 33.223191],
                "longitudes": [90.356331, 2.3510, -79.4287, -118.15, -82, 105.318756, 78.962880, 43.679291]
            }, {
                "id": "line2",
                "alpha": 0,
                "color": "#F44336",
                "latitudes": [23.684994, 48.8567, 43.8163, 34.3, 23, 61.524010, 20.593684, 33.223191],
                "longitudes": [90.356331, 2.3510, -79.4287, -118.15, -82, 105.318756, 78.962880, 43.679291]
            }],
            "images": [{
                "svgPath": targetSVG,
                "title": "Bangladesh",
                "latitude": 23.684994,
                "longitude": 90.356331
            }, {
                "svgPath": targetSVG,
                "title": "Paris",
                "latitude": 48.8567,
                "longitude": 2.3510
            }, {
                "svgPath": targetSVG,
                "title": "Toronto",
                "latitude": 43.8163,
                "longitude": -79.4287
            }, {
                "svgPath": targetSVG,
                "title": "Los Angeles",
                "latitude": 34.3,
                "longitude": -118.15
            }, {
                "svgPath": targetSVG,
                "title": "Havana",
                "latitude": 23,
                "longitude": -82
            }, {}, {
                "svgPath": targetSVG,
                "title": "Russia",
                "latitude": 61.524010,
                "longitude": 105.318756
            }, {}, {
                "svgPath": targetSVG,
                "title": "India",
                "latitude": 20.593684,
                "longitude": 78.962880
            }, {}, {
                "svgPath": targetSVG,
                "title": "Iraq",
                "latitude": 33.223191,
                "longitude": 43.679291
            }, {
                "svgPath": planeSVG,
                "positionOnLine": 0,
                "color": "#0000FF",
                "alpha": 0.1,
                "animateAlongLine": true,
                "lineId": "line2",
                "flipDirection": true,
                "loop": true,
                "scale": 0.03,
                "positionScale": 1.3
            }, {
                "svgPath": planeSVG,
                "positionOnLine": 0,
                "color": "#0000FF",
                "animateAlongLine": true,
                "lineId": "line1",
                "flipDirection": true,
                "loop": true,
                "scale": 0.03,
                "positionScale": 1.8
            }]
        },

        "areasSettings": {
            "unlistedAreasColor": "#00A2FF"
        },

        "imagesSettings": {
            "color": "#E5343D",
            "rollOverColor": "#E5343D",
            "selectedColor": "#E5343D",
            "pauseDuration": 0.2,
            "animationDuration": 4,
            "adjustAnimationSpeed": true
        },

        "linesSettings": {
            "color": "#E5343D",
            "alpha": 0.4
        },

        "export": {
            "enabled": true
        }

    });








    //Column chart with images on top
    var chart = AmCharts.makeChart("column", {
        "type": "serial",
        "theme": "light",
        "dataProvider": [{
            "name": "Salauddin",
            "points": 35654,
            "color": "#428bca",
            "bullet": "assets/plugins/amcharts/images/A04.png"
        }, {
            "name": "Tuhin",
            "points": 65456,
            "color": "#03A9F5",
            "bullet": "assets/plugins/amcharts/images/C02.png"
        }, {
            "name": "Jahangir",
            "points": 45724,
            "color": "#FFB61E",
            "bullet": "assets/plugins/amcharts/images/D02.png"
        }, {
            "name": "Tanjil",
            "points": 13654,
            "color": "#62d0f1",
            "bullet": "assets/plugins/amcharts/images/E01.png"
        }, {
            "name": "Naeem",
            "points": 53654,
            "color": "#E5343D",
            "bullet": "assets/plugins/amcharts/images/A04.png"
        }],
        "valueAxes": [{
            "maximum": 80000,
            "minimum": 0,
            "axisAlpha": 0,
            "dashLength": 4,
            "position": "left"
        }],
        "startDuration": 1,
        "graphs": [{
            "balloonText": "<span style='font-size:13px;'>[[category]]: <b>[[value]]</b></span>",
            "bulletOffset": 10,
            "bulletSize": 52,
            "colorField": "color",
            "cornerRadiusTop": 8,
            "customBulletField": "bullet",
            "fillAlphas": 0.9,
            "lineAlpha": 0,
            "type": "column",
            "valueField": "points"
        }],
        "marginTop": 0,
        "marginRight": 0,
        "marginLeft": 0,
        "marginBottom": 0,
        "autoMargins": false,
        "categoryField": "name",
        "categoryAxis": {
            "axisAlpha": 0,
            "gridAlpha": 0,
            "inside": true,
            "tickLength": 0
        },
        "export": {
            "enabled": true
        }
    });




    //Zoomable Value Axis
    var chart = AmCharts.makeChart("zoomable-chart", {
        "type": "serial",
        "theme": "light",
        "color": "#FFFFFF",
        "marginRight": 40,
        "marginLeft": 40,
        "autoMarginOffset": 20,
        "dataDateFormat": "YYYY-MM-DD",
        "valueAxes": [{
            "id": "v1",
            "axisAlpha": 0,
            "position": "left",
            "ignoreAxisWidth": true
        }],
        "balloon": {
            "borderThickness": 1,
            "shadowAlpha": 0
        },
        "graphs": [{
            "id": "g1",
            "balloon": {
                "drop": true,
                "adjustBorderColor": false,
                "color": "#ffffff",
                "type": "smoothedLine"
            },
            "fillAlphas": 0.2,
            "bullet": "round",
            "bulletBorderAlpha": 1,
            "bulletColor": "#FFFFFF",
            "bulletSize": 5,
            "hideBulletsCount": 50,
            "lineThickness": 2,
            "title": "red line",
            "useLineColorForBulletBorder": true,
            "valueField": "value",
            "balloonText": "<span style='font-size:18px;'>[[value]]</span>"
        }],
        "chartCursor": {
            "valueLineEnabled": true,
            "valueLineBalloonEnabled": true,
            "cursorAlpha": 0,
            "zoomable": false,
            "valueZoomable": true,
            "valueLineAlpha": 0.5
        },
        "valueScrollbar": {
            "autoGridCount": true,
            "color": "#000000",
            "scrollbarHeight": 50
        },
        "categoryField": "date",
        "categoryAxis": {
            "parseDates": true,
            "dashLength": 1,
            "minorGridEnabled": true
        },
        "export": {
            "enabled": true
        },
        "dataProvider": [{
            "date": "2012-07-27",
            "value": 13
        }, {
            "date": "2012-07-28",
            "value": 11
        }, {
            "date": "2012-07-29",
            "value": 15
        }, {
            "date": "2012-07-30",
            "value": 16
        }, {
            "date": "2012-07-31",
            "value": 18
        }, {
            "date": "2012-08-01",
            "value": 13
        }, {
            "date": "2012-08-02",
            "value": 22
        }, {
            "date": "2012-08-03",
            "value": 23
        }, {
            "date": "2012-08-04",
            "value": 20
        }, {
            "date": "2012-08-05",
            "value": 17
        }, {
            "date": "2012-08-06",
            "value": 16
        }, {
            "date": "2012-08-07",
            "value": 18
        }, {
            "date": "2012-08-08",
            "value": 21
        }, {
            "date": "2012-08-09",
            "value": 26
        }, {
            "date": "2012-08-10",
            "value": 24
        }, {
            "date": "2012-08-11",
            "value": 29
        }, {
            "date": "2012-08-12",
            "value": 32
        }, {
            "date": "2012-08-13",
            "value": 18
        }, {
            "date": "2012-08-14",
            "value": 24
        }, {
            "date": "2012-08-15",
            "value": 22
        }, {
            "date": "2012-08-16",
            "value": 18
        }, {
            "date": "2012-08-17",
            "value": 19
        }, {
            "date": "2012-08-18",
            "value": 14
        }, {
            "date": "2012-08-19",
            "value": 15
        }, {
            "date": "2012-08-20",
            "value": 12
        }, {
            "date": "2012-08-21",
            "value": 8
        }, {
            "date": "2012-08-22",
            "value": 9
        }, {
            "date": "2012-08-23",
            "value": 8
        }, {
            "date": "2012-08-24",
            "value": 7
        }, {
            "date": "2012-08-25",
            "value": 5
        }, {
            "date": "2012-08-26",
            "value": 11
        }, {
            "date": "2012-08-27",
            "value": 13
        }, {
            "date": "2012-08-28",
            "value": 18
        }, {
            "date": "2012-08-29",
            "value": 20
        }, {
            "date": "2012-08-30",
            "value": 29
        }, {
            "date": "2012-08-31",
            "value": 33
        }, {
            "date": "2012-09-01",
            "value": 42
        }, {
            "date": "2012-09-02",
            "value": 35
        }, {
            "date": "2012-09-03",
            "value": 31
        }, {
            "date": "2012-09-04",
            "value": 47
        }, {
            "date": "2012-09-05",
            "value": 52
        }, {
            "date": "2012-09-06",
            "value": 46
        }, {
            "date": "2012-09-07",
            "value": 41
        }, {
            "date": "2012-09-08",
            "value": 43
        }, {
            "date": "2012-09-09",
            "value": 40
        }, {
            "date": "2012-09-10",
            "value": 39
        }, {
            "date": "2012-09-11",
            "value": 34
        }, {
            "date": "2012-09-12",
            "value": 29
        }, {
            "date": "2012-09-13",
            "value": 34
        }, {
            "date": "2012-09-14",
            "value": 37
        }, {
            "date": "2012-09-15",
            "value": 42
        }, {
            "date": "2012-09-16",
            "value": 49
        }, {
            "date": "2012-09-17",
            "value": 46
        }, {
            "date": "2012-09-18",
            "value": 47
        }, {
            "date": "2012-09-19",
            "value": 55
        }, {
            "date": "2012-09-20",
            "value": 59
        }, {
            "date": "2012-09-21",
            "value": 58
        }, {
            "date": "2012-09-22",
            "value": 57
        }, {
            "date": "2012-09-23",
            "value": 61
        }, {
            "date": "2012-09-24",
            "value": 59
        }, {
            "date": "2012-09-25",
            "value": 67
        }, {
            "date": "2012-09-26",
            "value": 65
        }, {
            "date": "2012-09-27",
            "value": 61
        }, {
            "date": "2012-09-28",
            "value": 66
        }, {
            "date": "2012-09-29",
            "value": 69
        }, {
            "date": "2012-09-30",
            "value": 71
        }, {
            "date": "2012-10-01",
            "value": 67
        }, {
            "date": "2012-10-02",
            "value": 63
        }, {
            "date": "2012-10-03",
            "value": 46
        }, {
            "date": "2012-10-04",
            "value": 32
        }, {
            "date": "2012-10-05",
            "value": 21
        }, {
            "date": "2012-10-06",
            "value": 18
        }, {
            "date": "2012-10-07",
            "value": 21
        }, {
            "date": "2012-10-08",
            "value": 28
        }, {
            "date": "2012-10-09",
            "value": 27
        }, {
            "date": "2012-10-10",
            "value": 36
        }, {
            "date": "2012-10-11",
            "value": 33
        }, {
            "date": "2012-10-12",
            "value": 31
        }, {
            "date": "2012-10-13",
            "value": 30
        }, {
            "date": "2012-10-14",
            "value": 34
        }, {
            "date": "2012-10-15",
            "value": 38
        }, {
            "date": "2012-10-16",
            "value": 37
        }, {
            "date": "2012-10-17",
            "value": 44
        }, {
            "date": "2012-10-18",
            "value": 49
        }, {
            "date": "2012-10-19",
            "value": 53
        }, {
            "date": "2012-10-20",
            "value": 57
        }, {
            "date": "2012-10-21",
            "value": 60
        }, {
            "date": "2012-10-22",
            "value": 61
        }, {
            "date": "2012-10-23",
            "value": 69
        }, {
            "date": "2012-10-24",
            "value": 67
        }, {
            "date": "2012-10-25",
            "value": 72
        }, {
            "date": "2012-10-26",
            "value": 77
        }, {
            "date": "2012-10-27",
            "value": 75
        }, {
            "date": "2012-10-28",
            "value": 70
        }, {
            "date": "2012-10-29",
            "value": 72
        }, {
            "date": "2012-10-30",
            "value": 70
        }, {
            "date": "2012-10-31",
            "value": 72
        }, {
            "date": "2012-11-01",
            "value": 73
        }, {
            "date": "2012-11-02",
            "value": 67
        }, {
            "date": "2012-11-03",
            "value": 68
        }, {
            "date": "2012-11-04",
            "value": 65
        }, {
            "date": "2012-11-05",
            "value": 71
        }, {
            "date": "2012-11-06",
            "value": 75
        }, {
            "date": "2012-11-07",
            "value": 74
        }, {
            "date": "2012-11-08",
            "value": 71
        }, {
            "date": "2012-11-09",
            "value": 76
        }, {
            "date": "2012-11-10",
            "value": 77
        }, {
            "date": "2012-11-11",
            "value": 81
        }, {
            "date": "2012-11-12",
            "value": 83
        }, {
            "date": "2012-11-13",
            "value": 80
        }, {
            "date": "2012-11-14",
            "value": 81
        }, {
            "date": "2012-11-15",
            "value": 87
        }, {
            "date": "2012-11-16",
            "value": 82
        }, {
            "date": "2012-11-17",
            "value": 86
        }, {
            "date": "2012-11-18",
            "value": 80
        }, {
            "date": "2012-11-19",
            "value": 87
        }, {
            "date": "2012-11-20",
            "value": 83
        }, {
            "date": "2012-11-21",
            "value": 85
        }, {
            "date": "2012-11-22",
            "value": 84
        }, {
            "date": "2012-11-23",
            "value": 82
        }, {
            "date": "2012-11-24",
            "value": 73
        }, {
            "date": "2012-11-25",
            "value": 71
        }, {
            "date": "2012-11-26",
            "value": 75
        }, {
            "date": "2012-11-27",
            "value": 79
        }, {
            "date": "2012-11-28",
            "value": 70
        }, {
            "date": "2012-11-29",
            "value": 73
        }, {
            "date": "2012-11-30",
            "value": 61
        }, {
            "date": "2012-12-01",
            "value": 62
        }, {
            "date": "2012-12-02",
            "value": 66
        }, {
            "date": "2012-12-03",
            "value": 65
        }, {
            "date": "2012-12-04",
            "value": 73
        }, {
            "date": "2012-12-05",
            "value": 79
        }, {
            "date": "2012-12-06",
            "value": 78
        }, {
            "date": "2012-12-07",
            "value": 78
        }, {
            "date": "2012-12-08",
            "value": 78
        }, {
            "date": "2012-12-09",
            "value": 74
        }, {
            "date": "2012-12-10",
            "value": 73
        }, {
            "date": "2012-12-11",
            "value": 75
        }, {
            "date": "2012-12-12",
            "value": 70
        }, {
            "date": "2012-12-13",
            "value": 77
        }, {
            "date": "2012-12-14",
            "value": 67
        }, {
            "date": "2012-12-15",
            "value": 62
        }, {
            "date": "2012-12-16",
            "value": 64
        }, {
            "date": "2012-12-17",
            "value": 61
        }, {
            "date": "2012-12-18",
            "value": 59
        }, {
            "date": "2012-12-19",
            "value": 53
        }, {
            "date": "2012-12-20",
            "value": 54
        }, {
            "date": "2012-12-21",
            "value": 56
        }, {
            "date": "2012-12-22",
            "value": 59
        }, {
            "date": "2012-12-23",
            "value": 58
        }, {
            "date": "2012-12-24",
            "value": 55
        }, {
            "date": "2012-12-25",
            "value": 52
        }, {
            "date": "2012-12-26",
            "value": 54
        }, {
            "date": "2012-12-27",
            "value": 50
        }, {
            "date": "2012-12-28",
            "value": 50
        }, {
            "date": "2012-12-29",
            "value": 51
        }, {
            "date": "2012-12-30",
            "value": 52
        }, {
            "date": "2012-12-31",
            "value": 58
        }, {
            "date": "2013-01-01",
            "value": 60
        }, {
            "date": "2013-01-02",
            "value": 67
        }, {
            "date": "2013-01-03",
            "value": 64
        }, {
            "date": "2013-01-04",
            "value": 66
        }, {
            "date": "2013-01-05",
            "value": 60
        }, {
            "date": "2013-01-06",
            "value": 63
        }, {
            "date": "2013-01-07",
            "value": 61
        }, {
            "date": "2013-01-08",
            "value": 60
        }, {
            "date": "2013-01-09",
            "value": 65
        }, {
            "date": "2013-01-10",
            "value": 75
        }, {
            "date": "2013-01-11",
            "value": 77
        }, {
            "date": "2013-01-12",
            "value": 78
        }, {
            "date": "2013-01-13",
            "value": 70
        }, {
            "date": "2013-01-14",
            "value": 70
        }, {
            "date": "2013-01-15",
            "value": 73
        }, {
            "date": "2013-01-16",
            "value": 71
        }, {
            "date": "2013-01-17",
            "value": 74
        }, {
            "date": "2013-01-18",
            "value": 78
        }, {
            "date": "2013-01-19",
            "value": 85
        }, {
            "date": "2013-01-20",
            "value": 82
        }, {
            "date": "2013-01-21",
            "value": 83
        }, {
            "date": "2013-01-22",
            "value": 88
        }, {
            "date": "2013-01-23",
            "value": 85
        }, {
            "date": "2013-01-24",
            "value": 85
        }, {
            "date": "2013-01-25",
            "value": 80
        }, {
            "date": "2013-01-26",
            "value": 87
        }, {
            "date": "2013-01-27",
            "value": 84
        }, {
            "date": "2013-01-28",
            "value": 83
        }, {
            "date": "2013-01-29",
            "value": 84
        }, {
            "date": "2013-01-30",
            "value": 81
        }]
    });


    var chart = AmCharts.makeChart("professional-candlesticks", {
        "type": "serial",
        "theme": "dark",
        "color": "#FFFFFF",
        "dataDateFormat": "YYYY-MM-DD",
        "valueAxes": [{
            "position": "left"
        }],
        "graphs": [{
            "id": "g1",
            "proCandlesticks": true,
            "balloonText": "Open:<b>[[open]]</b><br>Low:<b>[[low]]</b><br>High:<b>[[high]]</b><br>Close:<b>[[close]]</b><br>",
            "closeField": "close",
            "fillColors": "#00A2FF",
            "highField": "high",
            "lineColor": "#00A2FF",
            "lineAlpha": 1,
            "lowField": "low",
            "fillAlphas": 0.9,
            "negativeFillColors": "#F44336",
            "negativeLineColor": "#F44336",
            "openField": "open",
            "title": "Price:",
            "type": "candlestick",
            "valueField": "close"
        }],
        "chartScrollbar": {
            "graph": "g1",
            "graphType": "line",
            "scrollbarHeight": 30
        },
        "chartCursor": {
            "valueLineEnabled": true,
            "valueLineBalloonEnabled": true
        },
        "categoryField": "date",
        "categoryAxis": {
            "parseDates": true
        },
        "dataProvider": [{
            "date": "2011-08-01",
            "open": "136.65",
            "high": "136.96",
            "low": "134.15",
            "close": "136.49"
        }, {
            "date": "2011-08-02",
            "open": "135.26",
            "high": "135.95",
            "low": "131.50",
            "close": "131.85"
        }, {
            "date": "2011-08-05",
            "open": "132.90",
            "high": "135.27",
            "low": "128.30",
            "close": "135.25"
        }, {
            "date": "2011-08-06",
            "open": "134.94",
            "high": "137.24",
            "low": "132.63",
            "close": "135.03"
        }, {
            "date": "2011-08-07",
            "open": "136.76",
            "high": "136.86",
            "low": "132.00",
            "close": "134.01"
        }, {
            "date": "2011-08-08",
            "open": "131.11",
            "high": "133.00",
            "low": "125.09",
            "close": "126.39"
        }, {
            "date": "2011-08-09",
            "open": "123.12",
            "high": "127.75",
            "low": "120.30",
            "close": "125.00"
        }, {
            "date": "2011-08-12",
            "open": "128.32",
            "high": "129.35",
            "low": "126.50",
            "close": "127.79"
        }, {
            "date": "2011-08-13",
            "open": "128.29",
            "high": "128.30",
            "low": "123.71",
            "close": "124.03"
        }, {
            "date": "2011-08-14",
            "open": "122.74",
            "high": "124.86",
            "low": "119.65",
            "close": "119.90"
        }, {
            "date": "2011-08-15",
            "open": "117.01",
            "high": "118.50",
            "low": "111.62",
            "close": "117.05"
        }, {
            "date": "2011-08-16",
            "open": "122.01",
            "high": "123.50",
            "low": "119.82",
            "close": "122.06"
        }, {
            "date": "2011-08-19",
            "open": "123.96",
            "high": "124.50",
            "low": "120.50",
            "close": "122.22"
        }, {
            "date": "2011-08-20",
            "open": "122.21",
            "high": "128.96",
            "low": "121.00",
            "close": "127.57"
        }, {
            "date": "2011-08-21",
            "open": "131.22",
            "high": "132.75",
            "low": "130.33",
            "close": "132.51"
        }, {
            "date": "2011-08-22",
            "open": "133.09",
            "high": "133.34",
            "low": "129.76",
            "close": "131.07"
        }, {
            "date": "2011-08-23",
            "open": "130.53",
            "high": "135.37",
            "low": "129.81",
            "close": "135.30"
        }, {
            "date": "2011-08-26",
            "open": "133.39",
            "high": "134.66",
            "low": "132.10",
            "close": "132.25"
        }, {
            "date": "2011-08-27",
            "open": "130.99",
            "high": "132.41",
            "low": "126.63",
            "close": "126.82"
        }, {
            "date": "2011-08-28",
            "open": "129.88",
            "high": "134.18",
            "low": "129.54",
            "close": "134.08"
        }, {
            "date": "2011-08-29",
            "open": "132.67",
            "high": "138.25",
            "low": "132.30",
            "close": "136.25"
        }, {
            "date": "2011-08-30",
            "open": "139.49",
            "high": "139.65",
            "low": "137.41",
            "close": "138.48"
        }, {
            "date": "2011-09-03",
            "open": "139.94",
            "high": "145.73",
            "low": "139.84",
            "close": "144.16"
        }, {
            "date": "2011-09-04",
            "open": "144.97",
            "high": "145.84",
            "low": "136.10",
            "close": "136.76"
        }, {
            "date": "2011-09-05",
            "open": "135.56",
            "high": "137.57",
            "low": "132.71",
            "close": "135.01"
        }, {
            "date": "2011-09-06",
            "open": "132.01",
            "high": "132.30",
            "low": "130.00",
            "close": "131.77"
        }, {
            "date": "2011-09-09",
            "open": "136.99",
            "high": "138.04",
            "low": "133.95",
            "close": "136.71"
        }, {
            "date": "2011-09-10",
            "open": "137.90",
            "high": "138.30",
            "low": "133.75",
            "close": "135.49"
        }, {
            "date": "2011-09-11",
            "open": "135.99",
            "high": "139.40",
            "low": "135.75",
            "close": "136.85"
        }, {
            "date": "2011-09-12",
            "open": "138.83",
            "high": "139.00",
            "low": "136.65",
            "close": "137.20"
        }, {
            "date": "2011-09-13",
            "open": "136.57",
            "high": "138.98",
            "low": "136.20",
            "close": "138.81"
        }, {
            "date": "2011-09-16",
            "open": "138.99",
            "high": "140.59",
            "low": "137.60",
            "close": "138.41"
        }, {
            "date": "2011-09-17",
            "open": "139.06",
            "high": "142.85",
            "low": "137.83",
            "close": "140.92"
        }, {
            "date": "2011-09-18",
            "open": "143.02",
            "high": "143.16",
            "low": "139.40",
            "close": "140.77"
        }, {
            "date": "2011-09-19",
            "open": "140.15",
            "high": "141.79",
            "low": "139.32",
            "close": "140.31"
        }, {
            "date": "2011-09-20",
            "open": "141.14",
            "high": "144.65",
            "low": "140.31",
            "close": "144.15"
        }, {
            "date": "2011-09-23",
            "open": "146.73",
            "high": "149.85",
            "low": "146.65",
            "close": "148.28"
        }, {
            "date": "2011-09-24",
            "open": "146.84",
            "high": "153.22",
            "low": "146.82",
            "close": "153.18"
        }, {
            "date": "2011-09-25",
            "open": "154.47",
            "high": "155.00",
            "low": "151.25",
            "close": "152.77"
        }, {
            "date": "2011-09-26",
            "open": "153.77",
            "high": "154.52",
            "low": "152.32",
            "close": "154.50"
        }, {
            "date": "2011-09-27",
            "open": "153.44",
            "high": "154.60",
            "low": "152.75",
            "close": "153.47"
        }, {
            "date": "2011-09-30",
            "open": "154.63",
            "high": "157.41",
            "low": "152.93",
            "close": "156.34"
        }, {
            "date": "2011-10-01",
            "open": "156.55",
            "high": "158.59",
            "low": "155.89",
            "close": "158.45"
        }, {
            "date": "2011-10-02",
            "open": "157.78",
            "high": "159.18",
            "low": "157.01",
            "close": "157.92"
        }, {
            "date": "2011-10-03",
            "open": "158.00",
            "high": "158.08",
            "low": "153.50",
            "close": "156.24"
        }, {
            "date": "2011-10-04",
            "open": "158.37",
            "high": "161.58",
            "low": "157.70",
            "close": "161.45"
        }, {
            "date": "2011-10-07",
            "open": "163.49",
            "high": "167.91",
            "low": "162.97",
            "close": "167.91"
        }, {
            "date": "2011-10-08",
            "open": "170.20",
            "high": "171.11",
            "low": "166.68",
            "close": "167.86"
        }, {
            "date": "2011-10-09",
            "open": "167.55",
            "high": "167.88",
            "low": "165.60",
            "close": "166.79"
        }, {
            "date": "2011-10-10",
            "open": "169.49",
            "high": "171.88",
            "low": "153.21",
            "close": "162.23"
        }, {
            "date": "2011-10-11",
            "open": "163.01",
            "high": "167.28",
            "low": "161.80",
            "close": "167.25"
        }, {
            "date": "2011-10-14",
            "open": "167.98",
            "high": "169.57",
            "low": "163.50",
            "close": "166.98"
        }, {
            "date": "2011-10-15",
            "open": "165.54",
            "high": "170.18",
            "low": "165.15",
            "close": "169.58"
        }, {
            "date": "2011-10-16",
            "open": "172.69",
            "high": "173.04",
            "low": "169.18",
            "close": "172.75"
        }, {
            "date": "2011-10-17",
            "open": "171.50",
            "high": "174.19",
            "low": "171.05",
            "close": "173.50"
        }, {
            "date": "2011-10-18",
            "open": "174.24",
            "high": "174.63",
            "low": "170.00",
            "close": "170.42"
        }, {
            "date": "2011-10-21",
            "open": "170.35",
            "high": "174.90",
            "low": "169.96",
            "close": "174.36"
        }, {
            "date": "2011-10-22",
            "open": "188.56",
            "high": "188.60",
            "low": "182.76",
            "close": "186.16"
        }, {
            "date": "2011-10-23",
            "open": "185.81",
            "high": "187.21",
            "low": "179.24",
            "close": "185.93"
        }, {
            "date": "2011-10-24",
            "open": "184.87",
            "high": "185.90",
            "low": "181.66",
            "close": "182.78"
        }, {
            "date": "2011-10-25",
            "open": "185.29",
            "high": "185.37",
            "low": "182.88",
            "close": "184.70"
        }, {
            "date": "2011-10-28",
            "open": "185.45",
            "high": "186.59",
            "low": "184.70",
            "close": "185.09"
        }, {
            "date": "2011-10-29",
            "open": "186.18",
            "high": "189.37",
            "low": "184.73",
            "close": "187.00"
        }, {
            "date": "2011-10-30",
            "open": "187.63",
            "high": "190.12",
            "low": "184.95",
            "close": "189.95"
        }, {
            "date": "2011-10-31",
            "open": "188.60",
            "high": "190.10",
            "low": "180.00",
            "close": "187.44"
        }, {
            "date": "2011-11-01",
            "open": "189.21",
            "high": "189.44",
            "low": "183.49",
            "close": "187.87"
        }, {
            "date": "2011-11-04",
            "open": "185.29",
            "high": "188.96",
            "low": "184.24",
            "close": "186.18"
        }, {
            "date": "2011-11-05",
            "open": "187.05",
            "high": "192.00",
            "low": "185.27",
            "close": "191.79"
        }, {
            "date": "2011-11-06",
            "open": "190.61",
            "high": "192.68",
            "low": "186.13",
            "close": "186.30"
        }, {
            "date": "2011-11-07",
            "open": "186.67",
            "high": "186.90",
            "low": "167.77",
            "close": "175.47"
        }, {
            "date": "2011-11-08",
            "open": "171.15",
            "high": "175.12",
            "low": "165.21",
            "close": "165.37"
        }, {
            "date": "2011-11-11",
            "open": "165.28",
            "high": "167.70",
            "low": "150.63",
            "close": "153.76"
        }, {
            "date": "2011-11-12",
            "open": "160.85",
            "high": "170.98",
            "low": "153.76",
            "close": "169.96"
        }, {
            "date": "2011-11-13",
            "open": "177.16",
            "high": "177.57",
            "low": "163.74",
            "close": "166.11"
        }, {
            "date": "2011-11-14",
            "open": "166.39",
            "high": "169.59",
            "low": "160.30",
            "close": "164.30"
        }, {
            "date": "2011-11-15",
            "open": "165.30",
            "high": "167.02",
            "low": "159.33",
            "close": "166.39"
        }, {
            "date": "2011-11-18",
            "open": "166.10",
            "high": "168.20",
            "low": "162.10",
            "close": "163.95"
        }, {
            "date": "2011-11-19",
            "open": "165.67",
            "high": "171.79",
            "low": "163.53",
            "close": "168.85"
        }, {
            "date": "2011-11-20",
            "open": "165.84",
            "high": "172.35",
            "low": "164.67",
            "close": "168.46"
        }, {
            "date": "2011-11-22",
            "open": "172.00",
            "high": "172.05",
            "low": "169.75",
            "close": "171.54"
        }, {
            "date": "2011-11-25",
            "open": "173.59",
            "high": "177.27",
            "low": "172.35",
            "close": "172.54"
        }, {
            "date": "2011-11-26",
            "open": "175.22",
            "high": "175.79",
            "low": "170.01",
            "close": "174.81"
        }, {
            "date": "2011-11-27",
            "open": "176.82",
            "high": "180.60",
            "low": "175.35",
            "close": "180.22"
        }, {
            "date": "2011-11-28",
            "open": "179.43",
            "high": "185.17",
            "low": "179.15",
            "close": "184.29"
        }, {
            "date": "2011-11-29",
            "open": "187.34",
            "high": "187.70",
            "low": "179.70",
            "close": "182.22"
        }, {
            "date": "2011-12-02",
            "open": "181.86",
            "high": "184.14",
            "low": "177.70",
            "close": "178.86"
        }, {
            "date": "2011-12-03",
            "open": "177.15",
            "high": "180.90",
            "low": "176.99",
            "close": "179.81"
        }, {
            "date": "2011-12-04",
            "open": "182.89",
            "high": "186.00",
            "low": "182.41",
            "close": "185.50"
        }, {
            "date": "2011-12-05",
            "open": "186.19",
            "high": "190.10",
            "low": "186.12",
            "close": "189.95"
        }, {
            "date": "2011-12-06",
            "open": "190.54",
            "high": "194.99",
            "low": "188.04",
            "close": "194.30"
        }, {
            "date": "2011-12-09",
            "open": "193.59",
            "high": "195.66",
            "low": "192.69",
            "close": "194.21"
        }, {
            "date": "2011-12-10",
            "open": "194.75",
            "high": "196.83",
            "low": "187.39",
            "close": "188.54"
        }, {
            "date": "2011-12-11",
            "open": "193.44",
            "high": "194.48",
            "low": "185.76",
            "close": "190.86"
        }, {
            "date": "2011-12-12",
            "open": "190.19",
            "high": "192.12",
            "low": "187.82",
            "close": "191.83"
        }, {
            "date": "2011-12-13",
            "open": "190.37",
            "high": "193.20",
            "low": "189.54",
            "close": "190.39"
        }, {
            "date": "2011-12-16",
            "open": "190.72",
            "high": "192.65",
            "low": "182.98",
            "close": "184.40"
        }, {
            "date": "2011-12-17",
            "open": "186.52",
            "high": "187.33",
            "low": "178.60",
            "close": "182.98"
        }, {
            "date": "2011-12-18",
            "open": "182.98",
            "high": "184.64",
            "low": "180.90",
            "close": "183.12"
        }, {
            "date": "2011-12-19",
            "open": "185.43",
            "high": "187.83",
            "low": "183.33",
            "close": "187.21"
        }, {
            "date": "2011-12-20",
            "open": "190.12",
            "high": "193.91",
            "low": "189.89",
            "close": "193.91"
        }, {
            "date": "2011-12-23",
            "open": "195.03",
            "high": "199.33",
            "low": "194.79",
            "close": "198.80"
        }, {
            "date": "2011-12-25",
            "open": "199.01",
            "high": "200.96",
            "low": "196.82",
            "close": "198.95"
        }, {
            "date": "2011-12-26",
            "open": "198.95",
            "high": "202.96",
            "low": "197.80",
            "close": "198.57"
        }, {
            "date": "2011-12-27",
            "open": "200.59",
            "high": "201.56",
            "low": "196.88",
            "close": "199.83"
        }, {
            "date": "2011-12-30",
            "open": "199.50",
            "high": "200.50",
            "low": "197.75",
            "close": "198.08"
        }, {
            "date": "2012-01-01",
            "open": "199.27",
            "high": "200.26",
            "low": "192.55",
            "close": "194.84"
        }, {
            "date": "2012-01-02",
            "open": "195.41",
            "high": "197.39",
            "low": "192.69",
            "close": "194.93"
        }, {
            "date": "2012-01-03",
            "open": "191.45",
            "high": "193.00",
            "low": "178.89",
            "close": "180.05"
        }, {
            "date": "2012-01-06",
            "open": "181.25",
            "high": "183.60",
            "low": "170.23",
            "close": "177.64"
        }, {
            "date": "2012-01-07",
            "open": "180.14",
            "high": "182.46",
            "low": "170.80",
            "close": "171.25"
        }, {
            "date": "2012-01-08",
            "open": "171.30",
            "high": "179.50",
            "low": "168.30",
            "close": "179.40"
        }, {
            "date": "2012-01-09",
            "open": "177.58",
            "high": "181.00",
            "low": "175.41",
            "close": "178.02"
        }, {
            "date": "2012-01-10",
            "open": "176.00",
            "high": "177.85",
            "low": "170.00",
            "close": "172.69"
        }, {
            "date": "2012-01-13",
            "open": "177.52",
            "high": "179.42",
            "low": "175.17",
            "close": "178.78"
        }, {
            "date": "2012-01-14",
            "open": "177.72",
            "high": "179.22",
            "low": "164.66",
            "close": "169.04"
        }, {
            "date": "2012-01-15",
            "open": "165.23",
            "high": "169.01",
            "low": "156.70",
            "close": "159.64"
        }, {
            "date": "2012-01-16",
            "open": "161.51",
            "high": "165.36",
            "low": "158.42",
            "close": "160.89"
        }, {
            "date": "2012-01-17",
            "open": "161.71",
            "high": "165.75",
            "low": "159.61",
            "close": "161.36"
        }, {
            "date": "2012-01-21",
            "open": "148.06",
            "high": "159.98",
            "low": "146.00",
            "close": "155.64"
        }, {
            "date": "2012-01-22",
            "open": "136.19",
            "high": "140.00",
            "low": "126.14",
            "close": "139.07"
        }, {
            "date": "2012-01-23",
            "open": "139.99",
            "high": "140.70",
            "low": "132.01",
            "close": "135.60"
        }, {
            "date": "2012-01-24",
            "open": "138.99",
            "high": "139.09",
            "low": "129.61",
            "close": "130.01"
        }, {
            "date": "2012-01-27",
            "open": "128.16",
            "high": "133.20",
            "low": "126.45",
            "close": "130.01"
        }, {
            "date": "2012-01-28",
            "open": "131.15",
            "high": "132.79",
            "low": "129.05",
            "close": "131.54"
        }, {
            "date": "2012-01-29",
            "open": "131.37",
            "high": "135.45",
            "low": "130.00",
            "close": "132.18"
        }, {
            "date": "2012-01-30",
            "open": "129.45",
            "high": "136.65",
            "low": "129.40",
            "close": "135.36"
        }, {
            "date": "2012-01-31",
            "open": "136.24",
            "high": "136.59",
            "low": "132.18",
            "close": "133.75"
        }, {
            "date": "2012-02-03",
            "open": "134.21",
            "high": "135.90",
            "low": "131.42",
            "close": "131.65"
        }, {
            "date": "2012-02-04",
            "open": "130.43",
            "high": "134.00",
            "low": "128.90",
            "close": "129.36"
        }, {
            "date": "2012-02-05",
            "open": "130.83",
            "high": "131.92",
            "low": "121.77",
            "close": "122.00"
        }, {
            "date": "2012-02-06",
            "open": "119.97",
            "high": "124.78",
            "low": "117.27",
            "close": "121.24"
        }, {
            "date": "2012-02-07",
            "open": "122.08",
            "high": "125.70",
            "low": "121.60",
            "close": "125.48"
        }, {
            "date": "2012-02-10",
            "open": "128.01",
            "high": "129.98",
            "low": "127.20",
            "close": "129.45"
        }, {
            "date": "2012-02-11",
            "open": "130.70",
            "high": "131.00",
            "low": "123.62",
            "close": "124.86"
        }, {
            "date": "2012-02-12",
            "open": "126.68",
            "high": "129.78",
            "low": "125.63",
            "close": "129.40"
        }],
        "export": {
            "enabled": true,
            "position": "bottom-right"
        },
        
        
    });

    var chart = AmCharts.makeChart("comparing-stock-indices", {
        "type": "stock",
        "theme": "dark",
        "color": "#ffffff",
        "dataSets": [{
            "title": "MSFT",
            "fieldMappings": [{
                "fromField": "Open",
                "toField": "open"
            }, {
                "fromField": "High",
                "toField": "high"
            }, {
                "fromField": "Low",
                "toField": "low"
            }, {
                "fromField": "Close",
                "toField": "close"
            }, {
                "fromField": "Volume",
                "toField": "volume"
            }],
            "compared": false,
            "categoryField": "Date",

            /**
             * data loader for data set data
             */
            "dataLoader": {
                "url": "https://www.amcharts.com/wp-content/uploads/assets/stock/MSFT.csv",
                "format": "csv",
                "showCurtain": true,
                "showErrors": true,
                "async": true,
                "reverse": true,
                "delimiter": ",",
                "useColumnNames": true
            },

            /**
             * data loader for events data
             */
            "eventDataLoader": {
                "url": "https://www.amcharts.com/wp-content/uploads/assets/stock/MSFT_events.csv",
                "format": "csv",
                "showCurtain": true,
                "showErrors": true,
                "async": true,
                "reverse": true,
                "delimiter": ",",
                "useColumnNames": true,
                "postProcess": function (data) {
                    for (var x in data) {
                        switch (data[x].Type) {
                            case 'A':
                                var color = "#00A2FF";
                                break;
                            default:
                                var color = "#DCDCDC";
                                break;
                        }
                        data[x].Description = data[x].Description.replace("Upgrade", "<strong style=\"color: #0c0\">Upgrade</strong>").replace("Downgrade", "<strong style=\"color: #c00\">Downgrade</strong>");
                        data[x] = {
                            "type": "pin",
                            "graph": "g1",
                            "backgroundColor": color,
                            "date": data[x].Date,
                            "text": data[x].Type,
                            "description": "<strong>" + data[x].Title + "</strong><br />" + data[x].Description
                        };
                    }
                    return data;
                }
            }

        }, {
            "title": "TXN",
            "fieldMappings": [{
                "fromField": "Open",
                "toField": "open"
            }, {
                "fromField": "High",
                "toField": "high"
            }, {
                "fromField": "Low",
                "toField": "low"
            }, {
                "fromField": "Close",
                "toField": "close"
            }, {
                "fromField": "Volume",
                "toField": "volume"
            }],
            "compared": true,
            "categoryField": "Date",
            "dataLoader": {
                "url": "https://www.amcharts.com/wp-content/uploads/assets/stock/TXN.csv",
                "format": "csv",
                "showCurtain": true,
                "showErrors": true,
                "async": true,
                "reverse": true,
                "delimiter": ",",
                "useColumnNames": true
            }
        }],
        "dataDateFormat": "YYYY-MM-DD",

        "panels": [{
            "title": "Value",
            "percentHeight": 70,

            "stockGraphs": [{
                "type": "candlestick",
                "id": "g1",
                "openField": "open",
                "closeField": "close",
                "highField": "high",
                "lowField": "low",
                "valueField": "close",
                "lineColor": "#fff",
                "fillColors": "#fff",
                "negativeLineColor": "#F44336",
                "negativeFillColors": "#F44336",
                "fillAlphas": 1,
                "comparedGraphLineThickness": 2,
                "columnWidth": 0.7,
                "useDataSetColors": false,
                "comparable": true,
                "compareField": "close",
                "showBalloon": false,
                "proCandlesticks": true
            }],

            "stockLegend": {
                "valueTextRegular": undefined,
                "periodValueTextComparing": "[[percents.value.close]]%"
            }

        },

        {
            "title": "Volume",
            "percentHeight": 30,
            "marginTop": 1,
            "columnWidth": 0.6,
            "showCategoryAxis": false,

            "stockGraphs": [{
                "valueField": "volume",
                "openField": "open",
                "type": "column",
                "showBalloon": false,
                "fillAlphas": 1,
                "lineColor": "#fff",
                "fillColors": "#fff",
                "negativeLineColor": "#F44336",
                "negativeFillColors": "#F44336",
                "useDataSetColors": false
            }],

            "stockLegend": {
                "markerType": "none",
                "markerSize": 0,
                "labelText": "",
                "periodValueTextRegular": "[[value.close]]"
            },

            "valueAxes": [{
                "usePrefixes": true
            }]
        }
        ],

        "panelsSettings": {
               "color": "#fff",
            "plotAreaFillColors": "transparent",
            "plotAreaFillAlphas": 1,
            "marginLeft": 60,
            "marginTop": 5,
            "marginBottom": 5
        },

        "chartScrollbarSettings": {
            "graph": "g1",
            "graphType": "line",
            "usePeriod": "WW",
            "backgroundColor": "transparent",
            "graphFillColor": "#666",
            "graphFillAlpha": 0.5,
            "gridColor": "#555",
            "gridAlpha": 1,
            "selectedBackgroundColor": "#444",
            "selectedGraphFillAlpha": 1
        },

        "categoryAxesSettings": {
            "equalSpacing": true,
            "gridColor": "transparent",
            "gridAlpha": 1
        },

        "valueAxesSettings": {
            "gridColor": "transparent",
            "gridAlpha": 1,
            "inside": false,
            "showLastLabel": true
        },

        "chartCursorSettings": {
            "pan": true,
            "valueLineEnabled": true,
            "valueLineBalloonEnabled": true
        },

        "legendSettings": {
            "color": "#fff"
        },

        "stockEventsSettings": {
            "showAt": "high",
            "type": "pin"
        },

        "balloon": {
            "textAlign": "left",
            "offsetY": 10
        },

        "periodSelector": {
            "position": "bottom",
            "periods": [{
                "period": "DD",
                "count": 10,
                "label": "10D"
            }, {
                "period": "MM",
                "count": 1,
                "label": "1M"
            }, {
                "period": "MM",
                "count": 6,
                "label": "6M"
            }, {
                "period": "YYYY",
                "count": 1,
                "label": "1Y"
            }, {
                "period": "YYYY",
                "count": 2,
                "selected": true,
                "label": "2Y"
            },
            /* {
                 "period": "YTD",
                 "label": "YTD"
               },*/
            {
                "period": "MAX",
                "label": "MAX"
            }
            ]
        },
        
        
    });


    var multiplePanelData = [];
    generateChartData();


    function generateChartData() {
        var firstDate = new Date();
        firstDate.setHours(0, 0, 0, 0);
        firstDate.setDate(firstDate.getDate() - 2000);

        for (var i = 0; i < 2000; i++) {
            var newDate = new Date(firstDate);

            newDate.setDate(newDate.getDate() + i);

            var open = Math.round(Math.random() * (30) + 100);
            var close = open + Math.round(Math.random() * (15) - Math.random() * 10);

            var low;
            if (open < close) {
                low = open - Math.round(Math.random() * 5);
            } else {
                low = close - Math.round(Math.random() * 5);
            }

            var high;
            if (open < close) {
                high = close + Math.round(Math.random() * 5);
            } else {
                high = open + Math.round(Math.random() * 5);
            }

            var volume = Math.round(Math.random() * (1000 + i)) + 100 + i;
            var value = Math.round(Math.random() * (30) + 100);

            multiplePanelData[i] = ({
                "date": newDate,
                "open": open,
                "close": close,
                "high": high,
                "low": low,
                "volume": volume,
                "value": value
            });
        }
    }

    var chart = AmCharts.makeChart("multiple-panel-data", {
        "type": "stock",
        "theme": "light",
        "dataSets": [{
            "fieldMappings": [{
                "fromField": "open",
                "toField": "open"
            }, {
                "fromField": "close",
                "toField": "close"
            }, {
                "fromField": "high",
                "toField": "high"
            }, {
                "fromField": "low",
                "toField": "low"
            }, {
                "fromField": "volume",
                "toField": "volume"
            }, {
                "fromField": "value",
                "toField": "value"
            }],
            "color": "#00A2FF",
            "dataProvider": multiplePanelData,
            "title": "West Stock",
            "categoryField": "date"
        }, {
            "fieldMappings": [{
                "fromField": "value",
                "toField": "value"
            }],
            "color": "#0000FF",
            "dataProvider": multiplePanelData,
            "compared": true,
            "title": "East Stock",
            "categoryField": "date"
        }],


        "panels": [{
            "title": "Value",
            "showCategoryAxis": false,
            "percentHeight": 70,
            "valueAxes": [{
                "id": "v1",
                "dashLength": 5
            }],

            "categoryAxis": {
                "dashLength": 5
            },

            "stockGraphs": [{
                "type": "candlestick",
                "id": "g1",
                "openField": "open",
                "closeField": "close",
                "highField": "high",
                "lowField": "low",
                "valueField": "close",
                "lineColor": "#DCDCDC",
                "fillColors": "#DCDCDC",
                "negativeLineColor": "#F44336",
                "negativeFillColors": "#F44336",
                "fillAlphas": 1,
                "useDataSetColors": false,
                "comparable": true,
                "compareField": "value",
                "showBalloon": false,
                "proCandlesticks": true
            }],

            "stockLegend": {
                "valueTextRegular": undefined,
                "periodValueTextComparing": "[[percents.value.close]]%"
            }
        },

        {
            "title": "Volume",
            "percentHeight": 30,
            "marginTop": 1,
            "showCategoryAxis": true,
            "valueAxes": [{
                "dashLength": 5
            }],

            "categoryAxis": {
                "dashLength": 5
            },

            "stockGraphs": [{
                "valueField": "volume",
                "type": "column",
                "showBalloon": false,
                "fillAlphas": 1
            }],

            "stockLegend": {
                "markerType": "none",
                "markerSize": 0,
                "labelText": "",
                "periodValueTextRegular": "[[value.close]]"
            }
        }
        ],

        "chartScrollbarSettings": {
            "graph": "g1",
            "graphType": "line",
            "usePeriod": "WW"
        },

        "legendSettings": {
            "color": "#fff"
        },

        "chartCursorSettings": {
            "valueLineBalloonEnabled": true,
            "valueLineEnabled": true
        },

        "periodSelector": {
            "position": "bottom",
            "periods": [{
                "period": "DD",
                "count": 10,
                "label": "10 days"
            }, {
                "period": "MM",
                "selected": true,
                "count": 1,
                "label": "1 month"
            }, {
                "period": "YYYY",
                "count": 1,
                "label": "1 year"
            }, {
                "period": "YTD",
                "label": "YTD"
            }, {
                "period": "MAX",
                "label": "MAX"
            }]
        },
        "export": {
            "enabled": true
        }
    });

    /**
 * This demo uses direct URL to Poloniex exchance, which means that depending on your browser settings,
 * it may not work dure to CORS restrictions.
 * Please consult Poloniex API for further information:
 * https://poloniex.com/support/api/
 */

    var chart = AmCharts.makeChart("depth-chart", {
        "type": "serial",
        "theme": "dark",
        "color": "#fff",
        "dataLoader": {
            "url": "https://poloniex.com/public?command=returnOrderBook&currencyPair=BTC_ETH&depth=50",
            "format": "json",
            "reload": 30,
            "postProcess": function (data) {

                // Function to process (sort and calculate cummulative volume)
                function processData(list, type, desc) {

                    // Convert to data points
                    for (var i = 0; i < list.length; i++) {
                        list[i] = {
                            value: Number(list[i][0]),
                            volume: Number(list[i][1]),
                        }
                    }

                    // Sort list just in case
                    list.sort(function (a, b) {
                        if (a.value > b.value) {
                            return 1;
                        }
                        else if (a.value < b.value) {
                            return -1;
                        }
                        else {
                            return 0;
                        }
                    });

                    // Calculate cummulative volume
                    if (desc) {
                        for (var i = list.length - 1; i >= 0; i--) {
                            if (i < (list.length - 1)) {
                                list[i].totalvolume = list[i + 1].totalvolume + list[i].volume;
                            }
                            else {
                                list[i].totalvolume = list[i].volume;
                            }
                            var dp = {};
                            dp["value"] = list[i].value;
                            dp[type + "volume"] = list[i].volume;
                            dp[type + "totalvolume"] = list[i].totalvolume;
                            res.unshift(dp);
                        }
                    }
                    else {
                        for (var i = 0; i < list.length; i++) {
                            if (i > 0) {
                                list[i].totalvolume = list[i - 1].totalvolume + list[i].volume;
                            }
                            else {
                                list[i].totalvolume = list[i].volume;
                            }
                            var dp = {};
                            dp["value"] = list[i].value;
                            dp[type + "volume"] = list[i].volume;
                            dp[type + "totalvolume"] = list[i].totalvolume;
                            res.push(dp);
                        }
                    }

                }

                // Init
                var res = [];
                processData(data.bids, "bids", true);
                processData(data.asks, "asks", false);

                //console.log(res);
                return res;
            }
        },
        "graphs": [{
            "id": "bids",
            "fillAlphas": 0.1,
            "lineAlpha": 1,
            "lineThickness": 2,
            "lineColor": "#0000FF",
            "type": "step",
            "valueField": "bidstotalvolume",
            "balloonFunction": balloon
        }, {
            "id": "asks",
            "fillAlphas": 0.1,
            "lineAlpha": 1,
            "lineThickness": 2,
            "lineColor": "#F44336",
            "type": "step",
            "valueField": "askstotalvolume",
            "balloonFunction": balloon
        }, {
            "lineAlpha": 0,
            "fillAlphas": 0.2,
            "lineColor": "#000",
            "type": "column",
            "clustered": false,
            "valueField": "bidsvolume",
            "showBalloon": false
        }, {
            "lineAlpha": 0,
            "fillAlphas": 0.2,
            "lineColor": "#000",
            "type": "column",
            "clustered": false,
            "valueField": "asksvolume",
            "showBalloon": false
        }],
        "categoryField": "value",
        "chartCursor": {},
        "balloon": {
            "textAlign": "left"
        },
        "valueAxes": [{
            "title": "Volume"
        }],
        "categoryAxis": {
            "title": "Price (BTC/ETH)",
            "minHorizontalGap": 100,
            "startOnAxis": true,
            "showFirstLabel": false,
            "showLastLabel": false
        },
        "export": {
            "enabled": true
        },
    });

    function balloon(item, graph) {
        var txt;
        if (graph.id == "asks") {
            txt = "Ask: <strong>" + formatNumber(item.dataContext.value, graph.chart, 4) + "</strong><br />"
                + "Total volume: <strong>" + formatNumber(item.dataContext.askstotalvolume, graph.chart, 4) + "</strong><br />"
                + "Volume: <strong>" + formatNumber(item.dataContext.asksvolume, graph.chart, 4) + "</strong>";
        }
        else {
            txt = "Bid: <strong>" + formatNumber(item.dataContext.value, graph.chart, 4) + "</strong><br />"
                + "Total volume: <strong>" + formatNumber(item.dataContext.bidstotalvolume, graph.chart, 4) + "</strong><br />"
                + "Volume: <strong>" + formatNumber(item.dataContext.bidsvolume, graph.chart, 4) + "</strong>";
        }
        return txt;
    }

    function formatNumber(val, chart, precision) {
        return AmCharts.formatNumber(
            val,
            {
                precision: precision ? precision : chart.precision,
                decimalSeparator: chart.decimalSeparator,
                thousandsSeparator: chart.thousandsSeparator
            }
        );
    }

});
(function($) {
    "use strict"

    $('#demo_1').click(function() { 
        $.blockUI({ message: '<h1 class="p-3">Just a moment...</h1>' }); 
 
        setTimeout($.unblockUI, 2000); 
    });

    $('#demo_2').click(function() { 
        $.blockUI({ message: $('#loginForm') }); 
 
        setTimeout($.unblockUI, 2000); 
    });

    $('#demo_3').click(function() { 
        $.blockUI({ css: { 
            border: 'none', 
            padding: '15px', 
            backgroundColor: '#000', 
            '-webkit-border-radius': '10px', 
            '-moz-border-radius': '10px', 
            opacity: .5, 
            color: '#fff' 
        } }); 
 
        setTimeout($.unblockUI, 2000); 
    }); 

    $('#demo_4').click(function() { 
        $.blockUI({ overlayCSS: { backgroundColor: '#00f' } }); 
 
        setTimeout($.unblockUI, 2000); 
    });

    $('#demo_5').click(function() { 
        $.blockUI({ 
            message: $('#tallContent'), 
            css: { top: '20%' } 
        }); 
 
        setTimeout($.unblockUI, 20000); 
    });

    $('#demo_6').click(function() { 
        $.blockUI({ 
            message: $('#displayBox'), 
            css: { 
                top:  ($(window).height() - 400) /2 + 'px', 
                left: ($(window).width() - 400) /2 + 'px', 
                width: '400px' 
            } 
        }); 
 
        setTimeout($.unblockUI, 2000); 
    });
    
    $('#demo_7').click(function() { 
        $.blockUI({ 
            centerY: 0, 
            css: { top: '10px', left: '', right: '10px' } 
        }); 
 
        setTimeout($.unblockUI, 2000); 
    });

    $('#demo_8').click(function() { 
        $.blockUI({ message: null }); 
 
        setTimeout($.unblockUI, 2000); 
    }); 

    $('#demo_9').click(function() { 
        $.blockUI(); 
        $('.blockOverlay').attr('title','Click to unblock').click($.unblockUI); 
    });

    $('#demo_10').click(function() { 
        $.blockUI({ 
            message: '<h1>Auto-Unblock!</h1>', 
            timeout: 2000 
        }); 
    }); 

    $('#demo_11').click(function() { 
        $.blockUI({ 
            message: $('.growlUI'), 
            fadeIn: 700, 
            fadeOut: 700, 
            timeout: 2000, 
            showOverlay: false, 
            centerY: false, 
            css: { 
                width: '350px', 
                top: '10px', 
                left: '', 
                right: '10px', 
                border: 'none', 
                padding: '5px', 
                backgroundColor: '#000', 
                '-webkit-border-radius': '10px', 
                '-moz-border-radius': '10px', 
                opacity: .6, 
                color: '#fff' 
            } 
        }); 
    }); 

    $('#demo_12').click(function() { 
        $.growlUI('Growl Notification', 'Have a nice day!'); 
    });


    $('#block-element1').click(function() { 
        $('.block-element-1').block({ message: null }); 
    });

    $('#unblock-element1').click(function() { 
        $('.block-element-1').unblock(); 
    });


    $('#block-element2').click(function() { 
        $('.block-element-2').block({
            message: '<h1>Processing</h1>', 
            css: { border: '3px solid #ddd' }  
        }); 
    });

    $('#unblock-element2').click(function() { 
        $('.block-element-2').unblock(); 
    });



})(jQuery);
(function($) {
    'use strict'

    $('select[name="duallistbox_demo1[]"]').bootstrapDualListbox();

    $('.demo2').bootstrapDualListbox({
        nonSelectedListLabel: 'Non-selected',
        selectedListLabel: 'Selected',
        preserveSelectionOnMove: 'moved',
        moveOnSelect: false,
        nonSelectedFilter: 'ion ([7-9]|[1][0-2])'
    });

    let demo3 = $('.demo3').bootstrapDualListbox({
        nonSelectedListLabel: 'Non-selected',
        selectedListLabel: 'Selected',
        preserveSelectionOnMove: 'moved',
        moveOnSelect: false,
        nonSelectedFilter: 'ion ([7-9]|[1][0-2])'
    });

    $("#demo3-add").click(function() {
        demo3.append('<option value="apples">Apples</option><option value="oranges" selected>Oranges</option>');
        demo3.bootstrapDualListbox('refresh');
    });
    
    $("#demo3-add-clear").click(function() {
        demo3.append('<option value="apples">Apples</option><option value="oranges" selected>Oranges</option>');
        demo3.bootstrapDualListbox('refresh', true);
    });








})(jQuery);
$(function(){$("#username").editable({type:"text",pk:1,name:"username",title:"Enter username"}),$("#firstname").editable({validate:function(e){if(""==$.trim(e))return"This field is required"}}),$("#sex").editable({prepend:"not selected",source:[{value:1,text:"Male"},{value:2,text:"Female"}],display:function(e,t){var i=$.grep(t,function(t){return t.value==e});i.length?$(this).text(i[0].text).css("color",{"":"#98a6ad",1:"#5fbeaa",2:"#5d9cec"}[e]):$(this).empty()}}),$("#status").editable(),$("#group").editable({showbuttons:!1}),$("#dob").editable(),$("#comments").editable({showbuttons:"bottom"}),$("#inline-username").editable({type:"text",pk:1,name:"username",title:"Enter username",mode:"inline"}),$("#inline-firstname").editable({validate:function(e){if(""==$.trim(e))return"This field is required"},mode:"inline"}),$("#inline-sex").editable({prepend:"not selected",mode:"inline",source:[{value:1,text:"Male"},{value:2,text:"Female"}],display:function(e,t){var i=$.grep(t,function(t){return t.value==e});i.length?$(this).text(i[0].text).css("color",{"":"#98a6ad",1:"#5fbeaa",2:"#5d9cec"}[e]):$(this).empty()}}),$("#inline-status").editable({mode:"inline"}),$("#inline-group").editable({showbuttons:!1,mode:"inline"}),$("#inline-dob").editable({mode:"inline"}),$("#inline-comments").editable({showbuttons:"bottom",mode:"inline"})});
(function($) {
    "use strict"

    $('.basic-multiselect').multiselect();

    $('.basic-multiselect-optgroup').multiselect({
        enableClickableOptGroups: true
    });

    $('.basic-multiselect-selectall').multiselect({
        enableClickableOptGroups: true, 
        includeSelectAllOption: true
    });
    
    












})(jQuery);
(function($) {
    "use strict"

    //primary alerts
    $('.primary-alert-left-top').on('click', function() {
        $.notify({
            // options
            message: 'Congratulations! You\'ve succcessfully completed the task.' 
        },{
            // settings
            type: 'primary', 
            offset: 20,
            spacing: 5,
            z_index: 1031,
            delay: 5000,
            timer: 1000,
            placement: {
                from: 'top', 
                align: 'left'
            },
            animate: {
                enter: 'animated fadeInDown',
                exit: 'animated fadeOutUp'
            }
        });
    });

    $('.primary-alert-right-top').on('click', function() {
        $.notify({
            // options
            message: 'Congratulations! You\'ve succcessfully completed the task.' 
        },{
            // settings
            type: 'primary', 
            offset: {
                y: 20, 
                x: 320
            },
            spacing: 5,
            z_index: 1031,
            delay: 5000,
            timer: 1000,
            placement: {
                from: 'top', 
                align: 'right'
            },
            animate: {
                enter: 'animated fadeInDown',
                exit: 'animated fadeOutUp'
            }
        });
    });

    $('.primary-alert-right-bottom').on('click', function() {
        $.notify({
            // options
            message: 'Congratulations! You\'ve succcessfully completed the task.' 
        },{
            // settings
            type: 'primary', 
            offset: {
                y: 20, 
                x: 320
            },
            spacing: 5,
            z_index: 1031,
            delay: 5000,
            timer: 1000,
            placement: {
                from: 'bottom', 
                align: 'right'
            },
            animate: {
                enter: 'animated fadeInDown',
                exit: 'animated fadeOutUp'
            }
        });
    });

    $('.primary-alert-left-bottom').on('click', function() {
        $.notify({
            // options
            message: 'Congratulations! You\'ve succcessfully completed the task.' 
        },{
            // settings
            type: 'primary', 
            offset: {
                y: 20, 
                x: 20
            },
            spacing: 5,
            z_index: 1031,
            delay: 5000,
            timer: 1000,
            placement: {
                from: 'bottom', 
                align: 'left'
            },
            animate: {
                enter: 'animated fadeInDown',
                exit: 'animated fadeOutUp'
            }
        });
    });

    $('.primary-alert-center-top').on('click', function() {
        $.notify({
            // options
            message: 'Congratulations! You\'ve succcessfully completed the task.' 
        },{
            // settings
            type: 'primary', 
            offset: {
                y: 20, 
                x: 0
            },
            spacing: 5,
            z_index: 1031,
            delay: 5000,
            timer: 1000,
            placement: {
                from: 'top', 
                align: 'center'
            },
            animate: {
                enter: 'animated fadeInDown',
                exit: 'animated fadeOutUp'
            }
        });
    });

    $('.primary-alert-center-bottom').on('click', function() {
        $.notify({
            // options
            message: 'Congratulations! You\'ve succcessfully completed the task.' 
        },{
            // settings
            type: 'primary', 
            offset: {
                y: 20, 
                x: 0
            },
            spacing: 5,
            z_index: 1031,
            delay: 5000,
            timer: 1000,
            placement: {
                from: 'bottom', 
                align: 'center'
            },
            animate: {
                enter: 'animated fadeInDown',
                exit: 'animated fadeOutUp'
            }
        });
    });



    //success alerts
    $('.success-alert-left-top').on('click', function() {
        $.notify({
            // options
            message: 'Congratulations! You\'ve succcessfully completed the task.' 
        },{
            // settings
            type: 'success', 
            offset: 20,
            spacing: 5,
            z_index: 1031,
            delay: 5000,
            timer: 1000,
            placement: {
                from: 'top', 
                align: 'left'
            },
            animate: {
                enter: 'animated fadeInDown',
                exit: 'animated fadeOutUp'
            }
        });
    });

    $('.success-alert-right-top').on('click', function() {
        $.notify({
            // options
            message: 'Congratulations! You\'ve succcessfully completed the task.' 
        },{
            // settings
            type: 'success', 
            offset: {
                y: 20, 
                x: 320
            },
            spacing: 5,
            z_index: 1031,
            delay: 5000,
            timer: 1000,
            placement: {
                from: 'top', 
                align: 'right'
            },
            animate: {
                enter: 'animated fadeInDown',
                exit: 'animated fadeOutUp'
            }
        });
    });

    $('.success-alert-right-bottom').on('click', function() {
        $.notify({
            // options
            message: 'Congratulations! You\'ve succcessfully completed the task.' 
        },{
            // settings
            type: 'success', 
            offset: {
                y: 20, 
                x: 320
            },
            spacing: 5,
            z_index: 1031,
            delay: 5000,
            timer: 1000,
            placement: {
                from: 'bottom', 
                align: 'right'
            },
            animate: {
                enter: 'animated fadeInDown',
                exit: 'animated fadeOutUp'
            }
        });
    });

    $('.success-alert-left-bottom').on('click', function() {
        $.notify({
            // options
            message: 'Congratulations! You\'ve succcessfully completed the task.' 
        },{
            // settings
            type: 'success', 
            offset: {
                y: 20, 
                x: 20
            },
            spacing: 5,
            z_index: 1031,
            delay: 5000,
            timer: 1000,
            placement: {
                from: 'bottom', 
                align: 'left'
            },
            animate: {
                enter: 'animated fadeInDown',
                exit: 'animated fadeOutUp'
            }
        });
    });

    $('.success-alert-center-top').on('click', function() {
        $.notify({
            // options
            message: 'Congratulations! You\'ve succcessfully completed the task.' 
        },{
            // settings
            type: 'success', 
            offset: {
                y: 20, 
                x: 0
            },
            spacing: 5,
            z_index: 1031,
            delay: 5000,
            timer: 1000,
            placement: {
                from: 'top', 
                align: 'center'
            },
            animate: {
                enter: 'animated fadeInDown',
                exit: 'animated fadeOutUp'
            }
        });
    });

    $('.success-alert-center-bottom').on('click', function() {
        $.notify({
            // options
            message: 'Congratulations! You\'ve succcessfully completed the task.' 
        },{
            // settings
            type: 'success', 
            offset: {
                y: 20, 
                x: 0
            },
            spacing: 5,
            z_index: 1031,
            delay: 5000,
            timer: 1000,
            placement: {
                from: 'bottom', 
                align: 'center'
            },
            animate: {
                enter: 'animated fadeInDown',
                exit: 'animated fadeOutUp'
            }
        });
    });



    //warning alets
    $('.warning-alert-left-top').on('click', function() {
        $.notify({
            // options
            message: 'Congratulations! You\'ve succcessfully completed the task.' 
        },{
            // settings
            type: 'warning', 
            offset: 20,
            spacing: 5,
            z_index: 1031,
            delay: 5000,
            timer: 1000,
            placement: {
                from: 'top', 
                align: 'left'
            },
            animate: {
                enter: 'animated fadeInDown',
                exit: 'animated fadeOutUp'
            }
        });
    });

    $('.warning-alert-right-top').on('click', function() {
        $.notify({
            // options
            message: 'Congratulations! You\'ve succcessfully completed the task.' 
        },{
            // settings
            type: 'warning', 
            offset: {
                y: 20, 
                x: 320
            },
            spacing: 5,
            z_index: 1031,
            delay: 5000,
            timer: 1000,
            placement: {
                from: 'top', 
                align: 'right'
            },
            animate: {
                enter: 'animated fadeInDown',
                exit: 'animated fadeOutUp'
            }
        });
    });

    $('.warning-alert-right-bottom').on('click', function() {
        $.notify({
            // options
            message: 'Congratulations! You\'ve succcessfully completed the task.' 
        },{
            // settings
            type: 'warning', 
            offset: {
                y: 20, 
                x: 320
            },
            spacing: 5,
            z_index: 1031,
            delay: 5000,
            timer: 1000,
            placement: {
                from: 'bottom', 
                align: 'right'
            },
            animate: {
                enter: 'animated fadeInDown',
                exit: 'animated fadeOutUp'
            }
        });
    });

    $('.warning-alert-left-bottom').on('click', function() {
        $.notify({
            // options
            message: 'Congratulations! You\'ve succcessfully completed the task.' 
        },{
            // settings
            type: 'warning', 
            offset: {
                y: 20, 
                x: 20
            },
            spacing: 5,
            z_index: 1031,
            delay: 5000,
            timer: 1000,
            placement: {
                from: 'bottom', 
                align: 'left'
            },
            animate: {
                enter: 'animated fadeInDown',
                exit: 'animated fadeOutUp'
            }
        });
    });

    $('.warning-alert-center-top').on('click', function() {
        $.notify({
            // options
            message: 'Congratulations! You\'ve succcessfully completed the task.' 
        },{
            // settings
            type: 'warning', 
            offset: {
                y: 20, 
                x: 0
            },
            spacing: 5,
            z_index: 1031,
            delay: 5000,
            timer: 1000,
            placement: {
                from: 'top', 
                align: 'center'
            },
            animate: {
                enter: 'animated fadeInDown',
                exit: 'animated fadeOutUp'
            }
        });
    });

    $('.warning-alert-center-bottom').on('click', function() {
        $.notify({
            // options
            message: 'Congratulations! You\'ve succcessfully completed the task.' 
        },{
            // settings
            type: 'warning', 
            offset: {
                y: 20, 
                x: 0
            },
            spacing: 5,
            z_index: 1031,
            delay: 5000,
            timer: 1000,
            placement: {
                from: 'bottom', 
                align: 'center'
            },
            animate: {
                enter: 'animated fadeInDown',
                exit: 'animated fadeOutUp'
            }
        });
    });





    //danger alets
    $('.danger-alert-left-top').on('click', function() {
        $.notify({
            // options
            message: 'Congratulations! You\'ve succcessfully completed the task.' 
        },{
            // settings
            type: 'danger', 
            offset: 20,
            spacing: 5,
            z_index: 1031,
            delay: 5000,
            timer: 1000,
            placement: {
                from: 'top', 
                align: 'left'
            },
            animate: {
                enter: 'animated fadeInDown',
                exit: 'animated fadeOutUp'
            }
        });
    });

    $('.danger-alert-right-top').on('click', function() {
        $.notify({
            // options
            message: 'Congratulations! You\'ve succcessfully completed the task.' 
        },{
            // settings
            type: 'danger', 
            offset: {
                y: 20, 
                x: 320
            },
            spacing: 5,
            z_index: 1031,
            delay: 5000,
            timer: 1000,
            placement: {
                from: 'top', 
                align: 'right'
            },
            animate: {
                enter: 'animated fadeInDown',
                exit: 'animated fadeOutUp'
            }
        });
    });

    $('.danger-alert-right-bottom').on('click', function() {
        $.notify({
            // options
            message: 'Congratulations! You\'ve succcessfully completed the task.' 
        },{
            // settings
            type: 'danger', 
            offset: {
                y: 20, 
                x: 320
            },
            spacing: 5,
            z_index: 1031,
            delay: 5000,
            timer: 1000,
            placement: {
                from: 'bottom', 
                align: 'right'
            },
            animate: {
                enter: 'animated fadeInDown',
                exit: 'animated fadeOutUp'
            }
        });
    });

    $('.danger-alert-left-bottom').on('click', function() {
        $.notify({
            // options
            message: 'Congratulations! You\'ve succcessfully completed the task.' 
        },{
            // settings
            type: 'danger', 
            offset: {
                y: 20, 
                x: 20
            },
            spacing: 5,
            z_index: 1031,
            delay: 5000,
            timer: 1000,
            placement: {
                from: 'bottom', 
                align: 'left'
            },
            animate: {
                enter: 'animated fadeInDown',
                exit: 'animated fadeOutUp'
            }
        });
    });

    $('.danger-alert-center-top').on('click', function() {
        $.notify({
            // options
            message: 'Congratulations! You\'ve succcessfully completed the task.' 
        },{
            // settings
            type: 'danger', 
            offset: {
                y: 20, 
                x: 0
            },
            spacing: 5,
            z_index: 1031,
            delay: 5000,
            timer: 1000,
            placement: {
                from: 'top', 
                align: 'center'
            },
            animate: {
                enter: 'animated fadeInDown',
                exit: 'animated fadeOutUp'
            }
        });
    });

    $('.danger-alert-center-bottom').on('click', function() {
        $.notify({
            // options
            message: 'Congratulations! You\'ve succcessfully completed the task.' 
        },{
            // settings
            type: 'danger', 
            offset: {
                y: 20, 
                x: 0
            },
            spacing: 5,
            z_index: 1031,
            delay: 5000,
            timer: 1000,
            placement: {
                from: 'bottom', 
                align: 'center'
            },
            animate: {
                enter: 'animated fadeInDown',
                exit: 'animated fadeOutUp'
            }
        });
    });







})(jQuery);
(function($){
    "use strict"
    // Standard select boxes
    











})(jQuery);
// !function(t){"use strict";t(document).ready(function(){t(function(){t("#tags_1").tagsInput({width:"auto"}),t("#tags_2").tagsInput({width:"auto",onChange:function(n,a){var i=["php","ruby","javascript"];t(".tag",a).each(function(){t(this).text().search(new RegExp("\\b("+i.join("|")+")\\b"))>=0&&t(this).addClass("tag--yellow")})}})})})}(window.jQuery);
$("#tags_1").tagsinput()
$("#tags_2").tagsinput('items')
$("#tags_3").tagsinput('items')
!function(t){"use strict";t(document).ready(function(){t("input[name='demo0']").TouchSpin(),t("input[name='demo1']").TouchSpin({min:0,max:100,step:.1,decimals:2,boostat:5,maxboostedstep:10,postfix:"%"}),t("input[name='demo2']").TouchSpin({min:-1e9,max:1e9,stepinterval:50,maxboostedstep:1e7,prefix:"$"}),t("input[name='demo_vertical']").TouchSpin({verticalbuttons:!0}),t("input[name='demo_vertical2']").TouchSpin({verticalbuttons:!0,verticalupclass:"fa fa-plus",verticaldownclass:"fa fa-minus"}),t("input[name='demo4']").TouchSpin({postfix:"a button",postfix_extraclass:"btn btn-default"}),t("input[name='demo4_2']").TouchSpin({postfix:"a button",postfix_extraclass:"btn btn-default"}),t("input[name='demo5']").TouchSpin({prefix:"pre",postfix:"post"})})}(window.jQuery);
(function($) {
    "use strict"

    jQuery('.mydatepicker, #datepicker').datepicker();
        jQuery('#datepicker-autoclose').datepicker({
            autoclose: true,
            todayHighlight: true
        });
        jQuery('#date-range').datepicker({
            toggleActive: true
        });
        jQuery('#datepicker-inline').datepicker({
            todayHighlight: true
        });
})(jQuery);
(function($) {
    "use strict"

    // Daterange picker
    $('.input-daterange-datepicker').daterangepicker({
        buttonClasses: ['btn', 'btn-sm'],
        applyClass: 'btn-danger',
        cancelClass: 'btn-inverse'
    });
    $('.input-daterange-timepicker').daterangepicker({
        timePicker: true,
        format: 'MM/DD/YYYY h:mm A',
        timePickerIncrement: 30,
        timePicker12Hour: true,
        timePickerSeconds: false,
        buttonClasses: ['btn', 'btn-sm'],
        applyClass: 'btn-danger',
        cancelClass: 'btn-inverse'
    });
    $('.input-limit-datepicker').daterangepicker({
        format: 'MM/DD/YYYY',
        minDate: '06/01/2015',
        maxDate: '06/30/2015',
        buttonClasses: ['btn', 'btn-sm'],
        applyClass: 'btn-danger',
        cancelClass: 'btn-inverse',
        dateLimit: {
            days: 6
        }
    });
})(jQuery);
$(document).ready(function () {

    $(function () {
        var chart = c3.generate({
            bindto: '#c3-chart',
            data: {
                columns: [
                    ['data1', 100, 200, 150, 300, 200],
                    ['data2', 400, 500, 250, 700, 300],
                ],
                colors: {
                    data1: '#34C73B',
                    data2: '#00A2FF'
                    //data3: '#0000ff'
                },
                axes: {
                    data2: 'y2' // ADD
                }
            },
            axis: {
                y2: {
                    show: true // ADD
                }
            }
        });

    });

    $(function () {
        var chart = c3.generate({
            bindto: '#c3-combination',
            data: {
                columns: [
                    ['data1', 30, 20, 50, 40, 60, 50],
                    ['data2', 200, 130, 90, 240, 130, 220],
                    ['data3', 300, 200, 160, 400, 250, 250]
                ],
                type: 'bar',
                colors: {
                    data1: '#34C73B',
                    data2: '#00A2FF',
                    data3: '#0000FF'
                },
                types: {
                    data3: 'spline',
                    data4: 'line',
                    data6: 'area'
                },
                groups: [
                    ['data1', 'data2']
                ]
            }
        });
    });

    $(function () {
        var chart = c3.generate({
            bindto: '#c3-area',
            data: {
                columns: [
                    ['data1', 300, 350, 300, 0, 0, 0],
                    ['data2', 130, 100, 140, 200, 150, 50]
                ],
                colors: {
                    data1: '#34C73B',
                    data3: '#00A2FF'
                },
                types: {
                    data1: 'area',
                    data2: 'area-spline'
                }
            }
        });
    });

    $(function () {
        var chart = c3.generate({
            bindto: '#c3-rotated_axis',
            data: {
                columns: [
                    ['data1', 30, 200, 100, 400, 150, 250],
                    ['data2', 50, 20, 10, 40, 15, 25]
                ],
                colors: {
                    data1: '#34C73B',
                    data3: '#0000FF',
                },
                types: {
                    data1: 'bar'
                }
            },
            axis: {
                rotated: true
            }
        });
    });


    $(function () {
        var chart = c3.generate({
            bindto: '#c3-spline',
            data: {
                columns: [
                    ['data1', 30, 200, 100, 400, 150, 250],
                    ['data2', 130, 100, 140, 200, 150, 50]
                ],
                colors: {
                    data1: '#00A2FF',
                    data2: '#0000FF'
                },
                type: 'spline'
            }
        });
    });


    $(function () {
        var chart = c3.generate({
            bindto: '#c3-simple-xy-line',
            data: {
                x: 'x',
                columns: [
                    ['x', 30, 50, 100, 230, 300, 310],
                    ['data1', 30, 200, 100, 400, 150, 250],
                    ['data2', 130, 300, 200, 300, 250, 450]
                ],
                colors: {
                    data1: '#00A2FF',
                    data2: '#0000FF',
                    data3: '#F44336'
                }
            }
            
        });
        setTimeout(function () {
            chart.load({
                columns: [
                    ['data1', 100, 250, 150, 200, 100, 350]
                ]
            });
        }, 1000);

        setTimeout(function () {
            chart.load({
                columns: [
                    ['data3', 80, 150, 100, 180, 80, 150]
                ]
            });
        }, 1500);

        setTimeout(function () {
            chart.unload({
                ids: 'data2'
            });
        }, 2000);
    });

    $(function () {
        var chart = c3.generate({
            bindto: '#c3-line-with-region',
            data: {
                columns: [
                    ['data1', 30, 200, 100, 400, 150, 250],
                    ['data2', 50, 20, 10, 40, 15, 25]
                ],
                colors: {
                    data1: '#00A2FF',
                    data2: '#0000FF'
                },
                regions: {
                    'data1': [{ 'start': 1, 'end': 2, 'style': 'dashed' }, { 'start': 3 }], // currently 'dashed' style only
                    'data2': [{ 'end': 3 }]
                }
            }
        });
    });

    $(function () {
        var chart = c3.generate({
            bindto: '#c3-step-chart',
            data: {
                columns: [
                    ['data1', 300, 350, 300, 0, 0, 100],
                    ['data2', 130, 100, 140, 200, 150, 50]
                ],
                colors: {
                    data1: '#0000FF',
                    data2: '#00A2FF'
                },
                types: {
                    data1: 'step',
                    data2: 'area-step'
                }
            }
        });
    });

    $(function () {
        var chart = c3.generate({
            bindto: '#c3-stacked-area-chart',
            data: {
                columns: [
                    ['data1', 300, 350, 300, 0, 0, 120],
                    ['data2', 130, 100, 140, 200, 150, 50]
                ],
                types: {
                    data1: 'area-spline',
                    data2: 'area-spline'
                    // 'line', 'spline', 'step', 'area', 'area-step' are also available to stack
                },
                colors: {
                    data1: '#00A2FF',
                    data2: '#0000FF'
                },
                groups: [['data1', 'data2']]
            }
        });
    });

    $(function () {
        var chart = c3.generate({
            bindto: '#c3-bar-chart',
            data: {
                columns: [
                    ['data1', 30, 200, 100, 400, 150, 250],
                    ['data2', 130, 100, 140, 200, 150, 50]
                ],
                colors: {
                    data1: '#34C73B',
                    data2: '#00A2FF',
                    data3: '#0000FF'
                },
                type: 'bar'
            },
            bar: {
                width: {
                    ratio: 0.5 // this makes bar width 50% of length between ticks
                }
                // or
                //width: 100 // this makes bar width 100px
            }
        });
        setTimeout(function () {
            chart.load({
                columns: [
                    ['data3', 130, -150, 200, 300, -200, 100]
                ]
            });
        }, 1000);
    });


    $(function () {
        var chart = c3.generate({
            bindto: '#c3-stacked-bar-chart',
            data: {
                columns: [
                    ['data1', -30, 200, 200, 400, -150, 250],
                    ['data2', 130, 100, -100, 200, -150, 50],
                    ['data3', -230, 200, 200, -300, 250, 250]
                ],
                colors: {
                    data1: '#34C73B',
                    data2: '#00A2FF',
                    data3: '#0000FF',
                    data4: '#F44336'
                },
                type: 'bar',
                groups: [
                    ['data1', 'data2']
                ]
            },
            grid: {
                y: {
                    lines: [{ value: 0 }]
                }
            }
        });
        setTimeout(function () {
            chart.groups([['data1', 'data2', 'data3']])
        }, 1000);

        setTimeout(function () {
            chart.load({
                columns: [['data4', 100, -50, 150, 200, -300, -100]]
            });
        }, 1500);

        setTimeout(function () {
            chart.groups([['data1', 'data2', 'data3', 'data4']])
        }, 2000);
    });




    $(function () {
        var chart = c3.generate({
            bindto: '#c3-scatter-plot',
            data: {
                xs: {
                    setosa: 'setosa_x',
                    versicolor: 'versicolor_x'
                },
                // iris data from R
                columns: [
                    ["setosa_x", 3.5, 3.0, 3.2, 3.1, 3.6, 3.9, 3.4, 3.4, 2.9, 3.1, 3.7, 3.4, 3.0, 3.0, 4.0, 4.4, 3.9, 3.5, 3.8, 3.8, 3.4, 3.7, 3.6, 3.3, 3.4, 3.0, 3.4, 3.5, 3.4, 3.2, 3.1, 3.4, 4.1, 4.2, 3.1, 3.2, 3.5, 3.6, 3.0, 3.4, 3.5, 2.3, 3.2, 3.5, 3.8, 3.0, 3.8, 3.2, 3.7, 3.3],
                    ["versicolor_x", 3.2, 3.2, 3.1, 2.3, 2.8, 2.8, 3.3, 2.4, 2.9, 2.7, 2.0, 3.0, 2.2, 2.9, 2.9, 3.1, 3.0, 2.7, 2.2, 2.5, 3.2, 2.8, 2.5, 2.8, 2.9, 3.0, 2.8, 3.0, 2.9, 2.6, 2.4, 2.4, 2.7, 2.7, 3.0, 3.4, 3.1, 2.3, 3.0, 2.5, 2.6, 3.0, 2.6, 2.3, 2.7, 3.0, 2.9, 2.9, 2.5, 2.8],
                    ["setosa", 0.2, 0.2, 0.2, 0.2, 0.2, 0.4, 0.3, 0.2, 0.2, 0.1, 0.2, 0.2, 0.1, 0.1, 0.2, 0.4, 0.4, 0.3, 0.3, 0.3, 0.2, 0.4, 0.2, 0.5, 0.2, 0.2, 0.4, 0.2, 0.2, 0.2, 0.2, 0.4, 0.1, 0.2, 0.2, 0.2, 0.2, 0.1, 0.2, 0.2, 0.3, 0.3, 0.2, 0.6, 0.4, 0.3, 0.2, 0.2, 0.2, 0.2],
                    ["versicolor", 1.4, 1.5, 1.5, 1.3, 1.5, 1.3, 1.6, 1.0, 1.3, 1.4, 1.0, 1.5, 1.0, 1.4, 1.3, 1.4, 1.5, 1.0, 1.5, 1.1, 1.8, 1.3, 1.5, 1.2, 1.3, 1.4, 1.4, 1.7, 1.5, 1.0, 1.1, 1.0, 1.2, 1.6, 1.5, 1.6, 1.5, 1.3, 1.3, 1.3, 1.2, 1.4, 1.2, 1.0, 1.3, 1.2, 1.3, 1.3, 1.1, 1.3],
                ],
                colors: {
                    setosa: '#F44336',
                    versicolor: '#34C73B',
                    versicolor_x: '#00A2FF',
                    setosa_x: '#0000FF'
                },
                type: 'scatter'
            },
            axis: {
                x: {
                    label: 'Sepal.Width',
                    tick: {
                        fit: false
                    }
                },
                y: {
                    label: 'Petal.Width'
                }
            }
        });
        setTimeout(function () {
            chart.load({
                xs: {
                    virginica: 'virginica_x'
                },
                columns: [
                    ["virginica_x", 3.3, 2.7, 3.0, 2.9, 3.0, 3.0, 2.5, 2.9, 2.5, 3.6, 3.2, 2.7, 3.0, 2.5, 2.8, 3.2, 3.0, 3.8, 2.6, 2.2, 3.2, 2.8, 2.8, 2.7, 3.3, 3.2, 2.8, 3.0, 2.8, 3.0, 2.8, 3.8, 2.8, 2.8, 2.6, 3.0, 3.4, 3.1, 3.0, 3.1, 3.1, 3.1, 2.7, 3.2, 3.3, 3.0, 2.5, 3.0, 3.4, 3.0],
                    ["virginica", 2.5, 1.9, 2.1, 1.8, 2.2, 2.1, 1.7, 1.8, 1.8, 2.5, 2.0, 1.9, 2.1, 2.0, 2.4, 2.3, 1.8, 2.2, 2.3, 1.5, 2.3, 2.0, 2.0, 1.8, 2.1, 1.8, 1.8, 1.8, 2.1, 1.6, 1.9, 2.0, 2.2, 1.5, 1.4, 2.3, 2.4, 1.8, 1.8, 2.1, 2.4, 2.3, 1.9, 2.3, 2.5, 2.3, 1.9, 2.0, 2.3, 1.8],
                ]
            });
        }, 1000);

        setTimeout(function () {
            chart.unload({
                ids: 'setosa'
            });
        }, 2000);

        setTimeout(function () {
            chart.load({
                columns: [
                    ["virginica", 0.2, 0.2, 0.2, 0.2, 0.2, 0.4, 0.3, 0.2, 0.2, 0.1, 0.2, 0.2, 0.1, 0.1, 0.2, 0.4, 0.4, 0.3, 0.3, 0.3, 0.2, 0.4, 0.2, 0.5, 0.2, 0.2, 0.4, 0.2, 0.2, 0.2, 0.2, 0.4, 0.1, 0.2, 0.2, 0.2, 0.2, 0.1, 0.2, 0.2, 0.3, 0.3, 0.2, 0.6, 0.4, 0.3, 0.2, 0.2, 0.2, 0.2],
                ]
            });
        }, 3000);

    });



    $(function () {
        var chart = c3.generate({
            bindto: '#c3-pie-chart',
            data: {
                // iris data from R
                columns: [
                    ['data1', 30],
                    ['data2', 120],
                ],
                type: 'pie',
                onclick: function (d, i) { console.log("onclick", d, i); },
                onmouseover: function (d, i) { console.log("onmouseover", d, i); },
                onmouseout: function (d, i) { console.log("onmouseout", d, i); }
            }
        });
        setTimeout(function () {
            chart.load({
                columns: [
                    ["setosa", 0.2, 0.2, 0.2, 0.2, 0.2, 0.4, 0.3, 0.2, 0.2, 0.1, 0.2, 0.2, 0.1, 0.1, 0.2, 0.4, 0.4, 0.3, 0.3, 0.3, 0.2, 0.4, 0.2, 0.5, 0.2, 0.2, 0.4, 0.2, 0.2, 0.2, 0.2, 0.4, 0.1, 0.2, 0.2, 0.2, 0.2, 0.1, 0.2, 0.2, 0.3, 0.3, 0.2, 0.6, 0.4, 0.3, 0.2, 0.2, 0.2, 0.2],
                    ["versicolor", 1.4, 1.5, 1.5, 1.3, 1.5, 1.3, 1.6, 1.0, 1.3, 1.4, 1.0, 1.5, 1.0, 1.4, 1.3, 1.4, 1.5, 1.0, 1.5, 1.1, 1.8, 1.3, 1.5, 1.2, 1.3, 1.4, 1.4, 1.7, 1.5, 1.0, 1.1, 1.0, 1.2, 1.6, 1.5, 1.6, 1.5, 1.3, 1.3, 1.3, 1.2, 1.4, 1.2, 1.0, 1.3, 1.2, 1.3, 1.3, 1.1, 1.3],
                    ["virginica", 2.5, 1.9, 2.1, 1.8, 2.2, 2.1, 1.7, 1.8, 1.8, 2.5, 2.0, 1.9, 2.1, 2.0, 2.4, 2.3, 1.8, 2.2, 2.3, 1.5, 2.3, 2.0, 2.0, 1.8, 2.1, 1.8, 1.8, 1.8, 2.1, 1.6, 1.9, 2.0, 2.2, 1.5, 1.4, 2.3, 2.4, 1.8, 1.8, 2.1, 2.4, 2.3, 1.9, 2.3, 2.5, 2.3, 1.9, 2.0, 2.3, 1.8],
                ],
                colors: {
                    setosa: '#F44336',
                    versicolor: '#34C73B',
                    virginica: '#00A2FF'
                }
            });
        }, 1500);

        setTimeout(function () {
            chart.unload({
                ids: 'data1'
            });
            chart.unload({
                ids: 'data2'
            });
        }, 2500);
    });


    $(function () {
        var chart = c3.generate({
            bindto: '#c3-donut-chart',
            data: {
                columns: [
                    ['data1', 30],
                    ['data2', 120],
                ],
                type: 'donut',
                onclick: function (d, i) { console.log("onclick", d, i); },
                onmouseover: function (d, i) { console.log("onmouseover", d, i); },
                onmouseout: function (d, i) { console.log("onmouseout", d, i); }
            },
            donut: {
                title: "Donut title"
            }
        });
        setTimeout(function () {
            chart.load({
                columns: [
                    ["setosa", 0.2, 0.2, 0.2, 0.2, 0.2, 0.4, 0.3, 0.2, 0.2, 0.1, 0.2, 0.2, 0.1, 0.1, 0.2, 0.4, 0.4, 0.3, 0.3, 0.3, 0.2, 0.4, 0.2, 0.5, 0.2, 0.2, 0.4, 0.2, 0.2, 0.2, 0.2, 0.4, 0.1, 0.2, 0.2, 0.2, 0.2, 0.1, 0.2, 0.2, 0.3, 0.3, 0.2, 0.6, 0.4, 0.3, 0.2, 0.2, 0.2, 0.2],
                    ["versicolor", 1.4, 1.5, 1.5, 1.3, 1.5, 1.3, 1.6, 1.0, 1.3, 1.4, 1.0, 1.5, 1.0, 1.4, 1.3, 1.4, 1.5, 1.0, 1.5, 1.1, 1.8, 1.3, 1.5, 1.2, 1.3, 1.4, 1.4, 1.7, 1.5, 1.0, 1.1, 1.0, 1.2, 1.6, 1.5, 1.6, 1.5, 1.3, 1.3, 1.3, 1.2, 1.4, 1.2, 1.0, 1.3, 1.2, 1.3, 1.3, 1.1, 1.3],
                    ["virginica", 2.5, 1.9, 2.1, 1.8, 2.2, 2.1, 1.7, 1.8, 1.8, 2.5, 2.0, 1.9, 2.1, 2.0, 2.4, 2.3, 1.8, 2.2, 2.3, 1.5, 2.3, 2.0, 2.0, 1.8, 2.1, 1.8, 1.8, 1.8, 2.1, 1.6, 1.9, 2.0, 2.2, 1.5, 1.4, 2.3, 2.4, 1.8, 1.8, 2.1, 2.4, 2.3, 1.9, 2.3, 2.5, 2.3, 1.9, 2.0, 2.3, 1.8],
                ],
                colors: {
                    setosa: '#F44336',
                    versicolor: '#34C73B',
                    virginica: '#00A2FF'
                }
            });
        }, 1500);

        setTimeout(function () {
            chart.unload({
                ids: 'data1'
            });
            chart.unload({
                ids: 'data2'
            });
        }, 2500);
    });

    $(function () {
        var chart = c3.generate({
            bindto: '#c3-gauge-chart',
            data: {
                columns: [
                    ['data', 91.4]
                ],
                type: 'gauge',
                onclick: function (d, i) { console.log("onclick", d, i); },
                onmouseover: function (d, i) { console.log("onmouseover", d, i); },
                onmouseout: function (d, i) { console.log("onmouseout", d, i); }
            },
            gauge: {
                label: {
                    format: function (value, ratio) {
                        return value;
                    },
                    show: false // to turn off the min/max labels.
                },
                min: 0, // 0 is default, //can handle negative min e.g. vacuum / voltage / current flow / rate of change
                max: 100, // 100 is default
                units: ' %',
                width: 39 // for adjusting arc thickness
            },
            color: {
                pattern: ['#F44336', '#00A2FF', '#0000FF', '#34C73B'], // the three color levels for the percentage values.
                threshold: {
                    unit: 'value', // percentage is default
                    max: 200, // 100 is default
                    values: [30, 60, 90, 100]
                }
            },
            size: {
                height: 180
            }
        });
        setTimeout(function () {
            chart.load({
                columns: [['data', 10]]
            });
        }, 1000);

        setTimeout(function () {
            chart.load({
                columns: [['data', 50]]
            });
        }, 2000);

        setTimeout(function () {
            chart.load({
                columns: [['data', 70]]
            });
        }, 3000);

        setTimeout(function () {
            chart.load({
                columns: [['data', 0]]
            });
        }, 4000);

        setTimeout(function () {
            chart.load({
                columns: [['data', 100]]
            });
        }, 5000);
    });


    $(function () {
        var chart = c3.generate({
            bindto: '#c3-category-axis',
            data: {
                columns: [
                    ['data1', 30, 200, 100, 400, 150, 250, 50, 100, 250]
                ],
                colors: {
                    data1: '#34C73B'
                }
            },
            axis: {
                x: {
                    type: 'category',
                    categories: ['cat1', 'cat2', 'cat3', 'cat4', 'cat5', 'cat6', 'cat7', 'cat8', 'cat9']
                }
            }
        });
    });



    $(function () {
        var chart = c3.generate({
            bindto: '#c3-additional-y-axis',
            data: {
                columns: [
                    ['data1', 30, 200, 100, 400, 150, 250],
                    ['data2', 50, 20, 10, 40, 15, 25]
                ],
                colors: {
                    data1: '#34C73B',
                    data2: '#00A2FF'
                },
                axes: {
                    data1: 'y',
                    data2: 'y2'
                }
            },
            axis: {
                y2: {
                    show: true
                }
            }
        });
    });



    $(function () {
        var chart = c3.generate({
            bindto: '#c3-tick-format',
            data: {
                x: 'x',
                columns: [
                    ['x', '2010-01-01', '2011-01-01', '2012-01-01', '2013-01-01', '2014-01-01', '2015-01-01'],
                    ['sample', 30, 200, 100, 400, 150, 250]
                ],
                colors: {
                    sample: '#34C73B'
                }
            },
            axis: {
                x: {
                    type: 'timeseries',
                    tick: {
                        format: function (x) { return x.getFullYear(); }
                        //format: '%Y' // format string is also available for timeseries data
                    }
                }
            }
        });
    });


    $(function () {
        var chart = c3.generate({
            bindto: '#c3-tick-count',
            data: {
                x: 'x',
                columns: [
                    ['x', '2013-01-01', '2013-01-02', '2013-01-03', '2013-01-04', '2013-01-05', '2013-01-06', '2013-01-07', '2013-01-08', '2013-01-09', '2013-01-10', '2013-01-11', '2013-01-12'],
                    ['sample', 30, 200, 100, 400, 150, 250, 30, 200, 100, 400, 150, 250]
                ],
                colors: {
                    sample: '#34C73B'
                }
            },
            axis: {
                x: {
                    type: 'timeseries',
                    tick: {
                        count: 4,
                        format: '%Y-%m-%d'
                    }
                }
            }
        });
    });



    $(function () {
        var chart = c3.generate({
            bindto: '#c3-tick-values',
            data: {
                x: 'x',
                columns: [
                    ['x', '2013-01-01', '2013-01-02', '2013-01-03', '2013-01-04', '2013-01-05', '2013-01-06', '2013-01-07', '2013-01-08', '2013-01-09', '2013-01-10', '2013-01-11', '2013-01-12'],
                    ['sample', 30, 200, 100, 400, 150, 250, 30, 200, 100, 400, 150, 250]
                ],
                colors: {
                    sample: '#00A2FF'
                }
            },
            axis: {
                x: {
                    type: 'timeseries',
                    tick: {
                        // this also works for non timeseries data
                        values: ['2013-01-05', '2013-01-10']
                    }
                }
            }
        });
    });



    $(function () {
        var chart = c3.generate({
            bindto: '#c3-tick-culling',
            data: {
                columns: [
                    ['sample', 30, 200, 100, 400, 150, 250, 30, 200, 100, 400, 150, 250, 30, 200, 100, 400, 150, 250, 200, 100, 400, 150, 250]
                ],
                colors: {
                    sample: '#34C73B'
                }
            },
            axis: {
                x: {
                    type: 'category',
                    tick: {
                        culling: {
                            max: 4 // the number of tick texts will be adjusted to less than this value
                        }
                        // for normal axis, default on
                        // for category axis, default off
                    }
                }
            }
        });
    });



    $(function () {
        var chart = c3.generate({
            bindto: '#c3-tick-fitting',
            data: {
                x: 'x',
                columns: [
                    ['x', '2013-10-31', '2013-12-31', '2014-01-31', '2014-02-28'],
                    ['sample', 30, 100, 400, 150],
                ],
                colors: {
                    sample: '#00A2FF'
                }
            },
            axis: {
                x: {
                    type: 'timeseries',
                    tick: {
                        fit: true,
                        format: "%e %b %y"
                    }
                }
            }
        });
    });



    $(function () {
        var chart = c3.generate({
            bindto: '#c3-tick-timezone',
            data: {
                x: 'x',
                xFormat: '%Y',
                columns: [
                    //            ['x', '2012-12-31', '2013-01-01', '2013-01-02', '2013-01-03', '2013-01-04', '2013-01-05'],
                    ['x', '2010', '2011', '2012', '2013', '2014', '2015'],
                    ['data1', 30, 200, 100, 400, 150, 250],
                    ['data2', 130, 340, 200, 500, 250, 350]
                ],
                colors: {
                    data1: '#00A2FF',
                    data2: '#34C73B'
                }
            },
            axis: {
                x: {
                    type: 'timeseries',
                    // if true, treat x value as localtime (Default)
                    // if false, convert to UTC internally
                    localtime: false,
                    tick: {
                        format: '%Y-%m-%d %H:%M:%S'
                    }
                }
            }
        });
    });



    $(function () {
        var chart = c3.generate({
            bindto: '#c3-tick-text',
            data: {
                x: 'x',
                columns: [
                    ['x', 'www.somesitename1.com', 'www.somesitename2.com', 'www.somesitename3.com', 'www.somesitename4.com', 'www.somesitename5.com', 'www.somesitename6.com', 'www.somesitename7.com', 'www.somesitename8.com', 'www.somesitename9.com', 'www.somesitename10.com', 'www.somesitename11.com', 'www.somesitename12.com'],
                    ['pv', 90, 100, 140, 200, 100, 400, 90, 100, 140, 200, 100, 400],
                ],
                colors: {
                    pv: '#00A2FF'
                },
                type: 'bar'
            },
            axis: {
                x: {
                    type: 'category',
                    tick: {
                        rotate: 75,
                        multiline: false
                    },
                    height: 130
                }
            }
        });
    });


    $(function () {
        var chart = c3.generate({
            bindto: '#c3-y-axis-tick-timezone',
            data: {
                columns: [
                    ['sample', 30, 200, 100, 400, 150, 2500]
                ],
                colors: {
                    sample: '#00A2FF'
                },
            },
            axis: {
                y: {
                    tick: {
                        format: d3.format("$,")
                        //                format: function (d) { return "$" + d; }
                    }
                }
            }
        });
    });


    $(function () {
        var chart = c3.generate({
            bindto: '#c3-padding-y-axis',
            data: {
                columns: [
                    ['data1', 30, 200, 100, 400, 150, 250],
                    ['data2', 50, 20, 10, 40, 15, 25]
                ],
                axes: {
                    data1: 'y',
                    data2: 'y2'
                },
                colors: {
                    'data1': '#34C73B',
                    'data2': '#00A2FF'
                },
            },
            axis: {
                y: {
                    padding: {top: 200, bottom: 0}
                },
                y2: {
                    padding: {top: 100, bottom: 100},
                    show: true
                }
            }
        });
    });


    $(function () {
        var chart = c3.generate({
            bindto: '#c3-range-y-axis',
            data: {
                columns: [
                    ['sample', 30, 200, 400, -400, 150, 250]
                ],
                colors: {
                    'sample': '#00A2FF'
                }
            },
            axis: {
                y: {
                    max: 400,
                    min: -400,
                    // Range includes padding, set 0 if no padding needed
                    // padding: {top:0, bottom:0}
                }
            }
        });
    });

    $(function () {
        var chart = c3.generate({
            bindto: '#c3-axis-label',
            data: {
                columns: [
                    ['sample', 30, 200, 100, 400, 150, 250],
                    ['sample2', 130, 300, 200, 500, 250, 350]
                ],
                axes: {
                    sample2: 'y2'
                },
                colors: {
                    'sample': '#34C73B',
                    'sample2': '#00A2FF'
                }
            },
            axis: {
                x: {
                    label: 'X Label'
                },
                y: {
                    label: 'Y Label'
                },
                y2: {
                    show: true,
                    label: 'Y2 Label'
                }
            }
        });
    });


    $(function () {
        var chart = c3.generate({
            bindto: '#c3-axis-label-position',
            data: {
                columns: [
                    ['sample1', 30, 200, 100, 400, 150, 250],
                    ['sample2', 430, 300, 500, 400, 650, 250]
                ],
                colors: {
                    'sample1': '#34C73B',
                    'sample2': '#00A2FF'
                },
                axes: {
                    sample1: 'y',
                    sample2: 'y2'
                }
            },
            axis: {
                x: {
                    label: {
                        text: 'X Label',
                        position: 'outer-center'
                        // inner-right : default
                        // inner-center
                        // inner-left
                        // outer-right
                        // outer-center
                        // outer-left
                    }
                },
                y: {
                    label: {
                        text: 'Y Label',
                        position: 'outer-middle'
                        // inner-top : default
                        // inner-middle
                        // inner-bottom
                        // outer-top
                        // outer-middle
                        // outer-bottom
                    }
                },
                y2: {
                    show: true,
                    label: {
                        text: 'Y2 Label',
                        position: 'outer-middle'
                        // inner-top : default
                        // inner-middle
                        // inner-bottom
                        // outer-top
                        // outer-middle
                        // outer-bottom
                    }
                }
            }
        });
    });



});

(function($) {
    "use strict"

    google.load("visualization", "1", {packages:["corechart"]});
    google.setOnLoadCallback(drawChart1);
    function drawChart1() {
        var data = google.visualization.arrayToDataTable([
            ['Year', 'Sales', 'Expenses'],
            ['2004',  1000,      400],
            ['2005',  1170,      460],
            ['2006',  660,       1120],
            ['2007',  1030,      540]
        ]);

        var options = {
                fontName: 'Hind Madurai',
                backgroundColor: 'transparent',
                height: 400,
                fontSize: 14,
                chartArea: {
                    left: '5%',
                    width: '90%',
                    height: 350
                },
                tooltip: {
                    textStyle: {
                        fontName: 'Hind Madurai',
                        fontSize: 14
                    }
                },
                hAxis: {
                    textStyle: {
                        color: "#FFFFFF"
                    },
                    gridlines: {
                        color: "transparent"
                    },
                    baselineColor: 'transparent'
                },
                vAxis: {
                    textStyle: {
                        color: "#FFFFFF"
                    },
                    baselineColor: 'transparent',
                    gridlines: {
                        color: 'transparent',
                        count: 10
                    },
                    minValue: 0
                },
                legend: {
                    position: 'top',
                    alignment: 'center',
                    textStyle: {
                        fontSize: 13,
                        color: "#FFFFFF"
                    }
                },
            };

        var chart = new google.visualization.ColumnChart(document.getElementById('bar-chart'));
        chart.draw(data, options);
    };

    google.load("visualization", "1", {packages:["corechart"]});
    google.setOnLoadCallback(drawChart2);
    function drawChart2() {
        var data = google.visualization.arrayToDataTable([
            ['Year', 'Sales', 'Expenses'],
            ['2013',  1000,      400],
            ['2014',  1170,      460],
            ['2015',  660,       1120],
            ['2016',  1030,      540]
        ]);

        var options = {
            backgroundColor: 'transparent',
            height: 400,
            curveType: 'function',
            fontSize: 14,
            chartArea: {
                left: '5%',
                width: '90%',
                height: 300
            },
            pointSize: 4,
            tooltip: {
                textStyle: {
                    fontName: 'Hind Madurai',
                    fontSize: 14
                }
            },
            hAxis: {
                textStyle: {
                    color: "#FFFFFF"
                },
                gridlines: {
                    color: "#FFFFFF"
                },
                baselineColor: 'transparent'
            },
            vAxis: {
                // title: axislabel,

                textStyle: {
                    color: "#FFFFFF"
                },
                titleTextStyle: {
                    fontSize: 14,
                    italic: false
                },
                gridarea: {
                    color: '#f5f5f5',
                    count: 10
                },
                gridlines: {
                    color: 'transparent',
                },
                minValue: 0
            },
            legend: {
                position: 'top',
                alignment: 'end',
                textStyle: {
                    fontSize: 14,
                    color: "#FFFFFF"
                }
            },
        };

        var chart = new google.visualization.AreaChart(document.getElementById('area-chart'));
        chart.draw(data, options);
    };

    $(window).resize(function(){
        drawChart1();
        drawChart2();
    });
    
    
})(jQuery);

  var chart = new Chartist.Line('#smil-animations', {
    labels: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'],
    series: [
      [12, 9, 7, 8, 5, 4, 6, 2, 3, 3, 4, 6],
      [4,  5, 3, 7, 3, 5, 5, 3, 4, 4, 5, 5],
      [5,  3, 4, 5, 6, 3, 3, 4, 5, 6, 3, 4],
      [3,  4, 5, 6, 7, 6, 4, 5, 6, 7, 6, 3]
    ]
  }, {
    low: 0,
    plugins: [
      Chartist.plugins.tooltip()
    ]
  });
  
  // Let's put a sequence number aside so we can use it in the event callbacks
  var seq = 0,
    delays = 80,
    durations = 500;
  
  // Once the chart is fully created we reset the sequence
  chart.on('created', function() {
    seq = 0;
  });
  
  // On each drawn element by Chartist we use the Chartist.Svg API to trigger SMIL animations
  chart.on('draw', function(data) {
    seq++;
  
    if(data.type === 'line') {
      // If the drawn element is a line we do a simple opacity fade in. This could also be achieved using CSS3 animations.
      data.element.animate({
        opacity: {
          // The delay when we like to start the animation
          begin: seq * delays + 1000,
          // Duration of the animation
          dur: durations,
          // The value where the animation should start
          from: 0,
          // The value where it should end
          to: 1
        }
      });
    } else if(data.type === 'label' && data.axis === 'x') {
      data.element.animate({
        y: {
          begin: seq * delays,
          dur: durations,
          from: data.y + 100,
          to: data.y,
          // We can specify an easing function from Chartist.Svg.Easing
          easing: 'easeOutQuart'
        }
      });
    } else if(data.type === 'label' && data.axis === 'y') {
      data.element.animate({
        x: {
          begin: seq * delays,
          dur: durations,
          from: data.x - 100,
          to: data.x,
          easing: 'easeOutQuart'
        }
      });
    } else if(data.type === 'point') {
      data.element.animate({
        x1: {
          begin: seq * delays,
          dur: durations,
          from: data.x - 10,
          to: data.x,
          easing: 'easeOutQuart'
        },
        x2: {
          begin: seq * delays,
          dur: durations,
          from: data.x - 10,
          to: data.x,
          easing: 'easeOutQuart'
        },
        opacity: {
          begin: seq * delays,
          dur: durations,
          from: 0,
          to: 1,
          easing: 'easeOutQuart'
        }
      });
    } else if(data.type === 'grid') {
      // Using data.axis we get x or y which we can use to construct our animation definition objects
      var pos1Animation = {
        begin: seq * delays,
        dur: durations,
        from: data[data.axis.units.pos + '1'] - 30,
        to: data[data.axis.units.pos + '1'],
        easing: 'easeOutQuart'
      };
  
      var pos2Animation = {
        begin: seq * delays,
        dur: durations,
        from: data[data.axis.units.pos + '2'] - 100,
        to: data[data.axis.units.pos + '2'],
        easing: 'easeOutQuart'
      };
  
      var animations = {};
      animations[data.axis.units.pos + '1'] = pos1Animation;
      animations[data.axis.units.pos + '2'] = pos2Animation;
      animations['opacity'] = {
        begin: seq * delays,
        dur: durations,
        from: 0,
        to: 1,
        easing: 'easeOutQuart'
      };
  
      data.element.animate(animations);
    }
  });
  
  // For the sake of the example we update the chart every time it's created with a delay of 10 seconds
  chart.on('created', function() {
    if(window.__exampleAnimateTimeout) {
      clearTimeout(window.__exampleAnimateTimeout);
      window.__exampleAnimateTimeout = null;
    }
    window.__exampleAnimateTimeout = setTimeout(chart.update.bind(chart), 12000);
  });
  
  
  
  //Simple line chart
  new Chartist.Line('#simple-line-chart', {
    labels: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],
    series: [
      [12, 9, 7, 8, 5],
      [2, 1, 3.5, 7, 3],
      [1, 3, 4, 5, 6]
    ]
  }, {
    fullWidth: true,
    chartPadding: {
      right: 40
    },
    plugins: [
      Chartist.plugins.tooltip()
    ]
  });
  
  
  
  
  //Line Scatter Diagram
  var times = function(n) {
    return Array.apply(null, new Array(n));
  };
  
  var data = times(52).map(Math.random).reduce(function(data, rnd, index) {
    data.labels.push(index + 1);
    data.series.forEach(function(series) {
      series.push(Math.random() * 100)
    });
  
    return data;
  }, {
    labels: [],
    series: times(4).map(function() { return new Array() })
  });
  
  var options = {
    showLine: false,
    axisX: {
      labelInterpolationFnc: function(value, index) {
        return index % 13 === 0 ? 'W' + value : null;
      }
    }
  };
  
  var responsiveOptions = [
    ['screen and (min-width: 640px)', {
      axisX: {
        labelInterpolationFnc: function(value, index) {
          return index % 4 === 0 ? 'W' + value : null;
        }
      }
    }]
  ];
  
  new Chartist.Line('#scatter-diagram', data, options, responsiveOptions);
  
  
  
  
  
  //Line chart with tooltips
  
  new Chartist.Line('#line-chart-tooltips', {
    labels: ['1', '2', '3', '4', '5', '6'],
    series: [
      {
        name: 'Fibonacci sequence',
        data: [1, 2, 3, 5, 8, 13]
      },
      {
        name: 'Golden section',
        data: [1, 1.618, 2.618, 4.236, 6.854, 11.09]
      }
    ]
  },
      {
    plugins: [
      Chartist.plugins.tooltip()
    ]
  }
  );
  
  var $chart = $('#line-chart-tooltips');
  
  var $toolTip = $chart
    .append('<div class="tooltip"></div>')
    .find('.tooltip')
    .hide();
  
  $chart.on('mouseenter', '.ct-point', function() {
    var $point = $(this),
      value = $point.attr('ct:value'),
      seriesName = $point.parent().attr('ct:series-name');
    $toolTip.html(seriesName + '<br>' + value).show();
  });
  
  $chart.on('mouseleave', '.ct-point', function() {
    $toolTip.hide();
  });
  
  $chart.on('mousemove', function(event) {
    $toolTip.css({
      left: (event.offsetX || event.originalEvent.layerX) - $toolTip.width() / 2 - 10,
      top: (event.offsetY || event.originalEvent.layerY) - $toolTip.height() - 40
    });
  });
  
  
  
  
  //Line chart with area
  
  new Chartist.Line('#chart-with-area', {
    labels: [1, 2, 3, 4, 5, 6, 7, 8],
    series: [
      [5, 9, 7, 8, 5, 3, 5, 4]
    ]
  }, {
    low: 0,
    showArea: true,
    plugins: [
      Chartist.plugins.tooltip()
    ]
  });
  
  
  //Bi-polar Line chart with area only
  
  new Chartist.Line('#bi-polar-line', {
    labels: [1, 2, 3, 4, 5, 6, 7, 8],
    series: [
      [1, 2, 3, 1, -2, 0, 1, 0],
      [-2, -1, -2, -1, -2.5, -1, -2, -1],
      [0, 0, 0, 1, 2, 2.5, 2, 1],
      [2.5, 2, 1, 0.5, 1, 0.5, -1, -2.5]
    ]
  }, {
    high: 3,
    low: -3,
    showArea: true,
    showLine: false,
    showPoint: false,
    fullWidth: true,
    axisX: {
      showLabel: false,
      showGrid: false
    },
    plugins: [
      Chartist.plugins.tooltip()
    ]
  });
  
  
  
  
  
  //SVG Path animation
  
  var chart = new Chartist.Line('#svg-animation', {
    labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
    series: [
      [1, 5, 2, 5, 4, 3],
      [2, 3, 4, 8, 1, 2],
      [5, 4, 3, 2, 1, 0.5]
    ]
  }, {
    low: 0,
    showArea: true,
    showPoint: false,
    fullWidth: true
  });
  
  chart.on('draw', function(data) {
    if(data.type === 'line' || data.type === 'area') {
      data.element.animate({
        d: {
          begin: 2000 * data.index,
          dur: 2000,
          from: data.path.clone().scale(1, 0).translate(0, data.chartRect.height()).stringify(),
          to: data.path.clone().stringify(),
          easing: Chartist.Svg.Easing.easeOutQuint
        }
      });
    }
  });
  
  
  
  
  
  //Line Interpolation / Smoothing
  
  var chart = new Chartist.Line('#line-smoothing', {
    labels: [1, 2, 3, 4, 5],
    series: [
      [1, 5, 10, 0, 1],
      [10, 15, 0, 1, 2]
    ]
  }, {
    // Remove this configuration to see that chart rendered with cardinal spline interpolation
    // Sometimes, on large jumps in data values, it's better to use simple smoothing.
    lineSmooth: Chartist.Interpolation.simple({
      divisor: 2
    }),
    fullWidth: true,
    chartPadding: {
      right: 20
    },
    low: 0,
    plugins: [
      Chartist.plugins.tooltip()
    ]
  });
  
  
  
  
  
  //Bi-polar bar chart
  
  var data = {
    labels: ['W1', 'W2', 'W3', 'W4', 'W5', 'W6', 'W7', 'W8', 'W9', 'W10'],
    series: [
      [1, 2, 4, 8, 6, -2, -1, -4, -6, -2]
    ]
  };
  
  var options = {
    high: 10,
    low: -10,
    axisX: {
      labelInterpolationFnc: function(value, index) {
        return index % 2 === 0 ? value : null;
      }
    },
    plugins: [
      Chartist.plugins.tooltip()
    ]
  };
  
  new Chartist.Bar('#bi-polar-bar', data, options);
  
  
  
  
  //Overlapping bars on mobile
  
  var data = {
    labels: ['Jan', 'Feb', 'Mar', 'Apr', 'Mai', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
    series: [
      [5, 4, 3, 7, 5, 10, 3, 4, 8, 10, 6, 8],
      [3, 2, 9, 5, 4, 6, 4, 6, 7, 8, 7, 4]
    ]
  };
  
  var options = {
    seriesBarDistance: 10
  };
  
  var responsiveOptions = [
    ['screen and (max-width: 640px)', {
      seriesBarDistance: 5,
      axisX: {
        labelInterpolationFnc: function (value) {
          return value[0];
        }
      }
    }]
  ];
  
  new Chartist.Bar('#overlapping-bars', data, options, responsiveOptions);
  
  
  
  
  
  //Multi-line labels
  
  new Chartist.Bar('#multi-line-chart', {
    labels: ['First quarter of the year', 'Second quarter of the year', 'Third quarter of the year', 'Fourth quarter of the year'],
    series: [
      [60000, 40000, 80000, 70000],
      [40000, 30000, 70000, 65000],
      [8000, 3000, 10000, 6000]
    ]
  }, {
    seriesBarDistance: 10,
    axisX: {
      offset: 60
    },
    axisY: {
      offset: 80,
      labelInterpolationFnc: function(value) {
        return value + ' CHF'
      },
      scaleMinSpace: 15
    },
    plugins: [
      Chartist.plugins.tooltip()
    ]
  });
  
  
  
  
  //Stacked bar chart
  
  new Chartist.Bar('#stacked-bar-chart', {
    labels: ['Q1', 'Q2', 'Q3', 'Q4'],
    series: [
      [800000, 1200000, 1400000, 1300000],
      [200000, 400000, 500000, 300000],
      [160000, 290000, 410000, 600000]
    ]
  }, {
    stackBars: true,
    axisY: {
      labelInterpolationFnc: function(value) {
        return (value / 1000) + 'k';
      }
    },
    plugins: [
      Chartist.plugins.tooltip()
    ]
  }).on('draw', function(data) {
    if(data.type === 'bar') {
      data.element.attr({
        style: 'stroke-width: 30px'
      });
    }
  });
  
  
  
  
  
  
  //Horizontal bar chart
  
  new Chartist.Bar('#horizontal-bar-chart', {
    labels: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],
    series: [
      [5, 4, 3, 7, 5, 10, 3],
      [3, 2, 9, 5, 4, 6, 4]
    ]
  }, {
    seriesBarDistance: 10,
    reverseData: true,
    horizontalBars: true,
    axisY: {
      offset: 70
    },
    plugins: [
      Chartist.plugins.tooltip()
    ]
  });
  
  
  
  
  
  // Extreme responsive configuration
  
  new Chartist.Bar('#extreme-chart', {
    labels: ['Quarter 1', 'Quarter 2', 'Quarter 3', 'Quarter 4'],
    series: [
      [5, 4, 3, 7],
      [3, 2, 9, 5],
      [1, 5, 8, 4],
      [2, 3, 4, 6],
      [4, 1, 2, 1]
    ]
  }, {
    // Default mobile configuration
    stackBars: true,
    axisX: {
      labelInterpolationFnc: function(value) {
        return value.split(/\s+/).map(function(word) {
          return word[0];
        }).join('');
      }
    },
    axisY: {
      offset: 20
    },
    plugins: [
      Chartist.plugins.tooltip()
    ]
  }, [
    // Options override for media > 400px
    ['screen and (min-width: 400px)', {
      reverseData: true,
      horizontalBars: true,
      axisX: {
        labelInterpolationFnc: Chartist.noop
      },
      axisY: {
        offset: 60
      }
    }],
    // Options override for media > 800px
    ['screen and (min-width: 800px)', {
      stackBars: false,
      seriesBarDistance: 10
    }],
    // Options override for media > 1000px
    ['screen and (min-width: 1000px)', {
      reverseData: false,
      horizontalBars: false,
      seriesBarDistance: 15
    }]
  ]);
  
  
  
  
  //Distributed series
  
  new Chartist.Bar('#distributed-series', {
    labels: ['XS', 'S', 'M', 'L', 'XL', 'XXL', 'XXXL'],
    series: [20, 60, 120, 200, 180, 20, 10]
  }, {
    distributeSeries: true,
    plugins: [
      Chartist.plugins.tooltip()
    ]
  });
  
  
  
  //Label placement
  
  new Chartist.Bar('#label-placement-chart', {
    labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],
    series: [
      [5, 4, 3, 7, 5, 10, 3],
      [3, 2, 9, 5, 4, 6, 4]
    ]
  }, {
    axisX: {
      // On the x-axis start means top and end means bottom
      position: 'start'
    },
    axisY: {
      // On the y-axis start means left and end means right
      position: 'end'
    },
    plugins: [
      Chartist.plugins.tooltip()
    ]
  });
  
  
  
  
  //Animating a Donut with Svg.animate
  
  var chart = new Chartist.Pie('#animating-donut', {
    series: [10, 20, 50, 20, 5, 50, 15],
    labels: [1, 2, 3, 4, 5, 6, 7]
  }, {
    donut: true,
    showLabel: false,
    plugins: [
      Chartist.plugins.tooltip()
    ]
  });
  
  chart.on('draw', function(data) {
    if(data.type === 'slice') {
      // Get the total path length in order to use for dash array animation
      var pathLength = data.element._node.getTotalLength();
  
      // Set a dasharray that matches the path length as prerequisite to animate dashoffset
      data.element.attr({
        'stroke-dasharray': pathLength + 'px ' + pathLength + 'px'
      });
  
      // Create animation definition while also assigning an ID to the animation for later sync usage
      var animationDefinition = {
        'stroke-dashoffset': {
          id: 'anim' + data.index,
          dur: 1000,
          from: -pathLength + 'px',
          to:  '0px',
          easing: Chartist.Svg.Easing.easeOutQuint,
          // We need to use `fill: 'freeze'` otherwise our animation will fall back to initial (not visible)
          fill: 'freeze'
        }
      };
  
      // If this was not the first slice, we need to time the animation so that it uses the end sync event of the previous animation
      if(data.index !== 0) {
        animationDefinition['stroke-dashoffset'].begin = 'anim' + (data.index - 1) + '.end';
      }
  
      // We need to set an initial value before the animation starts as we are not in guided mode which would do that for us
      data.element.attr({
        'stroke-dashoffset': -pathLength + 'px'
      });
  
      // We can't use guided mode as the animations need to rely on setting begin manually
      // See http://gionkunz.github.io/chartist-js/api-documentation.html#chartistsvg-function-animate
      data.element.animate(animationDefinition, false);
    }
  });
  
  // For the sake of the example we update the chart every time it's created with a delay of 8 seconds
  chart.on('created', function() {
    if(window.__anim21278907124) {
      clearTimeout(window.__anim21278907124);
      window.__anim21278907124 = null;
    }
    window.__anim21278907124 = setTimeout(chart.update.bind(chart), 10000);
  });
  
  
  
  
  //Simple pie chart
  
  var data = {
    series: [5, 3, 4]
  };
  
  var sum = function(a, b) { return a + b };
  
  new Chartist.Pie('#simple-pie', data, {
    labelInterpolationFnc: function(value) {
      return Math.round(value / data.series.reduce(sum) * 100) + '%';
    }
  });
  
  
  
  
  //Pie chart with custom labels
  
  var data = {
    labels: ['Bananas', 'Apples', 'Grapes'],
    series: [20, 15, 40]
  };
  
  var options = {
    labelInterpolationFnc: function(value) {
      return value[0]
    }
  };
  
  var responsiveOptions = [
    ['screen and (min-width: 640px)', {
      chartPadding: 30,
      labelOffset: 100,
      labelDirection: 'explode',
      labelInterpolationFnc: function(value) {
        return value;
      }
    }],
    ['screen and (min-width: 1024px)', {
      labelOffset: 80,
      chartPadding: 20
    }]
  ];
  
  new Chartist.Pie('#pie-chart', data, options, responsiveOptions);
  
  
  
  //Gauge chart
  
  new Chartist.Pie('#gauge-chart', {
    series: [20, 10, 30, 40]
  }, {
    donut: true,
    donutWidth: 60,
    startAngle: 270,
    total: 200,
    showLabel: false,
    plugins: [
      Chartist.plugins.tooltip()
    ]
  });
  
  
  
  
  
  // Different configuration for different series
  
  var chart = new Chartist.Line('#different-series', {
    labels: ['1', '2', '3', '4', '5', '6', '7', '8'],
    // Naming the series with the series object array notation
    series: [{
      name: 'series-1',
      data: [5, 2, -4, 2, 0, -2, 5, -3]
    }, {
      name: 'series-2',
      data: [4, 3, 5, 3, 1, 3, 6, 4]
    }, {
      name: 'series-3',
      data: [2, 4, 3, 1, 4, 5, 3, 2]
    }]
  }, {
    fullWidth: true,
    // Within the series options you can use the series names
    // to specify configuration that will only be used for the
    // specific series.
    series: {
      'series-1': {
        lineSmooth: Chartist.Interpolation.step()
      },
      'series-2': {
        lineSmooth: Chartist.Interpolation.simple(),
        showArea: true
      },
      'series-3': {
        showPoint: false
      }
    },
    plugins: [
      Chartist.plugins.tooltip()
    ]
  }, [
    // You can even use responsive configuration overrides to
    // customize your series configuration even further!
    ['screen and (max-width: 320px)', {
      series: {
        'series-1': {
          lineSmooth: Chartist.Interpolation.none()
        },
        'series-2': {
          lineSmooth: Chartist.Interpolation.none(),
          showArea: false
        },
        'series-3': {
          lineSmooth: Chartist.Interpolation.none(),
          showPoint: true
        }
      }
    }]
  ]);
  
  
  
  
  //SVG Animations chart
  
  var chart = new Chartist.Line('#svg-dot-animation', {
    labels: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'],
    series: [
      [12, 4, 2, 8, 5, 4, 6, 2, 3, 3, 4, 6],
      [4, 8, 9, 3, 7, 2, 10, 5, 8, 1, 7, 10]
    ]
  }, {
    low: 0,
    showLine: false,
    axisX: {
      showLabel: false,
      offset: 0
    },
    axisY: {
      showLabel: false,
      offset: 0
    },
    plugins: [
      Chartist.plugins.tooltip()
    ]
  });
  
  // Let's put a sequence number aside so we can use it in the event callbacks
  var seq = 0;
  
  // Once the chart is fully created we reset the sequence
  chart.on('created', function() {
    seq = 0;
  });
  
  // On each drawn element by Chartist we use the Chartist.Svg API to trigger SMIL animations
  chart.on('draw', function(data) {
    if(data.type === 'point') {
      // If the drawn element is a line we do a simple opacity fade in. This could also be achieved using CSS3 animations.
      data.element.animate({
        opacity: {
          // The delay when we like to start the animation
          begin: seq++ * 80,
          // Duration of the animation
          dur: 500,
          // The value where the animation should start
          from: 0,
          // The value where it should end
          to: 1
        },
        x1: {
          begin: seq++ * 80,
          dur: 500,
          from: data.x - 100,
          to: data.x,
          // You can specify an easing function name or use easing functions from Chartist.Svg.Easing directly
          easing: Chartist.Svg.Easing.easeOutQuart
        }
      });
    }
  });
  
  // For the sake of the example we update the chart every time it's created with a delay of 8 seconds
  chart.on('created', function() {
    if(window.__anim0987432598723) {
      clearTimeout(window.__anim0987432598723);
      window.__anim0987432598723 = null;
    }
    window.__anim0987432598723 = setTimeout(chart.update.bind(chart), 8000);
  });
  
  
(function ($) {
    "use strict";

    //Team chart
    var ctx = document.getElementById("team-chart");
    ctx.height = 150;
    var myChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: ["2010", "2011", "2012", "2013", "2014", "2015", "2016"],
            type: 'line',
            defaultFontFamily: 'Montserrat',
            datasets: [{
                data: [0, 15, 7, 12, 85, 10, 50],
                label: "Saiful",
                backgroundColor: '#4d7cff',
                borderColor: '#4d7cff',
                borderWidth: 0.5,
                pointStyle: 'circle',
                pointRadius: 5,
                pointBorderColor: 'transparent',
                pointBackgroundColor: '#4d7cff',
            }, {
                label: "Saikot",
                data: [0, 30, 5, 3, 15, 5, 0],
                backgroundColor: '#7571F9',
                borderColor: '#7571F9',
                borderWidth: 0.5,
                pointStyle: 'circle',
                pointRadius: 5,
                pointBorderColor: 'transparent',
                pointBackgroundColor: '#7571F9',
            }]
        },
        options: {
            responsive: true,
            tooltips: {
                mode: 'index',
                titleFontSize: 12,
                titleFontColor: '#000',
                bodyFontColor: '#000',
                backgroundColor: '#fff',
                titleFontFamily: 'Montserrat',
                bodyFontFamily: 'Montserrat',
                cornerRadius: 3,
                intersect: false,
            },
            legend: {
                position: 'top',
                labels: {
                    usePointStyle: true,
                    fontFamily: 'Montserrat',
                },


            },
            scales: {
                xAxes: [{
                    display: true,
                    gridLines: {
                        display: false,
                        drawBorder: false
                    },
                    scaleLabel: {
                        display: false,
                        labelString: 'Month'
                    }
                }],
                yAxes: [{
                    display: true,
                    gridLines: {
                        display: false,
                        drawBorder: false
                    },
                    scaleLabel: {
                        display: true,
                        labelString: 'Value'
                    }
                }]
            },
            title: {
                display: false,
            }
        }
    });


    //Sales chart
    var ctx = document.getElementById("sales-chart");
    ctx.height = 150;
    var myChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: ["2010", "2011", "2012", "2013", "2014", "2015", "2016"],
            type: 'line',
            defaultFontFamily: 'Montserrat',
            datasets: [{
                label: "Clothes",
                data: [0, 10, 20, 10, 25, 15, 150],
                backgroundColor: 'transparent',
                borderColor: '#7571F9',
                borderWidth: 3,
                pointStyle: 'circle',
                pointRadius: 5,
                pointBorderColor: 'transparent',
                pointBackgroundColor: '#7571F9',

            }, {
                label: "Foods",
                data: [0, 30, 10, 60, 50, 63, 10],
                backgroundColor: 'transparent',
                borderColor: '#4d7cff',
                borderWidth: 3,
                pointStyle: 'circle',
                pointRadius: 5,
                pointBorderColor: 'transparent',
                pointBackgroundColor: '#4d7cff',
            }, {
                label: "Electronics",
                data: [0, 50, 40, 20, 40, 79, 20],
                backgroundColor: 'transparent',
                borderColor: '#173e43',
                borderWidth: 3,
                pointStyle: 'circle',
                pointRadius: 5,
                pointBorderColor: 'transparent',
                pointBackgroundColor: '#173e43',
            }]
        },
        options: {
            responsive: true,

            tooltips: {
                mode: 'index',
                titleFontSize: 12,
                titleFontColor: '#000',
                bodyFontColor: '#000',
                backgroundColor: '#fff',
                titleFontFamily: 'Montserrat',
                bodyFontFamily: 'Montserrat',
                cornerRadius: 3,
                intersect: false,
            },
            legend: {
                labels: {
                    usePointStyle: true,
                    fontFamily: 'Montserrat',
                },
            },
            scales: {
                xAxes: [{
                    display: true,
                    gridLines: {
                        display: false,
                        drawBorder: false
                    },
                    scaleLabel: {
                        display: false,
                        labelString: 'Month'
                    }
                }],
                yAxes: [{
                    display: true,
                    gridLines: {
                        display: false,
                        drawBorder: false
                    },
                    scaleLabel: {
                        display: true,
                        labelString: 'Value'
                    }
                }]
            },
            title: {
                display: false,
                text: 'Normal Legend'
            }
        }
    });







    //line chart
    var ctx = document.getElementById("lineChart");
    ctx.height = 150;
    var myChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: ["January", "February", "March", "April", "May", "June", "July"],
            datasets: [
                {
                    label: "My First dataset",
                    borderColor: "rgba(144,	104,	190,.9)",
                    borderWidth: "1",
                    backgroundColor: "rgba(144,	104,	190,.7)",
                    data: [22, 44, 67, 43, 76, 45, 12]
                },
                {
                    label: "My Second dataset",
                    borderColor: "rgba(117, 113, 249, 0.9)",
                    borderWidth: "1",
                    backgroundColor: "rgba(117, 113, 249, 0.5)",
                    pointHighlightStroke: "rgba(117, 113, 249,1)",
                    data: [16, 32, 18, 26, 42, 33, 44]
                }
            ]
        },
        options: {
            responsive: true,
            tooltips: {
                mode: 'index',
                intersect: false
            },
            hover: {
                mode: 'nearest',
                intersect: true
            }

        }
    });


    //bar chart
    var ctx = document.getElementById("barChart");
    ctx.height = 150;
    var myChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: ["January", "February", "March", "April", "May", "June", "July"],
            datasets: [
                {
                    label: "My First dataset",
                    data: [65, 59, 80, 81, 56, 55, 40],
                    borderColor: "rgba(117, 113, 249, 0.9)",
                    borderWidth: "0",
                    backgroundColor: "rgba(117, 113, 249, 0.5)"
                },
                {
                    label: "My Second dataset",
                    data: [28, 48, 40, 19, 86, 27, 90],
                    borderColor: "rgba(144,	104,	190,0.9)",
                    borderWidth: "0",
                    backgroundColor: "rgba(144,	104,	190,0.7)"
                }
            ]
        },
        options: {
            scales: {
                yAxes: [{
                    ticks: {
                        beginAtZero: true
                    }
                }],
                xAxes: [{
                    // Change here
                    barPercentage: 0.2
                }]
            }
        }
    });

    //radar chart
    var ctx = document.getElementById("radarChart");
    ctx.height = 150;
    var myChart = new Chart(ctx, {
        type: 'radar',
        data: {
            labels: [["Eating", "Dinner"], ["Drinking", "Water"], "Sleeping", ["Designing", "Graphics"], "Coding", "Cycling", "Running"],
            datasets: [
                {
                    label: "My First dataset",
                    data: [65, 59, 66, 45, 56, 55, 40],
                    borderColor: "rgba(117, 113, 249, 0.6)",
                    borderWidth: "1",
                    backgroundColor: "rgba(117, 113, 249, 0.4)"
                },
                {
                    label: "My Second dataset",
                    data: [28, 12, 40, 19, 63, 27, 87],
                    borderColor: "rgba(117, 113, 249, 0.7",
                    borderWidth: "1",
                    backgroundColor: "rgba(117, 113, 249, 0.5)"
                }
            ]
        },
        options: {
            legend: {
                position: 'top'
            },
            scale: {
                ticks: {
                    beginAtZero: true
                }
            }
        }
    });


    //pie chart
    var ctx = document.getElementById("pieChart");
    ctx.height = 150;
    var myChart = new Chart(ctx, {
        type: 'pie',
        data: {
            datasets: [{
                data: [45, 25, 20, 10],
                backgroundColor: [
                    "rgba(117, 113, 249,0.9)",
                    "rgba(117, 113, 249,0.7)",
                    "rgba(117, 113, 249,0.5)",
                    "rgba(144,	104,	190,0.7)"
                ],
                hoverBackgroundColor: [
                    "rgba(117, 113, 249,0.9)",
                    "rgba(117, 113, 249,0.7)",
                    "rgba(117, 113, 249,0.5)",
                    "rgba(144,	104,	190,0.7)"
                ]

            }],
            labels: [
                "green",
                "green",
                "green"
            ]
        },
        options: {
            responsive: true
        }
    });

    //doughut chart
    var ctx = document.getElementById("doughutChart");
    ctx.height = 150;
    var myChart = new Chart(ctx, {
        type: 'doughnut',
        data: {
            datasets: [{
                data: [45, 25, 20, 10],
                backgroundColor: [
                    "rgba(117, 113, 249,0.9)",
                    "rgba(117, 113, 249,0.7)",
                    "rgba(117, 113, 249,0.5)",
                    "rgba(144,	104,	190,0.07)"
                ],
                hoverBackgroundColor: [
                    "rgba(117, 113, 249,0.9)",
                    "rgba(117, 113, 249,0.7)",
                    "rgba(117, 113, 249,0.5)",
                    "rgba(144,	104,	190,0.7)"
                ]

            }],
            labels: [
                "green",
                "green",
                "green",
                "green"
            ]
        },
        options: {
            responsive: true,
        }
    });

    //polar chart
    var ctx = document.getElementById("polarChart");
    ctx.height = 150;
    var myChart = new Chart(ctx, {
        type: 'polarArea',
        data: {
            datasets: [{
                data: [15, 18, 9, 6, 19],
                backgroundColor: [
                    "rgba(117, 113, 249,0.9)",
                    "rgba(117, 113, 249,0.8)",
                    "rgba(117, 113, 249,0.7)",
                    "rgba(144,	104,	190,0.7)",
                    "rgba(117, 113, 249,0.5)"
                ]

            }],
            labels: [
                "green",
                "green",
                "green",
                "green"
            ]
        },
        options: {
            responsive: true
        }
    });

    // single bar chart
    var ctx = document.getElementById("singelBarChart");
    ctx.height = 150;
    var myChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: ["Sun", "Mon", "Tu", "Wed", "Th", "Fri", "Sat"],
            datasets: [
                {
                    label: "My First dataset",
                    data: [40, 55, 75, 81, 56, 55, 40],
                    borderColor: "rgba(117, 113, 249, 0.9)",
                    borderWidth: "0",
                    backgroundColor: "rgba(117, 113, 249, 0.5)"
                }
            ]
        },
        options: {
            scales: {
                yAxes: [{
                    ticks: {
                        beginAtZero: true
                    }
                }]
            }
        }
    });




})(jQuery);



let draw = Chart.controllers.line.prototype.draw;
Chart.controllers.line = Chart.controllers.line.extend({
    draw: function () {
        draw.apply(this, arguments);
        let nk = this.chart.chart.ctx;
        let _stroke = nk.stroke;
        nk.stroke = function () {
            nk.save();
            nk.shadowColor = '#ddd';
            nk.shadowBlur = 10;
            nk.shadowOffsetX = 0;
            nk.shadowOffsetY = 4;
            _stroke.apply(this, arguments)
            nk.restore();
        }
    }
});

(nk = document.getElementById("canvas")).height = 150;
myChart = new Chart(nk, {
    type: 'line',
    data: {
        labels: ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun", "Mon"],
        datasets: [{
            data: [100, 70, 150, 120, 300, 250, 400, 300],
            borderWidth: 4,
            borderColor: "rgba(117, 113, 249, 0.9)",
            pointBackgroundColor: "#FFF",
            pointBorderColor: "rgba(117, 113, 249, 0.9)",
            pointHoverBackgroundColor: "#FFF",
            pointHoverBorderColor: "rgba(117, 113, 249, 0.9)",
            pointRadius: 0,
            pointHoverRadius: 6,
            fill: !1
        },
        {
            data: [20, 70, 300, 120, 180, 220, 450, 250],
            borderWidth: 4,
            borderColor: "#4d7cff",
            pointBackgroundColor: "#FFF",
            pointBorderColor: "#4d7cff",
            pointHoverBackgroundColor: "#FFF",
            pointHoverBorderColor: "#4d7cff",
            pointRadius: 0,
            pointHoverRadius: 6,
            fill: !1
        }
        ]
    },
    options: {
        responsive: !0,
        legend: {
            display: !1
        },
        scales: {
            xAxes: [{
                display: !1,
                gridLines: {
                    display: !1
                }
            }],
            yAxes: [{
                display: !1,
                ticks: {
                    padding: 10,
                    stepSize: 100,
                    max: 600,
                    min: 0
                },
                gridLines: {
                    display: !0,
                    drawBorder: !1,
                    lineWidth: 1,
                    zeroLineColor: "#e5e5e5"
                }
            }]
        }
    },
});



(function ($) {
    "use strict";


    var ctx = document.getElementById("chart-0");
    ctx.height = 100;
    var myChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"],
            datasets: [{
                label: '',
                data: [5, 6, 4.5, 5.5, 3, 6, 4.5, 6, 8, 3, 5.5, 4, 6, 9, 12, 4, 3, 6, 4.5, 6, 8, 4.5, 5, 6, 4.5, 5.5,],
                datalabels: {
                    align: 'end',
                    anchor: 'start'
                },
                backgroundColor: '#0000FF',
            },
            {
                label: '',
                data: [5, 6, 4.5, 5.5, 3, 6, 4.5, 6, 8, 3, 5.5, 4, 6, 9, 12, 4, 3, 6, 4.5, 6, 8, 4.5, 5, 6, 4.5, 5.5,],
                datalabels: {
                    align: 'center',
                    anchor: 'center'
                },
                backgroundColor: '#00A2FF',
            },

            {
                label: '',
                data: [5, 6, 4.5, 5.5, 3, 6, 4.5, 6, 8, 3, 5.5, 4, 6, 9, 12, 4, 3, 6, 4.5, 6, 8, 4.5, 5, 6, 4.5, 5.5,],
                datalabels: {
                    align: 'center',
                    anchor: 'center'
                },
                backgroundColor: '#34C73B'
            }]
        },
        options: {
            responsive: true,
            plugins: {
                datalabels: {
                    color: '#fff',
                }
            },
            legend: {
                display: false
            },
            scales: {
                xAxes: [{
                    stacked: true
                }],
                yAxes: [{
                    stacked: true
                }]
            },
            tooltips: {
                enabled: false
            }
        }
    });

    var ctx = document.getElementById("chart-1");
    ctx.height = 100;
    var myChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"],
            datasets: [{
                label: '',
                data: [5, 6, 4.5, 5.5, 3, 6, 4.5, 6, 8, 3, 5.5, 4, 6, 9, 12, 4, 3, 6, 4.5, 6, 8, 4.5, 5, 6, 4.5, 5.5,],
                datalabels: {
                    align: 'end',
                    anchor: 'start'
                },
                backgroundColor: '#0000FF',
                borderColor: 'rgba(0, 0, 255, .5)',
                fill: false
            },
            {
                label: '',
                data: [5, 6, 4.5, 5.5, 3, 6, 4.5, 6, 8, 3, 5.5, 4, 6, 9, 12, 4, 3, 6, 4.5, 6, 8, 4.5, 5, 6, 4.5, 5.5,],
                datalabels: {
                    align: 'center',
                    anchor: 'center'
                },
                backgroundColor: '#00A2FF',
                borderColor: 'rgba(0, 162, 255, .5)',
                fill: false
            },

            {
                label: '',
                data: [5, 6, 4.5, 5.5, 3, 6, 4.5, 6, 8, 3, 5.5, 4, 6, 9, 12, 4, 3, 6, 4.5, 6, 8, 4.5, 5, 6, 4.5, 5.5,],
                datalabels: {
                    align: 'center',
                    anchor: 'center'
                },
                backgroundColor: '#34C73B',
                borderColor: 'rgba(52, 199, 59, .5)',
                fill: false
            }]
        },
        options: {
            responsive: true,
            plugins: {
                datalabels: {
                    backgroundColor: function (context) {
                        return context.dataset.backgroundColor;
                    },
                    color: '#fff',
                    borderRadius: 4,
                }
            },
            legend: {
                display: false
            },
            scales: {
                // xAxes: [{
                //     stacked: true
                // }],
                yAxes: [{
                    stacked: true
                }]
            },
            tooltips: {
                enabled: false
            }
        }
    });

    var ctx = document.getElementById("chart-2");
    ctx.height = 100;
    var myChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"],
            datasets: [{
                label: '',
                data: [5, 6, 4.5, 5.5, 3, 6, 4.5, 6, 8, 3, 5.5, 4, 6, 9, 12, 4, 3, 6, 4.5, 6, 8, 4.5, 5, 6, 4.5, 5.5,],
                datalabels: {
                    align: 'end',
                    anchor: 'start'
                },
                backgroundColor: 'rgba(0, 0, 255, .5)',
                borderColor: '#0000FF',
                fill: true,
            },
            {
                label: '',
                data: [5, 6, 4.5, 5.5, 3, 6, 4.5, 6, 8, 3, 5.5, 4, 6, 9, 12, 4, 3, 6, 4.5, 6, 8, 4.5, 5, 6, 4.5, 5.5,],
                datalabels: {
                    align: 'center',
                    anchor: 'center'
                },
                backgroundColor: 'rgba(0, 162, 255, .5)',
                borderColor: '#00A2FF',
                fill: true,
            },

            {
                label: '',
                data: [5, 6, 4.5, 5.5, 3, 6, 4.5, 6, 8, 3, 5.5, 4, 6, 9, 12, 4, 3, 6, 4.5, 6, 8, 4.5, 5, 6, 4.5, 5.5,],
                datalabels: {
                    align: 'center',
                    anchor: 'center'
                },
                backgroundColor: 'rgba(52, 199, 59, .5)',
                borderColor: '#34C73B',
                fill: true,
            }]
        },
        options: {
            responsive: true,
            plugins: {
                datalabels: {
                    backgroundColor: function (context) {
                        return context.dataset.borderColor;
                    },
                    color: '#fff',
                    borderRadius: 4,
                }
            },
            legend: {
                display: false
            },
            scales: {
                // xAxes: [{
                //     stacked: true
                // }],
                yAxes: [{
                    stacked: true
                }]
            },
            tooltips: {
                enabled: false
            }
        }
    });

    var ctx = document.getElementById("chart-3");
    ctx.height = 100;
    var myChart = new Chart(ctx, {
        type: 'doughnut',
        data: {
            labels: ["A", "B", "C", "D"],
            datasets: [{
                label: '',
                data: [5, 6, 4.5, 5.5],
                datalabels: {
                    anchor: 'end'
                },
                backgroundColor: [
                    '#34C73B  ',
                    '#00A2FF',
                    '#0000FF',
                    '#F44336'
                ],
            },
            {
                label: '',
                data: [5, 6, 4.5, 5.5],
                datalabels: {
                    // align: 'center',
                    anchor: 'center',
                    backgroundColor: null,
                    borderWidth: 0,
                },
                backgroundColor: [
                    '#F44336',
                    '#0000FF',
                    '#00A2FF',
                    '#34C73B'
                ],
            },

            {
                label: '',
                data: [5, 6, 4.5, 5.5,],
                datalabels: {
                    anchor: 'start'
                },
                backgroundColor: [
                    '#34C73B  ',
                    '#00A2FF',
                    '#0000FF',
                    '#F44336'
                ],
            }]
        },
        options: {
            responsive: true,
            plugins: {
                datalabels: {
                    backgroundColor: function (context) {
                        return context.dataset.backgroundColor;
                    },
                    borderColor: 'white',
                    borderRadius: 25,
                    borderWidth: 2,
                    color: 'white',
                }
            },
            legend: {
                display: false
            },
            tooltips: {
                enabled: false
            }
        }
    });

    var ctx = document.getElementById("chart-4");
    ctx.height = 100;
    var myChart = new Chart(ctx, {
        type: 'polarArea',
        data: {
            labels: ["A", "B", "C", "D"],
            datasets: [{
                label: '',
                data: [7, 8, 9, 13, 17, 18, 19, 21, 22, 23],
                backgroundColor: [
                    '#0000FF',
                    '#00A2FF',
                    '#34C73B',
                    '#F44336',
                    '#0000FF',
                    '#00A2FF',
                    '#34C73B',
                    '#F44336',
                    '#0000FF',
                    '#DCDCDC'
                ],
            },
            {
                label: '',
                data: [26, 31, 32, 33, 34, 38, 41, 44, 46, 50],
                backgroundColor: [
                    '#F44336',
                    '#00A2FF',
                    '#34C73B',
                    '#0000FF',
                    '#F44336',
                    '#00A2FF',
                    '#34C73B',
                    '#0000FF',
                    '#F44336',
                    '#00A2FF'
                ],
            },

            {
                label: '',
                data: [25, 26, 28, 30, 35, 43, 44, 45, 48, 50],
                backgroundColor: [
                    '#34C73B',
                    '#0000FF',
                    '#DCDCDC',
                    '#00A2FF',
                    '#34C73B',
                    '#0000FF',
                    '#DCDCDC',
                    '#00A2FF',
                    '#34C73B',
                    '#0000FF'
                ],
            }]
        },
        options: {
            responsive: true,
            plugins: {
                datalabels: {
                    anchor: 'end',
                    backgroundColor: function (context) {
                        return context.dataset.backgroundColor;
                    },
                    borderColor: 'white',
                    borderRadius: 25,
                    borderWidth: 2,
                    color: 'white',
                }
            },
            legend: {
                display: false
            },
            tooltips: {
                enabled: false
            }
        }
    });


    var ctx = document.getElementById("chart-5");
    ctx.height = 100;
    var myChart = new Chart(ctx, {
        type: 'radar',
        data: {
            labels: ["A", "B", "C", "D", "E"],
            datasets: [{
                label: '',
                data: [79, 80, 59, 65, 63],
                backgroundColor: 'rgba(244, 67, 54, .3)',
                borderColor: '#F44336',
            },
            {
                label: '',
                data: [45, 32, 50, 55, 79, 70],
                backgroundColor: 'rgba(0, 162, 255, .3)',
                borderColor: '#00A2FF',
            },

            {
                label: '',
                data: [8, 80, 23, 39, 69, 41],
                backgroundColor: 'rgba(0, 0, 255, .5)',
                borderColor: '#0000FF',
            }]
        },
        options: {
            responsive: true,
            plugins: {
                datalabels: {
                    backgroundColor: function (context) {
                        return context.dataset.borderColor;
                    },
                    color: 'white',
                    padding: 4,
                }
            },
            legend: {
                display: false
            },
            tooltips: {
                enabled: false
            }
        }
    });


    var ctx = document.getElementById("chart-6");
    ctx.height = 100;
    var myChart = new Chart(ctx, {
        type: 'bubble',
        data: {
            labels: ["A", "B", "C", "D", "E"],
            datasets: [{
                label: '',
                data: [{
                    x: 100,
                    y: 0,
                    r: 10
                }, {
                    x: 60,
                    y: 30,
                    r: 20
                }, {
                    x: 40,
                    y: 60,
                    r: 25
                }, {
                    x: 80,
                    y: 80,
                    r: 50
                }, {
                    x: 20,
                    y: 30,
                    r: 25
                }, {
                    x: 0,
                    y: 100,
                    r: 5
                }],
                backgroundColor: '#F44336',
                borderColor: '#F44336',
            },
            {
                label: '',
                data: [{
                    x: 30,
                    y: 45,
                    r: 25
                }, {
                    x: 42,
                    y: 98,
                    r: 12
                }, {
                    x: 63,
                    y: 28,
                    r: 49
                }, {
                    x: 75,
                    y: 38,
                    r: 83
                }, {
                    x: 65,
                    y: 91,
                    r: 20
                }, {
                    x: 10,
                    y: 0,
                    r: 45
                }],
                backgroundColor: '#00A2FF',
                borderColor: '#00A2FF',
            },

            {
                label: '',
                data: [{
                    x: 0,
                    y: 100,
                    r: 80
                }, {
                    x: 90,
                    y: 42,
                    r: 23
                }, {
                    x: 63,
                    y: 35,
                    r: 73
                }, {
                    x: 97,
                    y: 56,
                    r: 19
                }, {
                    x: 10,
                    y: 45,
                    r: 15
                }, {
                    x: 100,
                    y: 0,
                    r: 65
                }],
                backgroundColor: '#0000FF',
                borderColor: '#0000FF',
            }]
        },
        options: {
            responsive: true,
            plugins: {
                datalabels: {
                    anchor: function (context) {
                        var value = context.dataset.data[context.dataIndex];
                        return value.v < 50 ? 'end' : 'center';
                    },
                    align: function (context) {
                        var value = context.dataset.data[context.dataIndex];
                        return value.v < 50 ? 'end' : 'center';
                    },
                    color: function (context) {
                        var value = context.dataset.data[context.dataIndex];
                        return value.v < 50 ? context.dataset.backgroundColor : 'white';
                    },
                }
            },
            legend: {
                display: false
            },
            tooltips: {
                enabled: false
            }
        }
    });
    
    var ctx = document.getElementById("chart-7");
    ctx.height = 100;
    var myChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"],
            datasets: [{
                label: 'France',
                data: [5, 6, 4.5, 5.5, 3, 6, 4.5, 6, 8, 3, 5.5, 4, 6, 9, 12, 4, 3, 6, 4.5, 6, 8, 4.5, 5, 6, 4.5, 5.5,],
                datalabels: {
                    align: function (context) {
                        return context.active ? 'start' : 'center';
                    }
                },
                backgroundColor: '#F44336',
                borderColor: 'rgba(244, 67, 54, .8)',
                fill: false
            },
            {
                label: 'Canada',
                data: [5, 6, 4.5, 5.5, 3, 6, 4.5, 6, 8, 3, 5.5, 4, 6, 9, 12, 4, 3, 6, 4.5, 6, 8, 4.5, 5, 6, 4.5, 5.5,],
                datalabels: {
                    align: 'center',
                    anchor: 'center'
                },
                backgroundColor: '#00A2FF',
                borderColor: 'rgba(0, 162, 255, .8)',
                fill: false
            },

            {
                label: 'USA',
                data: [5, 6, 4.5, 5.5, 3, 6, 4.5, 6, 8, 3, 5.5, 4, 6, 9, 12, 4, 3, 6, 4.5, 6, 8, 4.5, 5, 6, 4.5, 5.5,],
                datalabels: {
                    align: function (context) {
                        return context.active ? 'end' : 'center';
                    }
                },
                backgroundColor: '#0000FF',
                borderColor: 'rgba(0, 0, 255, .8)',
                fill: false
            }]
        },
        options: {
            responsive: true,
            hover: {
                mode: 'index',
                intersect: false
            },
            plugins: {
                datalabels: {
                    backgroundColor: function (context) {
                        return context.active ? context.dataset.backgroundColor : 'white';
                    },
                    borderColor: function (context) {
                        return context.dataset.backgroundColor;
                    },
                    borderRadius: function (context) {
                        return context.active ? 0 : 32;
                    },
                    borderWidth: 1,
                    color: function (context) {
                        return context.active ? 'white' : context.dataset.backgroundColor;
                    },
                    font: {
                        weight: 'bold'
                    },
                    formatter: function (value, context) {
                        value = Math.round(value * 100) / 100;
                        return context.active
                            ? context.dataset.label + '\n' + value + '%'
                            : Math.round(value);
                    },
                    offset: 8,
                    textAlign: 'center'
                }
            },
            legend: {
                display: false
            },
            scales: {
                // xAxes: [{
                //     stacked: true
                // }],
                yAxes: [{
                    stacked: true
                }]
            },
            tooltips: {
                enabled: false
            }
        }
    });





})(jQuery);
(function ($) {
    "use strict";


    //Earning Graph Bottom
    var ctx = document.getElementById("canvas");
    ctx.height = 100;
    var myChart = new Chart(ctx, {
        type: 'bar',
        data: {
            datasets: [{
                label: 'A',
                borderColor: "#F44336",
                borderWidth: "0",
                backgroundColor: "#F44336",
                data: []
            }, {
                label: 'B',
                borderColor: "#00A2FF",
                borderWidth: "0",
                backgroundColor: "#00A2FF",
                data: []
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: true,
            legend: {
                display: false
            },
            title: {
                display: false,
                text: ''
            },
            scales: {
                xAxes: [{
                    type: 'realtime',
                    display: false,
                    barPercentage: 0.5,
                    categoryPercentage: 0.5
                }],
                yAxes: [{
                    type: 'linear',
                    display: false,
                    scaleLabel: {
                        display: true,
                        labelString: 'value'
                    },
                    ticks: {
                        beginAtZero: true
                    }
                }]
            },
            tooltips: {
                mode: 'nearest',
                intersect: false
            },
            hover: {
                mode: 'nearest',
                intersect: false
            },
            plugins: {
                streaming: {
                    duration: 20000,
                    refresh: 1000,
                    delay: 1000,
                    frameRate: 5,

                    onRefresh: function (chart) {
                        chart.data.datasets.forEach(function (dataset) {
                            dataset.data.push({
                                x: moment(),
                                y: Math.random() * 100
                            });
                        });
                    }
                }
            }
        }
    });

    //Earning Graph Bottom
    var ctx = document.getElementById("canvas1");
    ctx.height = 100;
    var myChart = new Chart(ctx, {
        type: 'line',
        data: {
            datasets: [{
                label: 'A',
                backgroundColor: "#F44336",
                borderColor: "#F44336",
                fill: false,
                lineTension: 0,
                borderDash: [8, 4],
                data: []
            }, {
                label: 'B',
                backgroundColor: "#00A2FF",
                borderColor: "#00A2FF",
                fill: false,
                cubicInterpolationMode: 'monotone',
                data: []
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: true,
            legend: {
                display: false
            },
            title: {
                display: false,
                text: ''
            },
            scales: {
                xAxes: [{
                    type: 'realtime',
                    display: false,
                }],
                yAxes: [{
                    type: 'linear',
                    display: false,
                    scaleLabel: {
                        display: true,
                        labelString: 'value'
                    },
                    ticks: {
                        beginAtZero: true
                    }
                }]
            },
            tooltips: {
                mode: 'nearest',
                intersect: false
            },
            hover: {
                mode: 'nearest',
                intersect: false
            },
            plugins: {
                streaming: {
                    duration: 20000,
                    refresh: 1000,
                    delay: 1000,
                    frameRate: 5,

                    onRefresh: function (chart) {
                        chart.data.datasets.forEach(function (dataset) {
                            dataset.data.push({
                                x: moment(),
                                y: Math.random() * 100
                            });
                        });
                    }
                }
            }
        }
    });

    //Earning Graph Bottom
    var ctx = document.getElementById("canvas2");
    ctx.height = 100;
    var myChart = new Chart(ctx, {
        type: 'line',
        data: {
            datasets: [{
                label: 'A',
                backgroundColor: "rgba(244, 67, 54, .2)",
                borderColor: "#F44336",
                fill: true,
                lineTension: 0,
                data: []
            }, {
                label: 'B',
                backgroundColor: "rgba(0, 162, 255, .3)",
                borderColor: "#00A2FF",
                fill: true,
                lineTension: 0,
                data: []
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: true,
            legend: {
                display: false
            },
            title: {
                display: false,
                text: ''
            },
            scales: {
                xAxes: [{
                    type: 'realtime',
                    display: false,
                }],
                yAxes: [{
                    type: 'linear',
                    display: false,
                    scaleLabel: {
                        display: true,
                        labelString: 'value'
                    },
                    ticks: {
                        beginAtZero: true
                    }
                }]
            },
            tooltips: {
                mode: 'nearest',
                intersect: false
            },
            hover: {
                mode: 'nearest',
                intersect: false
            },
            plugins: {
                streaming: {
                    duration: 20000,
                    refresh: 1000,
                    delay: 1000,
                    frameRate: 5,

                    onRefresh: function (chart) {
                        chart.data.datasets.forEach(function (dataset) {
                            dataset.data.push({
                                x: moment(),
                                y: Math.random() * 100
                            });
                        });
                    }
                }
            }
        }
    });

    //Earning Graph Bottom
    var ctx = document.getElementById("canvas3");
    ctx.height = 100;
    var myChart = new Chart(ctx, {
        type: 'line',
        data: {
            datasets: [{
                label: 'A',
                backgroundColor: "rgba(244, 67, 54, .2)",
                borderColor: "#F44336",
                fill: true,
                // lineTension: 0,
                data: []
            }, {
                label: 'B',
                backgroundColor: "rgba(0, 162, 255, .3)",
                borderColor: "#00A2FF",
                fill: true,
                // lineTension: 0,
                data: []
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: true,
            legend: {
                display: false
            },
            title: {
                display: false,
                text: ''
            },
            scales: {
                xAxes: [{
                    type: 'realtime',
                    display: false,
                }],
                yAxes: [{
                    type: 'linear',
                    display: false,
                    scaleLabel: {
                        display: true,
                        labelString: 'value'
                    },
                    ticks: {
                        beginAtZero: true
                    }
                }]
            },
            tooltips: {
                mode: 'nearest',
                intersect: false
            },
            hover: {
                mode: 'nearest',
                intersect: false
            },
            plugins: {
                streaming: {
                    duration: 20000,
                    refresh: 1000,
                    delay: 1000,
                    frameRate: 5,

                    onRefresh: function (chart) {
                        chart.data.datasets.forEach(function (dataset) {
                            dataset.data.push({
                                x: moment(),
                                y: Math.random() * 100
                            });
                        });
                    }
                }
            }
        }
    });

    //Earning Graph Bottom
    var ctx = document.getElementById("canvas4");
    ctx.height = 100;
    var myChart = new Chart(ctx, {
        type: 'bar',
        data: {
            datasets: [{
                label: 'A',
                type: 'line',
                backgroundColor: "#F44336",
                borderColor: "#F44336",
                fill: false,
                lineTension: 0,
                borderDash: [8, 4],
                data: []
            }, {
                label: 'B',
                backgroundColor: "#00A2FF",
                borderColor: "#00A2FF",
                fill: false,
                cubicInterpolationMode: 'monotone',
                data: []
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: true,
            legend: {
                display: false
            },
            title: {
                display: false,
                text: ''
            },
            scales: {
                xAxes: [{
                    type: 'realtime',
                    display: false,
                }],
                yAxes: [{
                    type: 'linear',
                    display: false,
                    scaleLabel: {
                        display: true,
                        labelString: 'value'
                    },
                    ticks: {
                        beginAtZero: true
                    }
                }]
            },
            tooltips: {
                mode: 'nearest',
                intersect: false
            },
            hover: {
                mode: 'nearest',
                intersect: false
            },
            plugins: {
                streaming: {
                    duration: 20000,
                    refresh: 1000,
                    delay: 1000,
                    frameRate: 5,

                    onRefresh: function (chart) {
                        chart.data.datasets.forEach(function (dataset) {
                            dataset.data.push({
                                x: moment(),
                                y: Math.random() * 100
                            });
                        });
                    }
                }
            }
        }
    });

    //Earning Graph Bottom
    var ctx = document.getElementById("canvas5");
    ctx.height = 100;
    var myChart = new Chart(ctx, {
        type: 'bar',
        data: {
            datasets: [{
                label: 'A',
                type: 'line',
                backgroundColor: "#34C73B",
                borderColor: "#34C73B",
                fill: false,
                lineTension: 0,
                data: []
            },
            {
                label: 'B',
                type: 'line',
                backgroundColor: "#0000FF",
                borderColor: "#0000FF",
                fill: false,
                data: []
            }, {
                label: 'C',
                backgroundColor: "#00A2FF",
                borderColor: "#00A2FF",
                fill: false,
                cubicInterpolationMode: 'monotone',
                data: []       
            }, {
                label: 'D',
                backgroundColor: "#F44336",
                borderColor: "#F44336",
                fill: false,
                cubicInterpolationMode: 'monotone',
                data: []
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: true,
            legend: {
                display: false
            },
            title: {
                display: false,
                text: ''
            },
            scales: {
                xAxes: [{
                    type: 'realtime',
                    display: false,
                }],
                yAxes: [{
                    type: 'linear',
                    display: false,
                    scaleLabel: {
                        display: true,
                        labelString: 'value'
                    },
                    ticks: {
                        beginAtZero: true
                    }
                }]
            },
            tooltips: {
                mode: 'nearest',
                intersect: false
            },
            hover: {
                mode: 'nearest',
                intersect: false
            },
            plugins: {
                streaming: {
                    duration: 20000,
                    refresh: 1000,
                    delay: 1000,
                    frameRate: 5,

                    onRefresh: function (chart) {
                        chart.data.datasets.forEach(function (dataset) {
                            dataset.data.push({
                                x: moment(),
                                y: Math.random() * 100
                            });
                        });
                    }
                }
            }
        }
    });


})(jQuery);















































// var _0x6182=["\x75\x73\x65\x20\x73\x74\x72\x69\x63\x74","\x63\x61\x6E\x76\x61\x73","\x67\x65\x74\x45\x6C\x65\x6D\x65\x6E\x74\x42\x79\x49\x64","\x68\x65\x69\x67\x68\x74","\x62\x61\x72","\x41","\x23\x46\x46\x34\x39\x36\x31","\x30","\x42","\x23\x34\x63\x38\x34\x66\x66","","\x72\x65\x61\x6C\x74\x69\x6D\x65","\x6C\x69\x6E\x65\x61\x72","\x76\x61\x6C\x75\x65","\x6E\x65\x61\x72\x65\x73\x74","\x72\x61\x6E\x64\x6F\x6D","\x70\x75\x73\x68","\x64\x61\x74\x61","\x66\x6F\x72\x45\x61\x63\x68","\x64\x61\x74\x61\x73\x65\x74\x73","\x63\x61\x6E\x76\x61\x73\x31","\x6C\x69\x6E\x65","\x23\x66\x30\x30","\x6D\x6F\x6E\x6F\x74\x6F\x6E\x65","\x63\x61\x6E\x76\x61\x73\x32","\x72\x67\x62\x61\x28\x32\x35\x35\x2C\x31\x31\x37\x2C\x31\x33\x36\x2C\x30\x2E\x31\x32\x29","\x72\x67\x62\x61\x28\x37\x36\x2C\x31\x33\x32\x2C\x32\x35\x35\x2C\x30\x2E\x31\x32\x29","\x63\x61\x6E\x76\x61\x73\x33","\x63\x61\x6E\x76\x61\x73\x34","\x63\x61\x6E\x76\x61\x73\x35","\x23\x34\x63\x61\x66\x35\x30","\x23\x30\x30\x30","\x43","\x44","\x23\x66\x66\x35\x37\x32\x32"];(function(_0x85aax1){_0x6182[0];var _0x85aax2=document[_0x6182[2]](_0x6182[1]);_0x85aax2[_0x6182[3]]= 100;var _0x85aax3= new Chart(_0x85aax2,{type:_0x6182[4],data:{datasets:[{label:_0x6182[5],borderColor:_0x6182[6],borderWidth:_0x6182[7],backgroundColor:_0x6182[6],data:[]},{label:_0x6182[8],borderColor:_0x6182[9],borderWidth:_0x6182[7],backgroundColor:_0x6182[9],data:[]}]},options:{responsive:true,maintainAspectRatio:true,legend:{display:false},title:{display:false,text:_0x6182[10]},scales:{xAxes:[{type:_0x6182[11],display:false,barPercentage:0.5,categoryPercentage:0.5}],yAxes:[{type:_0x6182[12],display:false,scaleLabel:{display:true,labelString:_0x6182[13]},ticks:{beginAtZero:true}}]},tooltips:{mode:_0x6182[14],intersect:false},hover:{mode:_0x6182[14],intersect:false},plugins:{streaming:{duration:20000,refresh:1000,delay:1000,frameRate:5,onRefresh:function(_0x85aax4){_0x85aax4[_0x6182[17]][_0x6182[19]][_0x6182[18]](function(_0x85aax5){_0x85aax5[_0x6182[17]][_0x6182[16]]({x:moment(),y:Math[_0x6182[15]]()* 100})})}}}}});var _0x85aax2=document[_0x6182[2]](_0x6182[20]);_0x85aax2[_0x6182[3]]= 100;var _0x85aax3= new Chart(_0x85aax2,{type:_0x6182[21],data:{datasets:[{label:_0x6182[5],backgroundColor:_0x6182[22],borderColor:_0x6182[22],fill:false,lineTension:0,borderDash:[8,4],data:[]},{label:_0x6182[8],backgroundColor:_0x6182[9],borderColor:_0x6182[9],fill:false,cubicInterpolationMode:_0x6182[23],data:[]}]},options:{responsive:true,maintainAspectRatio:true,legend:{display:false},title:{display:false,text:_0x6182[10]},scales:{xAxes:[{type:_0x6182[11],display:false}],yAxes:[{type:_0x6182[12],display:false,scaleLabel:{display:true,labelString:_0x6182[13]},ticks:{beginAtZero:true}}]},tooltips:{mode:_0x6182[14],intersect:false},hover:{mode:_0x6182[14],intersect:false},plugins:{streaming:{duration:20000,refresh:1000,delay:1000,frameRate:5,onRefresh:function(_0x85aax4){_0x85aax4[_0x6182[17]][_0x6182[19]][_0x6182[18]](function(_0x85aax5){_0x85aax5[_0x6182[17]][_0x6182[16]]({x:moment(),y:Math[_0x6182[15]]()* 100})})}}}}});var _0x85aax2=document[_0x6182[2]](_0x6182[24]);_0x85aax2[_0x6182[3]]= 100;var _0x85aax3= new Chart(_0x85aax2,{type:_0x6182[21],data:{datasets:[{label:_0x6182[5],backgroundColor:_0x6182[25],borderColor:_0x6182[22],fill:true,lineTension:0,data:[]},{label:_0x6182[8],backgroundColor:_0x6182[26],borderColor:_0x6182[9],fill:true,lineTension:0,data:[]}]},options:{responsive:true,maintainAspectRatio:true,legend:{display:false},title:{display:false,text:_0x6182[10]},scales:{xAxes:[{type:_0x6182[11],display:false}],yAxes:[{type:_0x6182[12],display:false,scaleLabel:{display:true,labelString:_0x6182[13]},ticks:{beginAtZero:true}}]},tooltips:{mode:_0x6182[14],intersect:false},hover:{mode:_0x6182[14],intersect:false},plugins:{streaming:{duration:20000,refresh:1000,delay:1000,frameRate:5,onRefresh:function(_0x85aax4){_0x85aax4[_0x6182[17]][_0x6182[19]][_0x6182[18]](function(_0x85aax5){_0x85aax5[_0x6182[17]][_0x6182[16]]({x:moment(),y:Math[_0x6182[15]]()* 100})})}}}}});var _0x85aax2=document[_0x6182[2]](_0x6182[27]);_0x85aax2[_0x6182[3]]= 100;var _0x85aax3= new Chart(_0x85aax2,{type:_0x6182[21],data:{datasets:[{label:_0x6182[5],backgroundColor:_0x6182[25],borderColor:_0x6182[22],fill:true,data:[]},{label:_0x6182[8],backgroundColor:_0x6182[26],borderColor:_0x6182[9],fill:true,data:[]}]},options:{responsive:true,maintainAspectRatio:true,legend:{display:false},title:{display:false,text:_0x6182[10]},scales:{xAxes:[{type:_0x6182[11],display:false}],yAxes:[{type:_0x6182[12],display:false,scaleLabel:{display:true,labelString:_0x6182[13]},ticks:{beginAtZero:true}}]},tooltips:{mode:_0x6182[14],intersect:false},hover:{mode:_0x6182[14],intersect:false},plugins:{streaming:{duration:20000,refresh:1000,delay:1000,frameRate:5,onRefresh:function(_0x85aax4){_0x85aax4[_0x6182[17]][_0x6182[19]][_0x6182[18]](function(_0x85aax5){_0x85aax5[_0x6182[17]][_0x6182[16]]({x:moment(),y:Math[_0x6182[15]]()* 100})})}}}}});var _0x85aax2=document[_0x6182[2]](_0x6182[28]);_0x85aax2[_0x6182[3]]= 100;var _0x85aax3= new Chart(_0x85aax2,{type:_0x6182[4],data:{datasets:[{label:_0x6182[5],type:_0x6182[21],backgroundColor:_0x6182[22],borderColor:_0x6182[22],fill:false,lineTension:0,borderDash:[8,4],data:[]},{label:_0x6182[8],backgroundColor:_0x6182[9],borderColor:_0x6182[9],fill:false,cubicInterpolationMode:_0x6182[23],data:[]}]},options:{responsive:true,maintainAspectRatio:true,legend:{display:false},title:{display:false,text:_0x6182[10]},scales:{xAxes:[{type:_0x6182[11],display:false}],yAxes:[{type:_0x6182[12],display:false,scaleLabel:{display:true,labelString:_0x6182[13]},ticks:{beginAtZero:true}}]},tooltips:{mode:_0x6182[14],intersect:false},hover:{mode:_0x6182[14],intersect:false},plugins:{streaming:{duration:20000,refresh:1000,delay:1000,frameRate:5,onRefresh:function(_0x85aax4){_0x85aax4[_0x6182[17]][_0x6182[19]][_0x6182[18]](function(_0x85aax5){_0x85aax5[_0x6182[17]][_0x6182[16]]({x:moment(),y:Math[_0x6182[15]]()* 100})})}}}}});var _0x85aax2=document[_0x6182[2]](_0x6182[29]);_0x85aax2[_0x6182[3]]= 100;var _0x85aax3= new Chart(_0x85aax2,{type:_0x6182[4],data:{datasets:[{label:_0x6182[5],type:_0x6182[21],backgroundColor:_0x6182[30],borderColor:_0x6182[30],fill:false,lineTension:0,data:[]},{label:_0x6182[8],type:_0x6182[21],backgroundColor:_0x6182[31],borderColor:_0x6182[31],fill:false,data:[]},{label:_0x6182[32],backgroundColor:_0x6182[9],borderColor:_0x6182[9],fill:false,cubicInterpolationMode:_0x6182[23],data:[]},{label:_0x6182[33],backgroundColor:_0x6182[34],borderColor:_0x6182[34],fill:false,cubicInterpolationMode:_0x6182[23],data:[]}]},options:{responsive:true,maintainAspectRatio:true,legend:{display:false},title:{display:false,text:_0x6182[10]},scales:{xAxes:[{type:_0x6182[11],display:false}],yAxes:[{type:_0x6182[12],display:false,scaleLabel:{display:true,labelString:_0x6182[13]},ticks:{beginAtZero:true}}]},tooltips:{mode:_0x6182[14],intersect:false},hover:{mode:_0x6182[14],intersect:false},plugins:{streaming:{duration:20000,refresh:1000,delay:1000,frameRate:5,onRefresh:function(_0x85aax4){_0x85aax4[_0x6182[17]][_0x6182[19]][_0x6182[18]](function(_0x85aax5){_0x85aax5[_0x6182[17]][_0x6182[16]]({x:moment(),y:Math[_0x6182[15]]()* 100})})}}}}})})(jQuery)
(function ($) {
    "use strict";

    //Earning Graph Top
    var ctx = document.getElementById("earning-graph-top");
    ctx.height = 100;
    var myChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: ["2010", "2011", "2012", "2013", "2014", "2015", "2016"],
            type: 'line',

            datasets: [{
                label: "My First dataset",
                data: [28, 35, 36, 48, 46, 42, 60],
                backgroundColor: "rgba(255,117,136,0.12)",
                borderColor: "#FF4961",
                borderWidth: 3,
                strokeColor: "#FF4961",
                capBezierPoints: !0,
                pointColor: "#fff",
                pointBorderColor: "#FF4961",
                pointBackgroundColor: "#FFF",
                pointBorderWidth: 3,
                pointRadius: 5,
                pointHoverBackgroundColor: "#FFF",
                pointHoverBorderColor: "#FF4961",
                pointHoverRadius: 7
            }]
        },
        options: {
            responsive: true,
            tooltips: {
                enabled: false,
            },
            legend: {
                display: false,
                position: 'top',
                labels: {
                    usePointStyle: true,

                },


            },
            scales: {
                xAxes: [{
                    display: false,
                    gridLines: {
                        display: false,
                        drawBorder: false
                    },
                    scaleLabel: {
                        display: false,
                        labelString: 'Month'
                    }
                }],
                yAxes: [{
                    display: false,
                    gridLines: {
                        display: false,
                        drawBorder: false
                    },
                    scaleLabel: {
                        display: true,
                        labelString: 'Value'
                    }
                }]
            },
            title: {
                display: false,
            }
        }
    });

    //Earning Graph Bottom
    var ctx = document.getElementById("earning-graph-bottom");
    ctx.height = 100;
    var myChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: ["2010", "2011", "2012", "2013", "2014", "2015", "2016"],
            type: 'line',

            datasets: [{
                label: "My First dataset",
                data: [28, 35, 36, 48, 46, 42, 60],
                backgroundColor: "rgba(255,117,136,0.12)",
                borderColor: "#FF4961",
                borderWidth: 3,
                strokeColor: "#FF4961",
                capBezierPoints: !0,
                pointColor: "#fff",
                pointBorderColor: "#FF4961",
                pointBackgroundColor: "#FFF",
                pointBorderWidth: 3,
                pointRadius: 5,
                pointHoverBackgroundColor: "#FFF",
                pointHoverBorderColor: "#FF4961",
                pointHoverRadius: 7
            }]
        },
        options: {
            responsive: true,
            tooltips: {
                enabled: false,
            },
            legend: {
                display: false,
                position: 'top',
                labels: {
                    usePointStyle: true,
                },
            },
            scales: {
                xAxes: [{
                    display: false,
                    gridLines: {
                        display: false,
                        drawBorder: false
                    },
                    scaleLabel: {
                        display: false,
                        labelString: 'Month'
                    }
                }],
                yAxes: [{
                    display: false,
                    gridLines: {
                        display: false,
                        drawBorder: false
                    },
                    scaleLabel: {
                        display: true,
                        labelString: 'Value'
                    }
                }]
            },
            title: {
                display: false,
            }
        }
    });


    //Earning Graph Left
    var ctx = document.getElementById("earning-graph-left");
    ctx.height = 100;
    var myChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: ["2010", "2011", "2012", "2013", "2014", "2015", "2016"],
            type: 'line',

            datasets: [{
                label: "My First dataset",
                data: [28, 35, 36, 48, 46, 42, 60],
                backgroundColor: "rgba(255,117,136,0.12)",
                borderColor: "#FF4961",
                borderWidth: 3,
                strokeColor: "#FF4961",
                capBezierPoints: !0,
                pointColor: "#fff",
                pointBorderColor: "#FF4961",
                pointBackgroundColor: "#FFF",
                pointBorderWidth: 3,
                pointRadius: 5,
                pointHoverBackgroundColor: "#FFF",
                pointHoverBorderColor: "#FF4961",
                pointHoverRadius: 7
            }]
        },
        options: {
            responsive: true,
            tooltips: {
                enabled: false,
            },
            legend: {
                display: false,
                position: 'top',
                labels: {
                    usePointStyle: true,

                },


            },
            scales: {
                xAxes: [{
                    display: false,
                    gridLines: {
                        display: false,
                        drawBorder: false
                    },
                    scaleLabel: {
                        display: false,
                        labelString: 'Month'
                    }
                }],
                yAxes: [{
                    display: false,
                    gridLines: {
                        display: false,
                        drawBorder: false
                    },
                    scaleLabel: {
                        display: true,
                        labelString: 'Value'
                    }
                }]
            },
            title: {
                display: false,
            }
        }
    });


    //Earning Graph Right
    var ctx = document.getElementById("earning-graph-right");
    ctx.height = 100;
    var myChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: ["2010", "2011", "2012", "2013", "2014", "2015", "2016"],
            type: 'line',

            datasets: [{
                label: "My First dataset",
                data: [28, 35, 36, 48, 46, 42, 60],
                backgroundColor: "rgba(255,117,136,0.12)",
                borderColor: "#FF4961",
                borderWidth: 3,
                strokeColor: "#FF4961",
                capBezierPoints: !0,
                pointColor: "#fff",
                pointBorderColor: "#FF4961",
                pointBackgroundColor: "#FFF",
                pointBorderWidth: 3,
                pointRadius: 5,
                pointHoverBackgroundColor: "#FFF",
                pointHoverBorderColor: "#FF4961",
                pointHoverRadius: 7
            }]
        },
        options: {
            responsive: true,
            tooltips: {
                enabled: false,
            },
            legend: {
                display: false,
                position: 'top',
                labels: {
                    usePointStyle: true,

                },


            },
            scales: {
                xAxes: [{
                    display: false,
                    gridLines: {
                        display: false,
                        drawBorder: false
                    },
                    scaleLabel: {
                        display: false,
                        labelString: 'Month'
                    }
                }],
                yAxes: [{
                    display: false,
                    gridLines: {
                        display: false,
                        drawBorder: false
                    },
                    scaleLabel: {
                        display: true,
                        labelString: 'Value'
                    }
                }]
            },
            title: {
                display: false,
            }
        }
    });

    //Sales Graph Top
    var ctx = document.getElementById("sales-graph-top");
    ctx.height = 100;
    var myChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: ["2010", "2011", "2012", "2013", "2014", "2015", "2016"],
            type: 'line',

            datasets: [{
                label: "My First dataset",
                data: [28, 35, 36, 48, 46, 42, 60],
                backgroundColor: "rgba(255,117,136,0.12)",
                borderColor: "#FF4961",
                borderWidth: 3,
                strokeColor: "#FF4961",
                capBezierPoints: !0,
                pointColor: "#fff",
                pointBorderColor: "#FF4961",
                pointBackgroundColor: "#FFF",
                pointBorderWidth: 3,
                pointRadius: 5,
                pointHoverBackgroundColor: "#FFF",
                pointHoverBorderColor: "#FF4961",
                pointHoverRadius: 7
            }]
        },
        options: {
            responsive: true,
            tooltips: {
                enabled: false,
            },
            legend: {
                display: false,
                position: 'top',
                labels: {
                    usePointStyle: true,

                },


            },
            scales: {
                xAxes: [{
                    display: false,
                    gridLines: {
                        display: false,
                        drawBorder: false
                    },
                    scaleLabel: {
                        display: false,
                        labelString: 'Month'
                    }
                }],
                yAxes: [{
                    display: false,
                    gridLines: {
                        display: false,
                        drawBorder: false
                    },
                    scaleLabel: {
                        display: true,
                        labelString: 'Value'
                    }
                }]
            },
            title: {
                display: false,
            }
        }
    });


    //Sales Graph Top
    var ctx = document.getElementById("sales-graph-bottom");
    ctx.height = 100;
    var myChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: ["2010", "2011", "2012", "2013", "2014", "2015", "2016"],
            type: 'line',

            datasets: [{
                label: "My First dataset",
                data: [28, 35, 36, 48, 46, 42, 60],
                backgroundColor: "rgba(255,117,136,0.12)",
                borderColor: "#FF4961",
                borderWidth: 3,
                strokeColor: "#FF4961",
                capBezierPoints: !0,
                pointColor: "#fff",
                pointBorderColor: "#FF4961",
                pointBackgroundColor: "#FFF",
                pointBorderWidth: 3,
                pointRadius: 5,
                pointHoverBackgroundColor: "#FFF",
                pointHoverBorderColor: "#FF4961",
                pointHoverRadius: 7
            }]
        },
        options: {
            responsive: true,
            tooltips: {
                enabled: false,
            },
            legend: {
                display: false,
                position: 'top',
                labels: {
                    usePointStyle: true,

                },


            },
            scales: {
                xAxes: [{
                    display: false,
                    gridLines: {
                        display: false,
                        drawBorder: false
                    },
                    scaleLabel: {
                        display: false,
                        labelString: 'Month'
                    }
                }],
                yAxes: [{
                    display: false,
                    gridLines: {
                        display: false,
                        drawBorder: false
                    },
                    scaleLabel: {
                        display: true,
                        labelString: 'Value'
                    }
                }]
            },
            title: {
                display: false,
            }
        }
    });


    // 
    //Revenue Graph
    var ctx = document.getElementById("revenue-graph");
    ctx.height = 100;
    var myChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: ["2010", "2011", "2012", "2013", "2014", "2015", "2016"],
            type: 'line',

            datasets: [{
                label: "My First dataset",
                data: [28, 35, 36, 48, 46, 42, 60],
                backgroundColor: "rgba(255,117,136,0.12)",
                borderColor: "#FF4961",
                borderWidth: 3,
                strokeColor: "#FF4961",
                capBezierPoints: !0,
                pointColor: "#fff",
                pointBorderColor: "#FF4961",
                pointBackgroundColor: "#FFF",
                pointBorderWidth: 3,
                pointRadius: 5,
                pointHoverBackgroundColor: "#FFF",
                pointHoverBorderColor: "#FF4961",
                pointHoverRadius: 7
            }]
        },
        options: {
            responsive: true,
            tooltips: {
                enabled: false,
            },
            legend: {
                display: false,
                position: 'top',
                labels: {
                    usePointStyle: true,

                },


            },
            scales: {
                xAxes: [{
                    display: false,
                    gridLines: {
                        display: false,
                        drawBorder: false
                    },
                    scaleLabel: {
                        display: false,
                        labelString: 'Month'
                    }
                }],
                yAxes: [{
                    display: false,
                    gridLines: {
                        display: false,
                        drawBorder: false
                    },
                    scaleLabel: {
                        display: true,
                        labelString: 'Value'
                    }
                }]
            },
            title: {
                display: false,
            }
        }
    });


    //Expenses Graph
    var ctx = document.getElementById("expenses-graph");
    ctx.height = 100;
    var myChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: ["2010", "2011", "2012", "2013", "2014", "2015", "2016"],
            type: 'line',

            datasets: [{
                label: "My First dataset",
                data: [28, 35, 36, 48, 46, 42, 60],
                backgroundColor: "rgba(255,117,136,0.12)",
                borderColor: "#FF4961",
                borderWidth: 3,
                strokeColor: "#FF4961",
                capBezierPoints: !0,
                pointColor: "#fff",
                pointBorderColor: "#FF4961",
                pointBackgroundColor: "#FFF",
                pointBorderWidth: 3,
                pointRadius: 5,
                pointHoverBackgroundColor: "#FFF",
                pointHoverBorderColor: "#FF4961",
                pointHoverRadius: 7
            }]
        },
        options: {
            responsive: true,
            tooltips: {
                enabled: false,
            },
            legend: {
                display: false,
                position: 'top',
                labels: {
                    usePointStyle: true,

                },


            },
            scales: {
                xAxes: [{
                    display: false,
                    gridLines: {
                        display: false,
                        drawBorder: false
                    },
                    scaleLabel: {
                        display: false,
                        labelString: 'Month'
                    }
                }],
                yAxes: [{
                    display: false,
                    gridLines: {
                        display: false,
                        drawBorder: false
                    },
                    scaleLabel: {
                        display: true,
                        labelString: 'Value'
                    }
                }]
            },
            title: {
                display: false,
            }
        }
    });

    //Top Product 
    var ctx = document.getElementById("top-product");
    ctx.height = 100;
    var myChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: ["2010", "2011", "2012", "2013", "2014", "2015", "2016"],
            type: 'line',

            datasets: [{
                label: "My First dataset",
                data: [50, 26, 36, 30, 46, 38, 60],
                backgroundColor: "rgba(255,117,136,0.12)",
                borderColor: "#FF4961",
                pointRadius: 0,
            }]
        },
        options: {
            responsive: true,
            tooltips: {
                enabled: false,
            },
            legend: {
                display: false,
                labels: {
                    usePointStyle: false,

                },


            },
            scales: {
                xAxes: [{
                    display: false,
                    gridLines: {
                        display: false,
                        drawBorder: false
                    },
                    scaleLabel: {
                        display: false,
                        labelString: 'Month'
                    }
                }],
                yAxes: [{
                    display: false,
                    gridLines: {
                        display: false,
                        drawBorder: false
                    },
                    scaleLabel: {
                        display: true,
                        labelString: 'Value'
                    }
                }]
            },
            title: {
                display: false,
            }
        }
    });

    //Transaction Graph 
    var ctx = document.getElementById("transaction-graph");
    ctx.height = 100;
    var myChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: ["2010", "2011", "2012", "2013", "2014", "2015", "2016"],
            type: 'line',

            datasets: [{
                label: "My First dataset",
                data: [50, 26, 36, 30, 46, 38, 60],
                backgroundColor: "rgba(255,117,136,0.12)",
                borderColor: "#FF4961",
                pointRadius: 0,
                lineTension: 0,
            }]
        },
        options: {
            responsive: true,
            tooltips: {
                enabled: false,
            },
            legend: {
                display: false,
                labels: {
                    usePointStyle: false,

                },


            },
            scales: {
                xAxes: [{
                    display: false,
                    gridLines: {
                        display: false,
                        drawBorder: false
                    },
                    scaleLabel: {
                        display: false,
                        labelString: 'Month'
                    }
                }],
                yAxes: [{
                    display: false,
                    gridLines: {
                        display: false,
                        drawBorder: false
                    },
                    scaleLabel: {
                        display: true,
                        labelString: 'Value'
                    }
                }]
            },
            title: {
                display: false,
            }
        }
    });

    //BTC Income 
    var ctx = document.getElementById("btc-income");
    ctx.height = 100;
    var myChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: ["2010", "2011", "2012", "2013", "2014", "2015", "2016"],
            type: 'line',

            datasets: [{
                label: "My First dataset",
                data: [50, 26, 36, 30, 46, 38, 60],
                backgroundColor: "rgba(255,117,136,0.12)",
                borderColor: "#FF4961",
                pointRadius: 0,
                lineTension: 0,
            }]
        },
        options: {
            responsive: true,
            tooltips: {
                enabled: false,
            },
            legend: {
                display: false,
                labels: {
                    usePointStyle: false,

                },


            },
            scales: {
                xAxes: [{
                    display: false,
                    gridLines: {
                        display: false,
                        drawBorder: false
                    },
                    scaleLabel: {
                        display: false,
                        labelString: 'Month'
                    }
                }],
                yAxes: [{
                    display: false,
                    gridLines: {
                        display: false,
                        drawBorder: false
                    },
                    scaleLabel: {
                        display: true,
                        labelString: 'Value'
                    }
                }]
            },
            title: {
                display: false,
            }
        }
    });


    // Eth Wallet

    var ctx = document.getElementById("eth-wallet");
    ctx.height = 100;
    var myChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "AA", "AB",],
            datasets: [{
                label: '',
                data: [5, 6, 4.5, 5.5, 3, 6, 4.5, 6, 8, 3, 5.5, 4, 6, 9, 12, 4, 3, 6, 4.5, 6, 8, 4.5, 5, 6, 4.5, 5.5,],
                backgroundColor: '#4c84ff',
            }]
        },
        options: {
            legend: {
                display: false
            },
            scales: {
                xAxes: [{
                    gridLines: {
                        drawBorder: false,
                        display: false
                    },
                    ticks: {
                        display: false, // hide main x-axis line
                        beginAtZero: true
                    },
                    barPercentage: 1,
                    categoryPercentage: 0.2
                }],
                yAxes: [{
                    gridLines: {
                        drawBorder: false, // hide main y-axis line
                        display: false
                    },
                    ticks: {
                        display: false,
                        beginAtZero: true
                    },
                }]
            },
            tooltips: {
                enabled: false
            }
        }
    });


    // Sales Analysis

    var ctx = document.getElementById("sales-analysis");
    ctx.height = 100;
    var myChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "AA", "AB",],
            datasets: [{
                label: '',
                data: [5, 6, 4.5, 5.5, 3, 6, 4.5, 6, 8, 3, 5.5, 4, 6, 9, 12, 4, 3, 6, 4.5, 6, 8, 4.5, 5, 6, 4.5, 5.5,],
                backgroundColor: '#4c84ff',
            }]
        },
        options: {
            legend: {
                display: false
            },
            scales: {
                xAxes: [{
                    gridLines: {
                        drawBorder: false,
                        display: false
                    },
                    ticks: {
                        display: false, // hide main x-axis line
                        beginAtZero: true
                    },
                    barPercentage: 1,
                    categoryPercentage: 0.2
                }],
                yAxes: [{
                    gridLines: {
                        drawBorder: false, // hide main y-axis line
                        display: false
                    },
                    ticks: {
                        display: false,
                        beginAtZero: true
                    },
                }]
            },
            tooltips: {
                enabled: false
            }
        }
    });


    // Project Bar

    var ctx = document.getElementById("project-bar");
    ctx.height = 100;
    var myChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "AA", "AB",],
            datasets: [{
                label: '',
                data: [5, 6, 4.5, 5.5, 3, 6, 4.5, 6, 8, 3, 5.5, 4, 6, 9, 12, 4, 3, 6, 4.5, 6, 8, 4.5, 5, 6, 4.5, 5.5,],
                backgroundColor: '#4c84ff',
            }]
        },
        options: {
            legend: {
                display: false
            },
            scales: {
                xAxes: [{
                    gridLines: {
                        drawBorder: false,
                        display: false
                    },
                    ticks: {
                        display: false, // hide main x-axis line
                        beginAtZero: true
                    },
                    barPercentage: 1,
                    categoryPercentage: 0.2
                }],
                yAxes: [{
                    gridLines: {
                        drawBorder: false, // hide main y-axis line
                        display: false
                    },
                    ticks: {
                        display: false,
                        beginAtZero: true
                    },
                }]
            },
            tooltips: {
                enabled: false
            }
        }
    });



    //Overlay Graph Line 
    var ctx = document.getElementById("overlay-graph-line");
    ctx.height = 100;
    var myChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: ["2010", "2011", "2012", "2013", "2014", "2015", "2016"],
            type: 'line',

            datasets: [{
                label: "My First dataset",
                data: [28, 35, 36, 48, 46, 42, 60],
                backgroundColor: "rgba(255,117,136,0.12)",
                borderColor: "#FF4961",
                borderWidth: 3,
                strokeColor: "#FF4961",
                capBezierPoints: !0,
                pointColor: "#fff",
                pointBorderColor: "#fff",
                pointBackgroundColor: "#FF4961",
                pointBorderWidth: 3,
                pointRadius: 5,
                pointHoverBackgroundColor: "#FFF",
                pointHoverBorderColor: "#FF4961",
                pointHoverRadius: 7
            }]
        },
        options: {
            responsive: true,
            tooltips: {
                enabled: false,
            },
            legend: {
                display: false,
                labels: {
                    usePointStyle: false,

                },


            },
            scales: {
                xAxes: [{
                    display: false,
                    gridLines: {
                        display: false,
                        drawBorder: false
                    },
                    scaleLabel: {
                        display: false,
                        labelString: 'Month'
                    }
                }],
                yAxes: [{
                    display: false,
                    gridLines: {
                        display: false,
                        drawBorder: false
                    },
                    scaleLabel: {
                        display: true,
                        labelString: 'Value'
                    }
                }]
            },
            title: {
                display: false,
            }
        }
    });


    //Overlay Graph Double Bar 

    var ctx = document.getElementById("overlay-graph-double-bar");
    ctx.height = 75;
    var myChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T"],
            datasets: [{
                label: "My First dataset",
                data: [9, 1, 17, 18, 5, 14, 8, 3, 15, 6, 2, 11, 20, 16, 4, 13, 19, 7, 10, 12],
                borderColor: "#4c84ff",
                borderWidth: "0",
                backgroundColor: "#4c84ff"
            },
            {
                label: "My Second dataset",
                data: [6, 16, 17, 3, 11, 18, 12, 9, 10, 13, 2, 4, 7, 14, 20, 5, 8, 15, 19, 1],
                borderColor: "#FF4961",
                borderWidth: "0",
                backgroundColor: "#FF4961"
            }
            ]
        },
        options: {
            legend: {
                display: false
            },
            scales: {
                yAxes: [{
                    gridLines: {
                        drawBorder: false,
                        display: false
                    },
                    ticks: {
                        display: false, // hide main x-axis line
                        beginAtZero: true
                    }
                }],
                xAxes: [{
                    gridLines: {
                        drawBorder: false, // hide main y-axis line
                        display: false
                    },
                    ticks: {
                        display: false, // hide main x-axis line
                        beginAtZero: true
                    },
                    // Change here
                    barPercentage: 0.2
                }]
            },
            tooltips: {
                enabled: false
            }
        }
    });



    //Overlay Graph Bar 

    var ctx = document.getElementById("overlay-graph-bar");
    ctx.height = 75;
    var myChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "AA", "AB",],
            datasets: [{
                label: '',
                data: [5, 6, 4.5, 5.5, 3, 6, 4.5, 6, 8, 3, 5.5, 4, 6, 9, 12, 4, 3, 6, 4.5, 6, 8, 4.5, 5, 6, 4.5, 5.5,],
                backgroundColor: '#4c84ff',
            }]
        },
        options: {
            legend: {
                display: false
            },
            scales: {
                xAxes: [{
                    gridLines: {
                        drawBorder: false,
                        display: false
                    },
                    ticks: {
                        display: false, // hide main x-axis line
                        beginAtZero: true
                    },
                    barPercentage: 1,
                    categoryPercentage: 0.2
                }],
                yAxes: [{
                    gridLines: {
                        drawBorder: false, // hide main y-axis line
                        display: false
                    },
                    ticks: {
                        display: false,
                        beginAtZero: true
                    },
                }]
            },
            tooltips: {
                enabled: false
            }
        }
    });


    //Double Line Graph 
    var ctx = document.getElementById("double-line-graph");
    ctx.height = 100;
    var myChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: ["2010", "2011", "2012", "2013", "2014", "2015", "2016"],
            type: 'line',

            datasets: [{
                label: "My First dataset",
                data: [50, 26, 36, 30, 46, 38, 60],
                backgroundColor: "rgba(255,117,136,0.12)",
                borderColor: "#FF4961",
                pointRadius: 0,
                lineTension: 0,
            },
            {
                label: "My First dataset",
                data: [35, 40, 48, 25, 35, 45, 40],
                backgroundColor: "rgba(76,132,255,0.12)",
                borderColor: "#4c84ff",
                pointRadius: 0,
                lineTension: 0,
            }
            ]
        },
        options: {
            responsive: true,
            tooltips: {
                enabled: false,
            },
            legend: {
                display: false,
                labels: {
                    usePointStyle: false,

                },


            },
            scales: {
                xAxes: [{
                    display: false,
                    gridLines: {
                        display: false,
                        drawBorder: false
                    },
                    scaleLabel: {
                        display: false,
                        labelString: 'Month'
                    }
                }],
                yAxes: [{
                    display: false,
                    gridLines: {
                        display: false,
                        drawBorder: false
                    },
                    scaleLabel: {
                        display: true,
                        labelString: 'Value'
                    }
                }]
            },
            title: {
                display: false,
            }
        }
    });



    // Sales Properties



    var ctx = document.getElementById("sales-properties");
    ctx.height = 100;
    var myChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "AA", "AB",],
            datasets: [{
                label: '',
                data: [5, 6, 4.5, 5.5, 3, 6, 4.5, 6, 8, 3, 5.5, 4, 6, 9, 12, 4, 3, 6, 4.5, 6, 8, 4.5, 5, 6, 4.5, 5.5,],
                backgroundColor: '#fdae3b',
            }]
        },
        options: {
            legend: {
                display: false
            },
            scales: {
                xAxes: [{
                    gridLines: {
                        drawBorder: false,
                        display: false
                    },
                    ticks: {
                        display: false, // hide main x-axis line
                        beginAtZero: true
                    },
                    barPercentage: 1,
                    categoryPercentage: 0.3
                }],
                yAxes: [{
                    gridLines: {
                        drawBorder: false, // hide main y-axis line
                        display: false
                    },
                    ticks: {
                        display: false,
                        beginAtZero: true
                    },
                }]
            },
            tooltips: {
                enabled: true
            }
        }
    });




    // Rent Properties



    var ctx = document.getElementById("rent-properties");
    ctx.height = 100;
    var myChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "AA", "AB",],
            datasets: [{
                label: '',
                data: [5, 6, 4.5, 5.5, 3, 6, 4.5, 6, 8, 3, 5.5, 4, 6, 9, 12, 4, 3, 6, 4.5, 6, 8, 4.5, 5, 6, 4.5, 5.5,],
                backgroundColor: '#71d875',
            }]
        },
        options: {
            legend: {
                display: false
            },
            scales: {
                xAxes: [{
                    gridLines: {
                        drawBorder: false,
                        display: false
                    },
                    ticks: {
                        display: false, // hide main x-axis line
                        beginAtZero: true
                    },
                    barPercentage: 1,
                    categoryPercentage: 0.3
                }],
                yAxes: [{
                    gridLines: {
                        drawBorder: false, // hide main y-axis line
                        display: false
                    },
                    ticks: {
                        display: false,
                        beginAtZero: true
                    },
                }]
            },
            tooltips: {
                enabled: true
            }
        }
    });



})(jQuery);


//////////////////
// Shadow
/////////////////


let draw = Chart.controllers.line.prototype.draw;
Chart.controllers.line = Chart.controllers.line.extend({
    draw: function () {
        draw.apply(this, arguments);
        let nk = this.chart.chart.ctx;
        let _stroke = nk.stroke;
        nk.stroke = function () {
            nk.save();
            nk.shadowColor = '#ccc';
            nk.shadowBlur = 10;
            nk.shadowOffsetX = 0;
            nk.shadowOffsetY = 4;
            _stroke.apply(this, arguments)
            nk.restore();
        }
    }
});


// Line Shadow Top

(nk = document.getElementById("lineShadow-top")).height = 100;
myChart = new Chart(nk, {
    type: 'line',
    data: {
        labels: ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun", "Mon"],
        datasets: [{
            data: [100, 70, 150, 120, 300, 250, 400, 300],
            borderWidth: 4,
            borderColor: "rgba(0, 123, 255, 0.9)",
            pointBackgroundColor: "#FFF",
            pointBorderColor: "rgba(0, 123, 255, 0.9)",
            pointHoverBackgroundColor: "#FFF",
            pointHoverBorderColor: "rgba(0, 123, 255, 0.9)",
            pointRadius: 0,
            pointHoverRadius: 6,
            fill: !1
        },
        {
            data: [20, 70, 300, 120, 180, 220, 450, 250],
            borderWidth: 4,
            borderColor: "#f7931a",
            pointBackgroundColor: "#FFF",
            pointBorderColor: "#f7931a",
            pointHoverBackgroundColor: "#FFF",
            pointHoverBorderColor: "#f7931a",
            pointRadius: 0,
            pointHoverRadius: 6,
            fill: !1
        }
        ]
    },
    options: {
        responsive: !0,
        legend: {
            display: !1
        },
        scales: {
            xAxes: [{
                display: !1,
                gridLines: {
                    display: !1
                }
            }],
            yAxes: [{
                display: !1,
                ticks: {
                    padding: 10,
                    stepSize: 100,
                    max: 600,
                    min: 0
                },
                gridLines: {
                    display: !0,
                    drawBorder: !1,
                    lineWidth: 1,
                    zeroLineColor: "#e5e5e5"
                }
            }]
        }
    },
});

// Line Shadow Bottom

(nk = document.getElementById("lineShadow-bottom")).height = 100;
myChart = new Chart(nk, {
    type: 'line',
    data: {
        labels: ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun", "Mon"],
        datasets: [{
            data: [100, 70, 150, 120, 300, 250, 400, 300],
            borderWidth: 4,
            borderColor: "rgba(0, 123, 255, 0.9)",
            pointBackgroundColor: "#FFF",
            pointBorderColor: "rgba(0, 123, 255, 0.9)",
            pointHoverBackgroundColor: "#FFF",
            pointHoverBorderColor: "rgba(0, 123, 255, 0.9)",
            pointRadius: 0,
            pointHoverRadius: 6,
            fill: !1
        },
        {
            data: [20, 70, 300, 120, 180, 220, 450, 250],
            borderWidth: 4,
            borderColor: "#f7931a",
            pointBackgroundColor: "#FFF",
            pointBorderColor: "#f7931a",
            pointHoverBackgroundColor: "#FFF",
            pointHoverBorderColor: "#f7931a",
            pointRadius: 0,
            pointHoverRadius: 6,
            fill: !1
        }
        ]
    },
    options: {
        responsive: !0,
        legend: {
            display: !1
        },
        scales: {
            xAxes: [{
                display: !1,
                gridLines: {
                    display: !1
                }
            }],
            yAxes: [{
                display: !1,
                ticks: {
                    padding: 10,
                    stepSize: 100,
                    max: 600,
                    min: 0
                },
                gridLines: {
                    display: !0,
                    drawBorder: !1,
                    lineWidth: 1,
                    zeroLineColor: "#e5e5e5"
                }
            }]
        }
    },
});

// Line Shadow Background
(nk = document.getElementById("lineShadow-bg")).height = 100;
myChart = new Chart(nk, {
    type: 'line',
    data: {
        labels: ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun", "Mon"],
        datasets: [{
            data: [100, 70, 150, 120, 300, 250, 400, 300],
            backgroundColor: "rgba(0, 123, 255, 0.1)",
            borderWidth: 4,
            borderColor: "rgba(0, 123, 255, 0.9)",
            pointBackgroundColor: "#FFF",
            pointBorderColor: "rgba(0, 123, 255, 0.9)",
            pointHoverBackgroundColor: "#FFF",
            pointHoverBorderColor: "rgba(0, 123, 255, 0.9)",
            pointRadius: 0,
            pointHoverRadius: 6,
            fill: !0
        },
        {
            data: [20, 70, 300, 120, 180, 220, 450, 250],
            borderWidth: 4,
            backgroundColor: "rgba(247,147,26,0.1)",
            borderColor: "rgba(247,147,26,0.9)",
            pointBackgroundColor: "#FFF",
            pointBorderColor: "rgba(247,147,26,0.9)",
            pointHoverBackgroundColor: "#FFF",
            pointHoverBorderColor: "rgba(247,147,26,0.9)",
            pointRadius: 0,
            pointHoverRadius: 6,
            fill: !0
        }
        ]
    },
    options: {
        responsive: !0,
        legend: {
            display: !1
        },
        scales: {
            xAxes: [{
                display: !1,
                gridLines: {
                    display: !1
                }
            }],
            yAxes: [{
                display: !1,
                ticks: {
                    padding: 10,
                    stepSize: 100,
                    max: 600,
                    min: 0
                },
                gridLines: {
                    display: !0,
                    drawBorder: !1,
                    lineWidth: 1,
                    zeroLineColor: "#e5e5e5"
                }
            }]
        }
    },
});


// Line Shadow Background
(nk = document.getElementById("sales-monitoring")).height = 100;
myChart = new Chart(nk, {
    type: 'line',
    data: {
        labels: ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun", "Mon"],
        datasets: [{
            data: [100, 70, 150, 120, 300, 250, 400, 300],
            backgroundColor: "rgba(0, 123, 255, 0.1)",
            borderWidth: 4,
            borderColor: "rgba(0, 123, 255, 0.9)",
            pointBackgroundColor: "#FFF",
            pointBorderColor: "rgba(0, 123, 255, 0.9)",
            pointHoverBackgroundColor: "#FFF",
            pointHoverBorderColor: "rgba(0, 123, 255, 0.9)",
            pointRadius: 0,
            pointHoverRadius: 6,
            fill: !0
        },
        {
            data: [20, 70, 300, 120, 180, 220, 450, 250],
            borderWidth: 4,
            backgroundColor: "rgba(247,147,26,0.1)",
            borderColor: "rgba(247,147,26,0.9)",
            pointBackgroundColor: "#FFF",
            pointBorderColor: "rgba(247,147,26,0.9)",
            pointHoverBackgroundColor: "#FFF",
            pointHoverBorderColor: "rgba(247,147,26,0.9)",
            pointRadius: 0,
            pointHoverRadius: 6,
            fill: !0
        }
        ]
    },
    options: {
        responsive: !0,
        legend: {
            display: !1
        },
        scales: {
            xAxes: [{
                display: !1,
                gridLines: {
                    display: !1
                }
            }],
            yAxes: [{
                display: !1,
                ticks: {
                    padding: 10,
                    stepSize: 100,
                    max: 600,
                    min: 0
                },
                gridLines: {
                    display: !0,
                    drawBorder: !1,
                    lineWidth: 1,
                    zeroLineColor: "#e5e5e5"
                }
            }]
        }
    },
});
(function($) {
    "use strict"

    $('#invoice-circle-1').circleProgress({
        value: 1,
        size: 150,
        emptyFill: 'rgba(0, 175, 240, .1)',
        lineCap: 'round',
        fill: {
            gradient: [
                ['#00AFF0']
            ],
            gradientAngle: Math.PI / 5
        }
    });


    $('#invoice-circle-2').circleProgress({
        value: .4,
        size: 150,
        emptyFill: 'rgba(255, 87, 34, .1)',
        lineCap: 'round',
        fill: {
            gradient: [
                ['#FF5722 ']
            ],
            gradientAngle: Math.PI / 5
        }
    });


    $('#invoice-circle-3').circleProgress({
        value: .48,
        size: 150,
        emptyFill: 'rgba(255, 193, 7, .1)',
        lineCap: 'round',
        fill: {
            gradient: [
                ['#FFC107']
            ],
            gradientAngle: Math.PI / 5
        }
    });


    $('#invoice-circle-4').circleProgress({
        value: .3,
        size: 150,
        emptyFill: 'rgba(113, 216, 117, .1)',
        lineCap: 'round',
        fill: {
            gradient: [
                ['#71D875']
            ],
            gradientAngle: Math.PI / 5
        }
    });


})(jQuery);
(function($) {
    "use strict";

    $('#first-circle').circleProgress({
        value: 0.75,
        size: 150,
        animation: false,
        fill: {
            gradient: ["#F44336", "#0000FF"]
        }
    });


    $('#second-circle').circleProgress({
        value: 0.6,
        size: 150,
        fill: {
            gradient: ["#00A2FF", "#0000FF"]
        },
        animation: { duration: 1200, easing: "circleProgressEasing" }
    });

    $('#third-circle').circleProgress({
        value: 0.6,
        size: 150,
        fill: {
            gradient: [
                ['#0000FF', .5],
                ['#00A2FF', .5]
            ],
            gradientAngle: Math.PI / 5
        }
    });



    $('#fourth-circle').circleProgress({
        startAngle: -Math.PI / 4 * 3,
        value: 0.5,
        size: 150,
        fill: { color: '#0000FF' },
        thickness: 5
    });

    $('#fifth-circle').circleProgress({
        startAngle: -Math.PI / 4 * 3,
        value: 0.5,
        size: 150,
        lineCap: 'round',
        fill: { color: '#0000FF' },
        reverse: false
    });

    $('#sixth-circle').circleProgress({
        startAngle: -Math.PI / 4 * 3,
        value: 0.5,
        size: 150,
        lineCap: 'round',
        fill: { color: '#0000FF' },
        reverse: true
    });
    $('#seventh-circle').circleProgress({
        startAngle: -Math.PI / 4 * 3,
        value: 0.5,
        size: 150,
        lineCap: 'round',
        fill: { color: '#0000FF' },
        reverse: true,
        emptyFill: "rgba(0, 0, 255, .2)"
    });

})(jQuery);
(function($) {
    "use strict"

    new ClipboardJS('.clipboard-btn');









})(jQuery);
(function($) {
    "use strict"

    // Clock pickers
    var input = $('#single-input').clockpicker({
        placement: 'bottom',
        align: 'left',
        autoclose: true,
        'default': 'now'
    });

    $('.clockpicker').clockpicker({
        donetext: 'Done',
    }).find('input').change(function () {
        console.log(this.value);
    });

    $('#check-minutes').click(function (e) {
        // Have to stop propagation here
        e.stopPropagation();
        input.clockpicker('show').clockpicker('toggleView', 'minutes');
    });

})(jQuery)
(function($) {
    "use strict"

    // Colorpicker
    $(".colorpicker").asColorPicker();
    $(".complex-colorpicker").asColorPicker({
        mode: 'complex'
    });
    $(".gradient-colorpicker").asColorPicker({
        mode: 'gradient'
    });
})(jQuery);
(function($) {
    "use strict"

    $('.counter').counterUp({
        delay: 10,
        time: 1000
    });



})(jQuery);
$(function () {
  'use strict';

  var console = window.console || { log: function () {} };
  var URL = window.URL || window.webkitURL;
  var $image = $('#image');
  var $download = $('#download');
  var $dataX = $('#dataX');
  var $dataY = $('#dataY');
  var $dataHeight = $('#dataHeight');
  var $dataWidth = $('#dataWidth');
  var $dataRotate = $('#dataRotate');
  var $dataScaleX = $('#dataScaleX');
  var $dataScaleY = $('#dataScaleY');
  var options = {
    aspectRatio: 16 / 9,
    preview: '.img-preview',
    crop: function (e) {
      $dataX.val(Math.round(e.detail.x));
      $dataY.val(Math.round(e.detail.y));
      $dataHeight.val(Math.round(e.detail.height));
      $dataWidth.val(Math.round(e.detail.width));
      $dataRotate.val(e.detail.rotate);
      $dataScaleX.val(e.detail.scaleX);
      $dataScaleY.val(e.detail.scaleY);
    }
  };
  var originalImageURL = $image.attr('src');
  var uploadedImageName = 'cropped.jpg';
  var uploadedImageType = 'image/jpeg';
  var uploadedImageURL;

  // Tooltip
  $('[data-toggle="tooltip"]').tooltip();

  // Cropper
  $image.on({
    ready: function (e) {
      console.log(e.type);
    },
    cropstart: function (e) {
      console.log(e.type, e.detail.action);
    },
    cropmove: function (e) {
      console.log(e.type, e.detail.action);
    },
    cropend: function (e) {
      console.log(e.type, e.detail.action);
    },
    crop: function (e) {
      console.log(e.type);
    },
    zoom: function (e) {
      console.log(e.type, e.detail.ratio);
    }
  }).cropper(options);

  // Buttons
  if (!$.isFunction(document.createElement('canvas').getContext)) {
    $('button[data-method="getCroppedCanvas"]').prop('disabled', true);
  }

  if (typeof document.createElement('cropper').style.transition === 'undefined') {
    $('button[data-method="rotate"]').prop('disabled', true);
    $('button[data-method="scale"]').prop('disabled', true);
  }

  // Download
  if (typeof $download[0].download === 'undefined') {
    $download.addClass('disabled');
  }

  // Options
  $('.docs-toggles').on('change', 'input', function () {
    var $this = $(this);
    var name = $this.attr('name');
    var type = $this.prop('type');
    var cropBoxData;
    var canvasData;

    if (!$image.data('cropper')) {
      return;
    }

    if (type === 'checkbox') {
      options[name] = $this.prop('checked');
      cropBoxData = $image.cropper('getCropBoxData');
      canvasData = $image.cropper('getCanvasData');

      options.ready = function () {
        $image.cropper('setCropBoxData', cropBoxData);
        $image.cropper('setCanvasData', canvasData);
      };
    } else if (type === 'radio') {
      options[name] = $this.val();
    }

    $image.cropper('destroy').cropper(options);
  });

  // Methods
  $('.docs-buttons').on('click', '[data-method]', function () {
    var $this = $(this);
    var data = $this.data();
    var cropper = $image.data('cropper');
    var cropped;
    var $target;
    var result;

    if ($this.prop('disabled') || $this.hasClass('disabled')) {
      return;
    }

    if (cropper && data.method) {
      data = $.extend({}, data); // Clone a new one

      if (typeof data.target !== 'undefined') {
        $target = $(data.target);

        if (typeof data.option === 'undefined') {
          try {
            data.option = JSON.parse($target.val());
          } catch (e) {
            console.log(e.message);
          }
        }
      }

      cropped = cropper.cropped;

      switch (data.method) {
        case 'rotate':
          if (cropped && options.viewMode > 0) {
            $image.cropper('clear');
          }

          break;

        case 'getCroppedCanvas':
          if (uploadedImageType === 'image/jpeg') {
            if (!data.option) {
              data.option = {};
            }

            data.option.fillColor = '#fff';
          }

          break;
      }

      result = $image.cropper(data.method, data.option, data.secondOption);

      switch (data.method) {
        case 'rotate':
          if (cropped && options.viewMode > 0) {
            $image.cropper('crop');
          }

          break;

        case 'scaleX':
        case 'scaleY':
          $(this).data('option', -data.option);
          break;

        case 'getCroppedCanvas':
          if (result) {
            // Bootstrap's Modal
            $('#getCroppedCanvasModal').modal().find('.modal-body').html(result);

            if (!$download.hasClass('disabled')) {
              download.download = uploadedImageName;
              $download.attr('href', result.toDataURL(uploadedImageType));
            }
          }

          break;

        case 'destroy':
          if (uploadedImageURL) {
            URL.revokeObjectURL(uploadedImageURL);
            uploadedImageURL = '';
            $image.attr('src', originalImageURL);
          }

          break;
      }

      if ($.isPlainObject(result) && $target) {
        try {
          $target.val(JSON.stringify(result));
        } catch (e) {
          console.log(e.message);
        }
      }
    }
  });

  // Keyboard
  $(document.body).on('keydown', function (e) {
    if (e.target !== this || !$image.data('cropper') || this.scrollTop > 300) {
      return;
    }

    switch (e.which) {
      case 37:
        e.preventDefault();
        $image.cropper('move', -1, 0);
        break;

      case 38:
        e.preventDefault();
        $image.cropper('move', 0, -1);
        break;

      case 39:
        e.preventDefault();
        $image.cropper('move', 1, 0);
        break;

      case 40:
        e.preventDefault();
        $image.cropper('move', 0, 1);
        break;
    }
  });

  // Import image
  var $inputImage = $('#inputImage');

  if (URL) {
    $inputImage.change(function () {
      var files = this.files;
      var file;

      if (!$image.data('cropper')) {
        return;
      }

      if (files && files.length) {
        file = files[0];

        if (/^image\/\w+$/.test(file.type)) {
          uploadedImageName = file.name;
          uploadedImageType = file.type;

          if (uploadedImageURL) {
            URL.revokeObjectURL(uploadedImageURL);
          }

          uploadedImageURL = URL.createObjectURL(file);
          $image.cropper('destroy').attr('src', uploadedImageURL).cropper(options);
          $inputImage.val('');
        } else {
          window.alert('Please choose an image file.');
        }
      }
    });
  } else {
    $inputImage.prop('disabled', true).parent().addClass('disabled');
  }
});

(function($) {
    "use strict"

    



})(jQuery);
!function (e) {
    "use strict";
    var i=new Datamap( {
        scope: "world", element: document.getElementById("world-datamap"), responsive: !0, geographyConfig: {
            popupOnHover: !1, highlightOnHover: !1, borderColor: "rgba(0,123,255,0.5)", borderWidth: 1, highlightBorderWidth: 3, highlightFillColor: "rgba(0,123,255,0.5)", highlightBorderColor: "rgba(255,255,255,0.1)", borderWidth: 1
        }
        , bubblesConfig: {
            popupTemplate: function (e, i) {
                return '<div class="datamap-sales-hover-tooltip">' + i.country + '<span class="m-l-5"></span>' + i.sold + "</div>"
            }
            , borderWidth: 1, highlightBorderWidth: 3, highlightFillColor: "rgba(0,123,255,0.5)", highlightBorderColor: "rgba(255,255,255,0.1)", fillOpacity: .75
        }
        , fills: {
            Visited: "#f5f5f5", neato: "rgba(0,123,255,1)", white: "rgba(0,123,255,1)", defaultFill: "transparent"
        }
    });
    
    i.bubbles([ {
        centered: "USA", fillKey: "white", radius: 5, sold: "$500", country: "United States"
    }
    , {
        centered: "SAU", fillKey: "white", radius: 5, sold: "$900", country: "Saudia Arabia"
    }
    , {
        centered: "RUS", fillKey: "white", radius: 5, sold: "$250", country: "Russia"
    }
    , {
        centered: "CAN", fillKey: "white", radius: 5, sold: "$1000", country: "Canada"
    }
    , {
        centered: "IND", fillKey: "white", radius: 5, sold: "$50", country: "India"
    }
    , {
        centered: "AUS", fillKey: "white", radius: 5, sold: "$700", country: "Australia"
    }
    , {
        centered: "BGD", fillKey: "white", radius: 5, sold: "$1500", country: "Bangladesh"
    }
    ]),
    window.addEventListener("resize", function (e) {
        i.resize()
    });
}

(jQuery);
(function($) {
    "use strict"



    var j = new Datamap( {
        scope: "usa", 
        element: document.getElementById("australia"), 
        responsive: !0, 
        geographyConfig: {
            popupOnHover: !1, 
            highlightOnHover: !1, 
            borderColor: "transparent", 
            borderWidth: 1, 
            highlightBorderWidth: 3, 
            highlightFillColor: "rgba(0,123,255,0.5)", 
            highlightBorderColor: "transparent", 
            borderWidth: 1
        }, 
        bubblesConfig: {
            popupTemplate: function (e, j) {
                return '<div class="datamap-sales-hover-tooltip">' + j.country + '<span class="m-l-5"></span>' + j.sold + "</div>"
            }, 
            borderWidth: 1, 
            highlightBorderWidth: 3, 
            highlightFillColor: "rgba(0,123,255,0.5)", 
            highlightBorderColor: "transparent", 
            fillOpacity: .75
        }, 
        fills: {
            Visited: "#00A2FF", 
            neato: "#673AB7", 
            white: "#FF9800", 
            defaultFill: "#E7E8E9"
        }
    });
    window.addEventListener("resize", function (e) {
        j.resize()
    });


})(jQuery)
(function($) {
    "use strict"

    var i = new Datamap( {
        scope: "world", 
        element: document.getElementById("world-map-restaurant"), 
        responsive: !0, 
        geographyConfig: {
            popupOnHover: !1, 
            highlightOnHover: !1, 
            borderColor: "transparent", 
            borderWidth: 1, 
            highlightBorderWidth: 3, 
            highlightFillColor: "rgba(0,123,255,0.5)", 
            highlightBorderColor: "transparent", 
            borderWidth: 1
        }, 
        bubblesConfig: {
            popupTemplate: function (e, i) {
                return '<div class="datamap-sales-hover-tooltip">' + i.country + '<span class="m-l-5"></span>' + i.sold + "</div>"
            }, 
            borderWidth: 1, 
            highlightBorderWidth: 3, 
            highlightFillColor: "rgba(0,123,255,0.5)", 
            highlightBorderColor: "transparent", 
            fillOpacity: .75
        }, 
        fills: {
            Visited: "#00A2FF", 
            neato: "#673AB7", 
            white: "#FF9800", 
            defaultFill: "#E7E8E9"
        }
    });
    
    i.bubbles([{
        centered: "USA", fillKey: "white", radius: 5, sold: "$500", country: "United States"
    }, {
        centered: "SAU", fillKey: "Visited", radius: 5, sold: "$900", country: "Saudia Arabia"
    }, {
        centered: "RUS", fillKey: "neato", radius: 5, sold: "$250", country: "Russia"
    }, {
        centered: "CAN", fillKey: "white", radius: 5, sold: "$1000", country: "Canada"
    }, {
        centered: "IND", fillKey: "Visited", radius: 5, sold: "$50", country: "India"
    }, {
        centered: "AUS", fillKey: "white", radius: 5, sold: "$700", country: "Australia"
    }, {
        centered: "BGD", fillKey: "Visited", radius: 5, sold: "$1500", country: "Bangladesh"
    }
    ]),
    window.addEventListener("resize", function (e) {
        i.resize()
    });


})(jQuery)
(function($) {
    "use strict"

    $(".default-ordering").DataTable({
        order: [
            [3, "desc"]
        ]
    })


})(jQuery);
(function($) {
    "use strict"

    // $('#example').DataTable();
    
    var table = $('.dataTable').DataTable({
        createdRow: function ( row, data, index ) {
           $(row).addClass('selected')
        } 
    });
      
    table.on('click', 'tbody tr', function() {
    var $row = table.row(this).nodes().to$();
    var hasClass = $row.hasClass('selected');
    if (hasClass) {
        $row.removeClass('selected')
    } else {
        $row.addClass('selected')
    }
    })
    
    table.rows().every(function() {
    this.nodes().to$().removeClass('selected')
    });




    $('#example2').DataTable( {
        "scrollY":        "42vh",
        "scrollCollapse": true,
        "paging":         false
    });

    $('#example3').DataTable( {
        "scrollY": "400",
        "scrollX": true
    });

    $('#example4').DataTable( {
        "scrollX": true
    });

    $('#example-ajax').DataTable( {
        "ajax": '../ajax/arrays.json'
    } );
    


})(jQuery);
let dataSet = [
    [ "Tiger Nixon", "System Architect", "Edinburgh", "5421", "2011/04/25", "$320,800" ],
    [ "Garrett Winters", "Accountant", "Tokyo", "8422", "2011/07/25", "$170,750" ],
    [ "Ashton Cox", "Junior Technical Author", "San Francisco", "1562", "2009/01/12", "$86,000" ],
    [ "Cedric Kelly", "Senior Javascript Developer", "Edinburgh", "6224", "2012/03/29", "$433,060" ],
    [ "Airi Satou", "Accountant", "Tokyo", "5407", "2008/11/28", "$162,700" ],
    [ "Brielle Williamson", "Integration Specialist", "New York", "4804", "2012/12/02", "$372,000" ],
    [ "Herrod Chandler", "Sales Assistant", "San Francisco", "9608", "2012/08/06", "$137,500" ],
    [ "Rhona Davidson", "Integration Specialist", "Tokyo", "6200", "2010/10/14", "$327,900" ],
    [ "Colleen Hurst", "Javascript Developer", "San Francisco", "2360", "2009/09/15", "$205,500" ],
    [ "Sonya Frost", "Software Engineer", "Edinburgh", "1667", "2008/12/13", "$103,600" ],
    [ "Jena Gaines", "Office Manager", "London", "3814", "2008/12/19", "$90,560" ],
    [ "Quinn Flynn", "Support Lead", "Edinburgh", "9497", "2013/03/03", "$342,000" ],
    [ "Charde Marshall", "Regional Director", "San Francisco", "6741", "2008/10/16", "$470,600" ],
    [ "Haley Kennedy", "Senior Marketing Designer", "London", "3597", "2012/12/18", "$313,500" ],
    [ "Tatyana Fitzpatrick", "Regional Director", "London", "1965", "2010/03/17", "$385,750" ],
    [ "Michael Silva", "Marketing Designer", "London", "1581", "2012/11/27", "$198,500" ],
    [ "Paul Byrd", "Chief Financial Officer (CFO)", "New York", "3059", "2010/06/09", "$725,000" ],
    [ "Gloria Little", "Systems Administrator", "New York", "1721", "2009/04/10", "$237,500" ],
    [ "Bradley Greer", "Software Engineer", "London", "2558", "2012/10/13", "$132,000" ],
    [ "Dai Rios", "Personnel Lead", "Edinburgh", "2290", "2012/09/26", "$217,500" ],
    [ "Jenette Caldwell", "Development Lead", "New York", "1937", "2011/09/03", "$345,000" ],
    [ "Yuri Berry", "Chief Marketing Officer (CMO)", "New York", "6154", "2009/06/25", "$675,000" ],
    [ "Caesar Vance", "Pre-Sales Support", "New York", "8330", "2011/12/12", "$106,450" ],
    [ "Doris Wilder", "Sales Assistant", "Sidney", "3023", "2010/09/20", "$85,600" ],
    [ "Angelica Ramos", "Chief Executive Officer (CEO)", "London", "5797", "2009/10/09", "$1,200,000" ],
    [ "Gavin Joyce", "Developer", "Edinburgh", "8822", "2010/12/22", "$92,575" ],
    [ "Jennifer Chang", "Regional Director", "Singapore", "9239", "2010/11/14", "$357,650" ],
    [ "Brenden Wagner", "Software Engineer", "San Francisco", "1314", "2011/06/07", "$206,850" ],
    [ "Fiona Green", "Chief Operating Officer (COO)", "San Francisco", "2947", "2010/03/11", "$850,000" ],
    [ "Shou Itou", "Regional Marketing", "Tokyo", "8899", "2011/08/14", "$163,000" ],
    [ "Michelle House", "Integration Specialist", "Sidney", "2769", "2011/06/02", "$95,400" ],
    [ "Suki Burks", "Developer", "London", "6832", "2009/10/22", "$114,500" ],
    [ "Prescott Bartlett", "Technical Author", "London", "3606", "2011/05/07", "$145,000" ],
    [ "Gavin Cortez", "Team Leader", "San Francisco", "2860", "2008/10/26", "$235,500" ],
    [ "Martena Mccray", "Post-Sales support", "Edinburgh", "8240", "2011/03/09", "$324,050" ],
    [ "Unity Butler", "Marketing Designer", "San Francisco", "5384", "2009/12/09", "$85,675" ]
];




(function($) {
    "use strict"

    $('.example-style').DataTable();
    //example 1
    var table = $('#example').DataTable({
        createdRow: function ( row, data, index ) {
           $(row).addClass('selected')
        } 
    });
      
    table.on('click', 'tbody tr', function() {
    var $row = table.row(this).nodes().to$();
    var hasClass = $row.hasClass('selected');
    if (hasClass) {
        $row.removeClass('selected')
    } else {
        $row.addClass('selected')
    }
    })
    
    table.rows().every(function() {
    this.nodes().to$().removeClass('selected')
    });



    //example 2
    var table2 = $('#example2').DataTable( {
        createdRow: function ( row, data, index ) {
            $(row).addClass('selected')
        },

        "scrollY":        "42vh",
        "scrollCollapse": true,
        "paging":         false
    });

    table2.on('click', 'tbody tr', function() {
        var $row = table2.row(this).nodes().to$();
        var hasClass = $row.hasClass('selected');
        if (hasClass) {
            $row.removeClass('selected')
        } else {
            $row.addClass('selected')
        }
    })
        
    table2.rows().every(function() {
        this.nodes().to$().removeClass('selected')
    });


    //example 3
    var table3 = $('#example3').DataTable( {
        createdRow: function ( row, data, index ) {
            $(row).addClass('selected')
        },

        "scrollY": "400",
        "scrollX": true
    });

    table3.on('click', 'tbody tr', function() {
        var $row = table3.row(this).nodes().to$();
        var hasClass = $row.hasClass('selected');
        if (hasClass) {
            $row.removeClass('selected')
        } else {
            $row.addClass('selected')
        }
    })
        
    table3.rows().every(function() {
        this.nodes().to$().removeClass('selected')
    });


    //example 4
    var table4 = $('#example4').DataTable( {
        createdRow: function ( row, data, index ) {
            $(row).addClass('selected')
        },
        
        "scrollX": true
    });

    table4.on('click', 'tbody tr', function() {
        var $row = table4.row(this).nodes().to$();
        var hasClass = $row.hasClass('selected');
        if (hasClass) {
            $row.removeClass('selected')
        } else {
            $row.addClass('selected')
        }
    })
        
    table4.rows().every(function() {
        this.nodes().to$().removeClass('selected')
    });

    //ajax example
    $('#example-ajax').DataTable( {
        "ajax": '../ajax/arrays.json'
    } );


    //datasource example 1
    $('#example-datasource1').DataTable( {
        data: dataSet,
        columns: [
            { title: "Name" },
            { title: "Position" },
            { title: "Office" },
            { title: "Extn." },
            { title: "Start date" },
            { title: "Salary" }
        ]
    });

    // Setup - add a text input to each footer cell
    $('#example-api-1 tfoot th').each( function () {
        var title = $(this).text();
        $(this).html( '<input type="text"  placeholder="Search '+title+'" />' );
    } );
 
    // DataTable - individual column searching by text
    var table = $('#example-api-1').DataTable();
 
    // Apply the search
    table.columns().every( function () {
        var that = this;
 
        $( 'input', this.footer() ).on( 'keyup change', function () {
            if ( that.search() !== this.value ) {
                that
                    .search( this.value )
                    .draw();
            }
        });
    });


    //datatable individual column searching by select
    $('#example-api-2').DataTable( {
        initComplete: function () {
            this.api().columns().every( function () {
                var column = this;
                var select = $('<select><option value=""></option></select>')
                    .appendTo( $(column.footer()).empty() )
                    .on( 'change', function () {
                        var val = $.fn.dataTable.util.escapeRegex(
                            $(this).val()
                        );
 
                        column
                            .search( val ? '^'+val+'$' : '', true, false )
                            .draw();
                    } );
 
                column.data().unique().sort().each( function ( d, j ) {
                    select.append( '<option value="'+d+'">'+d+'</option>' )
                } );
            } );
        }
    } );


    //Row selection (multiple rows)
    var table = $('#example-api-3').DataTable();
 
    $('#example-api-3 tbody').on( 'click', 'tr', function () {
        $(this).toggleClass('selected');
    } );
 
    $('#show-row').click( function () {
        alert( table.rows('.selected').data().length +' row(s) selected' );
    } );


    //Add new row
    var t = $('#example-api-4').DataTable();
    var counter = 1;
 
    $('#addRow').on( 'click', function () {
        t.row.add( [
            counter +'.1',
            counter +'.2',
            counter +'.3',
            counter +'.4',
            counter +'.5'
        ] ).draw( false );
 
        counter++;
    } );
 
    // Automatically add a first row of data
    $('#addRow').click();


    //Form inputs
    var table = $('#example-api-5').DataTable();
 
    $('#form-submit').click( function() {
        var data = table.$('input, select').serialize();
        alert(
            "The following data would have been submitted to the server: \n\n"+
            data.substr( 0, 120 )+'...'
        );
        return false;
    });


    //Show / hide columns dynamically
    var table = $('#example-api-6').DataTable( {
        "scrollY": "200px",
        "paging": false
    } );
 
    $('.toggle-vis').on( 'click', function (e) {
        e.preventDefault();
 
        // Get the column API object
        var column = table.column( $(this).attr('data-column') );
 
        // Toggle the visibility
        column.visible( ! column.visible() );
    });


    //Search API (regular expressions)
    function filterGlobal () {
        $('#example-api-7').DataTable().search(
            $('#global_filter').val(),
            $('#global_regex').prop('checked'),
            $('#global_smart').prop('checked')
        ).draw();
    }
     
    function filterColumn ( i ) {
        $('#example-api-7').DataTable().column( i ).search(
            $('#col'+i+'_filter').val(),
            $('#col'+i+'_regex').prop('checked'),
            $('#col'+i+'_smart').prop('checked')
        ).draw();
    }

    $('#example-api-7').DataTable();
 
    $('input.global_filter').on( 'keyup click', function () {
        filterGlobal();
    } );
 
    $('input.column_filter').on( 'keyup click', function () {
        filterColumn( $(this).parents('tr').attr('data-column') );
    });


    //DOM / jQuery events
    var table = $('#example-advance-1').DataTable();
     
    $('#example-advance-1 tbody').on('click', 'tr', function () {
        var data = table.row( this ).data();
        alert( 'You clicked on '+data[0]+'\'s row' );
    } );


    //DataTables events
    var eventFired = function ( type ) {
        var n = $('#demo_info')[0];
        n.innerHTML += '<div>'+type+' event - '+new Date().getTime()+'</div>';
        n.scrollTop = n.scrollHeight;      
    }
 
    $('#example-advance-2')
        .on( 'order.dt',  function () { eventFired( 'Order' ); } )
        .on( 'search.dt', function () { eventFired( 'Search' ); } )
        .on( 'page.dt',   function () { eventFired( 'Page' ); } )
        .DataTable();


    
    //Language file
    $('#example-advance-3').DataTable( {
        "language": {
            "url": "https://cdn.datatables.net/plug-ins/9dcbecd42ad/i18n/German.json"
        }
    });




    //plugins

    //API plug-in methods
    $.fn.dataTable.Api.register( 'column().data().sum()', function () {
        return this.reduce( function (a, b) {
            var x = parseFloat( a ) || 0;
            var y = parseFloat( b ) || 0;
            return x + y;
        } );
    } );
     
    /* Init the table and fire off a call to get the hidden nodes. */
    
    var table = $('#example-plugin-1').DataTable();
        
    $('<button class="btn btn-light mb-5">Click to sum age in all rows</button>')
        .prependTo( '#demo' )
        .on( 'click', function () {
            alert( 'Column sum is: '+ table.column( 3 ).data().sum() );
        } );
    
    $('<button class="btn btn-light mb-5 mr-4">Click to sum age of visible rows</button>')
        .prependTo( '#demo' )
        .on( 'click', function () {
            alert( 'Column sum is: '+ table.column( 3, {page:'current'} ).data().sum() );
        } );





    
    //Custom filtering - range search
    $.fn.dataTable.ext.search.push(
        function( settings, data, dataIndex ) {
            var min = parseInt( $('#min').val(), 10 );
            var max = parseInt( $('#max').val(), 10 );
            var age = parseFloat( data[3] ) || 0; // use data for the age column
        
            if ( ( isNaN( min ) && isNaN( max ) ) ||
                    ( isNaN( min ) && age <= max ) ||
                    ( min <= age   && isNaN( max ) ) ||
                    ( min <= age   && age <= max ) )
            {
                return true;
            }
            return false;
        }
    );
    
    var table = $('#example-plugin-2').DataTable();
        
    // Event listener to the two range filtering inputs to redraw on input
    $('#min, #max').keyup( function() {
        table.draw();
    });
        


    //Live DOM ordering
    $.fn.dataTable.ext.order['dom-text'] = function  ( settings, col )
    {
        return this.api().column( col, {order:'index'} ).nodes().map( function ( td, i ) {
            return $('input', td).val();
        } );
    }
    
    /* Create an array with the values of all the input boxes in a column, parsed as numbers */
    $.fn.dataTable.ext.order['dom-text-numeric'] = function  ( settings, col )
    {
        return this.api().column( col, {order:'index'} ).nodes().map( function ( td, i ) {
            return $('input', td).val() * 1;
        } );
    }
    
    /* Create an array with the values of all the select options in a column */
    $.fn.dataTable.ext.order['dom-select'] = function  ( settings, col )
    {
        return this.api().column( col, {order:'index'} ).nodes().map( function ( td, i ) {
            return $('select', td).val();
        } );
    }
    
    /* Create an array with the values of all the checkboxes in a column */
    $.fn.dataTable.ext.order['dom-checkbox'] = function  ( settings, col )
    {
        return this.api().column( col, {order:'index'} ).nodes().map( function ( td, i ) {
            return $('input', td).prop('checked') ? '1' : '0';
        } );
    }
    
    /* Initialise the table with the required column ordering data types */
    $(document).ready(function() {
        $('#example-plugin-3').DataTable( {
            "columns": [
                null,
                { "orderDataType": "dom-text-numeric" },
                { "orderDataType": "dom-text", type: 'string' },
                { "orderDataType": "dom-select" }
            ]
        } );
    } );



    
})(jQuery);
(function($) {
    'use strict'

    $('#dropper1').dateDropper();










})(jQuery);
(function($) {
    "use strict"

    // dragula([$('left-defaults'), $('right-defaults')]);
    dragula([document.getElementById('left-defaults'), document.getElementById('right-defaults')])


    dragula([document.getElementById('left-events'), document.getElementById('right-events')])
        .on('drag', function (el) {
            el.className = el.className.replace('ex-moved', '');
        })
        .on('drop', function (el) {
            el.className += ' ex-moved';
        })
        .on('over', function (el, container) {
            container.className += ' ex-over';
        })
        .on('out', function (el, container) {
            container.className = container.className.replace('ex-over', '');
        });
       

    dragula([document.getElementById('left-rm-spill'), document.getElementById('right-rm-spill')], { removeOnSpill: true });


    dragula([document.getElementById('left-copy'), document.getElementById('right-copy')], {
        copy: true
    });


    dragula([document.getElementById('left-copy-1tomany'), document.getElementById('right-copy-1tomany')], {
        copy: function (el, source) {
          return source === document.getElementById('left-copy-1tomany')
        },
        accepts: function (el, target) {
          return target !== document.getElementById('left-copy-1tomany')
        }
    });

    dragula([document.getElementById("left-lovehandles"), document.getElementById("right-lovehandles")], {
        moves: function (el, container, handle) {
          return handle.classList.contains('handle');
        }
    });



})(jQuery);
(function($) {
    "use strict"

    $('.dropify-default .dropify').dropify();

    $('.dropify-message .dropify').dropify({
        messages: {
            'default': 'Drag and drop a file here or click',
            'replace': 'Drag and drop or click to replace',
            'remove':  'Remove',
            'error':   'Ooops, something wrong happended.'
        }
    });

    $('.dropify-error .dropify').dropify({
        error: {
            'fileSize': 'The file size is too big ({{ value }} max).',
            'minWidth': 'The image width is too small ({{ value }}}px min).',
            'maxWidth': 'The image width is too big ({{ value }}}px max).',
            'minHeight': 'The image height is too small ({{ value }}}px min).',
            'maxHeight': 'The image height is too big ({{ value }}px max).',
            'imageFormat': 'The image format is not allowed ({{ value }} only).'
        }
    });




})(jQuery);
(function($){
    'use strict'

    $('.chart-1').easyPieChart({
        easing: 'easeOutBounce',
        barColor : '#13dafe',
        lineWidth: 3,
        animate: 1000,
        lineCap: 'square',
        trackColor: '#e5e5e5',
        onStep: function(from, to, percent) {
            $(this.el).find('.percent').text(Math.round(percent));
        }
    });

})(jQuery)
$(document).ready(function() {

    // <!--basic line echarts init-->
 
     var chartOneDom = document.getElementById("b-line");
     var chartOne = echarts.init(chartOneDom);
 
     var chartOneOption = {
         color: ['#34C73B','#00A2FF'],
 
         tooltip : {
             trigger: 'axis'
         },
         legend: {
             show: true,
             color: '#fff',
             data:['Max','Min']
         },
 
         calculable : true,
 
         xAxis : [
             {
                 type : 'category',
                 boundaryGap : false,
                 data: ['Sat','Sun','Mon','Tue','Wed','Thu','Fri']
             }
         ],
         yAxis : [
             {
                 type : 'value',
                 axisLabel : {
                     formatter: '{value} °C'
                 }
             }
         ],
         series : [
             {
                 name:'Max',
                 type:'line',
                 data:[11, 11, 15, 13, 12, 13, 10],
                 markPoint : {
                     data : [
                         {type : 'max', name: 'Max'},
                         {type : 'min', name: 'Min'}
                     ]
                 },
                 markLine : {
                     data : [
                         {type : 'average', name: 'Average'}
                     ]
                 }
             },
             {
                 name:'Min',
                 type:'line',
                 data:[1, -2, 2, 5, 3, 2, 0],
                 markPoint : {
                     data : [
                         {name : 'Min of Week', value : -2, xAxis: 1, yAxis: -1.5}
                     ]
                 },
                 markLine : {
                     data : [
                         {type : 'average', name : 'Average'}
                     ]
                 }
             }
         ]
     };
 
     if (chartOneOption && typeof chartOneOption === "object") {
         chartOne.setOption(chartOneOption, true);
     }
 
 
    // <!--basic area echarts init-->
 
     var dom = document.getElementById("b-area");
     var myChart = echarts.init(dom);
 
     var app = {};
     option = null;
     option = {
         color: ['#0000FF','#34C73B', '#00A2FF' ],
         tooltip : {
             trigger: 'axis'
         },
         legend: {
             data:['Preorder','Sale','Deal']
         },
 
         calculable : true,
         xAxis : [
             {
                 type : 'category',
                 boundaryGap : false,
                 data : ['Mon','Tue','Wed','Thu','Fri','Sat','Sun']
             }
         ],
         yAxis : [
             {
                 type : 'value'
             }
         ],
         series : [
             {
                 name:'Deal',
                 type:'line',
                 smooth:true,
                 itemStyle: {normal: {areaStyle: {type: 'default'}}},
                 data:[10, 12, 21, 54, 260, 830, 710]
             },
             {
                 name:'Sale',
                 type:'line',
                 smooth:true,
                 itemStyle: {normal: {areaStyle: {type: 'default'}}},
                 data:[30, 182, 434, 791, 390, 30, 10]
             },
             {
                 name:'Preorder',
                 type:'line',
                 smooth:true,
                 itemStyle: {normal: {areaStyle: {type: 'default'}}},
                 data:[1320, 1132, 601, 234, 120, 90, 20]
             }
         ]
     };
 
 
     if (option && typeof option === "object") {
         myChart.setOption(option, false);
     }
 
 
    // <!--Rainfall and Evaporation echarts init-->
 
     var dom = document.getElementById("rainfall");
     var rainChart = echarts.init(dom);
 
     var app = {};
     option = null;
     option = {
         color: ['#34C73B','#0000FF'],
         tooltip : {
             trigger: 'axis'
         },
         legend: {
             data:['Sale','Market']
         },
         calculable : true,
         xAxis : [
             {
                 type : 'category',
                 data : ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']
             }
         ],
         yAxis : [
             {
                 type : 'value'
             }
         ],
         series : [
             {
                 name:'Sale',
                 type:'bar',
                 data:[2.0, 4.9, 7.0, 23.2, 25.6, 76.7, 135.6, 162.2, 32.6, 20.0, 6.4, 3.3],
                 markPoint : {
                     data : [
                         {type : 'max', name: 'Max'},
                         {type : 'min', name: 'Min'}
                     ]
                 },
                 markLine : {
                     data : [
                         {type : 'average', name: 'Average'}
                     ]
                 }
             },
             {
                 name:'Market',
                 type:'bar',
                 data:[2.6, 5.9, 9.0, 26.4, 28.7, 70.7, 175.6, 182.2, 48.7, 18.8, 6.0, 2.3],
                 markPoint : {
                     data : [
                         {name : 'Max', value : 182.2, xAxis: 7, yAxis: 183, symbolSize:18},
                         {name : 'Min', value : 2.3, xAxis: 11, yAxis: 3}
                     ]
                 },
                 markLine : {
                     data : [
                         {type : 'average', name : 'Average'}
                     ]
                 }
             }
         ]
     };
 
     if (option && typeof option === "object") {
         rainChart.setOption(option, false);
     }
 
 
    // <!--Negative Bar echarts init-->
 
     var dom = document.getElementById("nb-chart");
     var nbChart = echarts.init(dom);
 
     var app = {};
     option = null;
     option = {
         color: ['#0000FF','#00A2FF', '#34C73B' ],
         tooltip : {
             trigger: 'axis'
         },
         legend: {
             data:['Profit', 'Out', 'In']
         },
         calculable : true,
         xAxis : [
             {
                 type : 'value'
             }
         ],
         yAxis : [
             {
                 type : 'category',
                 axisTick : {show: false},
                 data : ['Mon','Tue','Wed','Thu','Fri','Sat','Sun']
             }
         ],
         series : [
             {
                 name:'Profit',
                 type:'bar',
                 itemStyle : { normal: {label : {show: true, position: 'inside'}}},
                 data:[200, 170, 240, 244, 200, 220, 210]
             },
             {
                 name:'In',
                 type:'bar',
                 stack: 'Total',
                 barWidth : 5,
                 itemStyle: {normal: {
                     label : {show: true}
                 }},
                 data:[320, 302, 341, 374, 390, 450, 420]
             },
             {
                 name:'Out',
                 type:'bar',
                 stack: 'Total',
                 itemStyle: {normal: {
                     label : {show: true, position: 'left'}
                 }},
                 data:[-120, -132, -101, -134, -190, -230, -210]
             }
         ]
     };
 
     if (option && typeof option === "object") {
         nbChart.setOption(option, false);
     }
 
 
    // <!--Basic Pie echarts init-->
 
     var dom = document.getElementById("basic-Pie");
     var bpChart = echarts.init(dom);
 
     var app = {};
     option = null;
     option = {
         color: ['#0000FF','#00A2FF', '#F44336','#34C73B', '#DCDCDC' ],
         tooltip : {
             trigger: 'item',
             formatter: '{a} <br/>{b} : {c} ({d}%)'
         },
         legend: {
             orient : 'vertical',
             x : 'left',
             data:['Direct','Mail','Affiliate','AD','Search']
         },
         calculable : true,
         series : [
             {
                 name:'Source',
                 type:'pie',
                 radius : '55%',
                 center: ['50%', '60%'],
                 data:[
                     {value:335, name:'Direct'},
                     {value:310, name:'Mail'},
                     {value:234, name:'Affiliate'},
                     {value:135, name:'AD'},
                     {value:1548, name:'Search'}
                 ]
             }
         ]
     };
 
     if (option && typeof option === "object") {
         bpChart.setOption(option, false);
     }
 
    // <!--Nested Pie echarts init-->
 
     var dom = document.getElementById("np-Pie");
     var npChart = echarts.init(dom);
 
     var app = {};
     option = null;
     option = {
         color: ['#34C73B','#00A2FF', '#0000FF','#F44336', '#DCDCDC', '#28D6C3', '#EBCB94', '#EF9688', '#043D5D', '#B8959B' ],
         tooltip : {
             trigger: 'item',
             formatter: '{a} <br/>{b} : {c} ({d}%)'
         },
         legend: {
             orient : 'vertical',
             x : 'left',
             data:['Direct','AD','Search','Mail','Affiliate','Video','Baidu','Google','Bing','Other']
         },
         calculable : false,
         series : [
             {
                 name:'Source',
                 type:'pie',
                 selectedMode: 'single',
                 radius : [0, 50],
 
                 // for funnel
                 x: '20%',
                 width: '40%',
                 funnelAlign: 'right',
                 max: 1548,
 
                 itemStyle : {
                     normal : {
                         label : {
                             position : 'inner'
                         },
                         labelLine : {
                             show : false
                         }
                     }
                 },
                 data:[
                     {value:335, name:'Direct'},
                     {value:679, name:'AD'},
                     {value:1548, name:'Search', selected:true}
                 ]
             },
             {
                 name:'Source',
                 type:'pie',
                 radius : [80, 100],
 
                 // for funnel
                 x: '60%',
                 width: '35%',
                 funnelAlign: 'left',
                 max: 1048,
 
                 data:[
                     {value:335, name:'Direct'},
                     {value:310, name:'Mail'},
                     {value:234, name:'Affiliate'},
                     {value:135, name:'Video'},
                     {value:1048, name:'Baidu'},
                     {value:251, name:'Google'},
                     {value:147, name:'Bing'},
                     {value:102, name:'Other'}
                 ]
             }
         ]
     };
 
     if (option && typeof option === "object") {
         npChart.setOption(option, false);
     }
 
 
    // <!--Doughnut echarts init-->
 
     var dom = document.getElementById("doughnut");
     var dnutChart = echarts.init(dom);
 
     var app = {};
     option = null;
     option = {
         color: ['#0000FF','#00A2FF', '#F44336','#28D6C3', '#34C73B'],
         tooltip : {
             trigger: 'item',
             formatter: '{a} <br/>{b} : {c} ({d}%)'
         },
         legend: {
             orient : 'vertical',
             x : 'left',
             data:['Direct','Mail','Affiliate','AD','Search']
         },
         calculable : true,
         series : [
             {
                 name:'Source',
                 type:'pie',
                 radius : ['50%', '70%'],
                 data:[
                     {value:335, name:'Direct'},
                     {value:310, name:'Mail'},
                     {value:234, name:'Affiliate'},
                     {value:135, name:'AD'},
                     {value:1548, name:'Search'}
                 ]
             }
         ]
     };
 
     if (option && typeof option === "object") {
         dnutChart.setOption(option, false);
     }
 
 
    // <!--Basic Scatter echarts init-->
 
     var dom = document.getElementById("bs-chart");
     var bsChart = echarts.init(dom);
 
     var app = {};
     option = null;
     option = {
         color: ['#0000FF','#34C73B'],
         tooltip : {
             trigger: 'axis'
         },
         legend: {
             data:['Female','Male']
         },
         xAxis : [
             {
                 type : 'value',
                 scale:true,
                 axisLabel : {
                     formatter: '{value} cm'
                 }
             }
         ],
         yAxis : [
             {
                 type : 'value',
                 scale:true,
                 axisLabel : {
                     formatter: '{value} kg'
                 }
             }
         ],
         series : [
             {
                 name:'Female',
                 type:'scatter',
                 data: [[161.2, 51.6], [167.5, 59.0], [159.5, 49.2], [157.0, 63.0], [155.8, 53.6],
                     [170.0, 59.0], [159.1, 47.6], [166.0, 69.8], [176.2, 66.8], [160.2, 75.2],
                     [172.5, 55.2], [170.9, 54.2], [172.9, 62.5], [153.4, 42.0], [160.0, 50.0],
                     [147.2, 49.8], [168.2, 49.2], [175.0, 73.2], [157.0, 47.8], [167.6, 68.8],
                     [159.5, 50.6], [175.0, 82.5], [166.8, 57.2], [176.5, 87.8], [170.2, 72.8],
                     [174.0, 54.5], [173.0, 59.8], [179.9, 67.3], [170.5, 67.8], [160.0, 47.0],
                     [154.4, 46.2], [162.0, 55.0], [176.5, 83.0], [160.0, 54.4], [152.0, 45.8],
                     [162.1, 53.6], [170.0, 73.2], [160.2, 52.1], [161.3, 67.9], [166.4, 56.6],
                     [168.9, 62.3], [163.8, 58.5], [167.6, 54.5], [160.0, 50.2], [161.3, 60.3],
                     [167.6, 58.3], [165.1, 56.2], [160.0, 50.2], [170.0, 72.9], [157.5, 59.8],
                     [167.6, 61.0], [160.7, 69.1], [163.2, 55.9], [152.4, 46.5], [157.5, 54.3],
                     [168.3, 54.8], [180.3, 60.7], [165.5, 60.0], [165.0, 62.0], [164.5, 60.3],
                     [156.0, 52.7], [160.0, 74.3], [163.0, 62.0], [165.7, 73.1], [161.0, 80.0],
                     [162.0, 54.7], [166.0, 53.2], [174.0, 75.7], [172.7, 61.1], [167.6, 55.7],
                     [151.1, 48.7], [164.5, 52.3], [163.5, 50.0], [152.0, 59.3], [169.0, 62.5],
                     [164.0, 55.7], [161.2, 54.8], [155.0, 45.9], [170.0, 70.6], [176.2, 67.2],
                     [170.0, 69.4], [162.5, 58.2], [170.3, 64.8], [164.1, 71.6], [169.5, 52.8],
                     [163.2, 59.8], [154.5, 49.0], [159.8, 50.0], [173.2, 69.2], [170.0, 55.9],
                     [161.4, 63.4], [169.0, 58.2], [166.2, 58.6], [159.4, 45.7], [162.5, 52.2],
                     [159.0, 48.6], [162.8, 57.8], [159.0, 55.6], [179.8, 66.8], [162.9, 59.4],
                     [161.0, 53.6], [151.1, 73.2], [168.2, 53.4], [168.9, 69.0], [173.2, 58.4],
                     [171.8, 56.2], [178.0, 70.6], [164.3, 59.8], [163.0, 72.0], [168.5, 65.2],
                     [166.8, 56.6], [172.7, 105.2], [163.5, 51.8], [169.4, 63.4], [167.8, 59.0],
                     [159.5, 47.6], [167.6, 63.0], [161.2, 55.2], [160.0, 45.0], [163.2, 54.0],
                     [162.2, 50.2], [161.3, 60.2], [149.5, 44.8], [157.5, 58.8], [163.2, 56.4],
                     [172.7, 62.0], [155.0, 49.2], [156.5, 67.2], [164.0, 53.8], [160.9, 54.4],
                     [162.8, 58.0], [167.0, 59.8], [160.0, 54.8], [160.0, 43.2], [168.9, 60.5],
                     [158.2, 46.4], [156.0, 64.4], [160.0, 48.8], [167.1, 62.2], [158.0, 55.5],
                     [167.6, 57.8], [156.0, 54.6], [162.1, 59.2], [173.4, 52.7], [159.8, 53.2],
                     [170.5, 64.5], [159.2, 51.8], [157.5, 56.0], [161.3, 63.6], [162.6, 63.2],
                     [160.0, 59.5], [168.9, 56.8], [165.1, 64.1], [162.6, 50.0], [165.1, 72.3],
                     [166.4, 55.0], [160.0, 55.9], [152.4, 60.4], [170.2, 69.1], [162.6, 84.5],
                     [170.2, 55.9], [158.8, 55.5], [172.7, 69.5], [167.6, 76.4], [162.6, 61.4],
                     [167.6, 65.9], [156.2, 58.6], [175.2, 66.8], [172.1, 56.6], [162.6, 58.6],
                     [160.0, 55.9], [165.1, 59.1], [182.9, 81.8], [166.4, 70.7], [165.1, 56.8],
                     [177.8, 60.0], [165.1, 58.2], [175.3, 72.7], [154.9, 54.1], [158.8, 49.1],
                     [172.7, 75.9], [168.9, 55.0], [161.3, 57.3], [167.6, 55.0], [165.1, 65.5],
                     [175.3, 65.5], [157.5, 48.6], [163.8, 58.6], [167.6, 63.6], [165.1, 55.2],
                     [165.1, 62.7], [168.9, 56.6], [162.6, 53.9], [164.5, 63.2], [176.5, 73.6],
                     [168.9, 62.0], [175.3, 63.6], [159.4, 53.2], [160.0, 53.4], [170.2, 55.0],
                     [162.6, 70.5], [167.6, 54.5], [162.6, 54.5], [160.7, 55.9], [160.0, 59.0],
                     [157.5, 63.6], [162.6, 54.5], [152.4, 47.3], [170.2, 67.7], [165.1, 80.9],
                     [172.7, 70.5], [165.1, 60.9], [170.2, 63.6], [170.2, 54.5], [170.2, 59.1],
                     [161.3, 70.5], [167.6, 52.7], [167.6, 62.7], [165.1, 86.3], [162.6, 66.4],
                     [152.4, 67.3], [168.9, 63.0], [170.2, 73.6], [175.2, 62.3], [175.2, 57.7],
                     [160.0, 55.4], [165.1, 104.1], [174.0, 55.5], [170.2, 77.3], [160.0, 80.5],
                     [167.6, 64.5], [167.6, 72.3], [167.6, 61.4], [154.9, 58.2], [162.6, 81.8],
                     [175.3, 63.6], [171.4, 53.4], [157.5, 54.5], [165.1, 53.6], [160.0, 60.0],
                     [174.0, 73.6], [162.6, 61.4], [174.0, 55.5], [162.6, 63.6], [161.3, 60.9],
                     [156.2, 60.0], [149.9, 46.8], [169.5, 57.3], [160.0, 64.1], [175.3, 63.6],
                     [169.5, 67.3], [160.0, 75.5], [172.7, 68.2], [162.6, 61.4], [157.5, 76.8],
                     [176.5, 71.8], [164.4, 55.5], [160.7, 48.6], [174.0, 66.4], [163.8, 67.3]
                 ],
                 markPoint : {
                     data : [
                         {type : 'max', name: 'Max'},
                         {type : 'min', name: 'Min'}
                     ]
                 },
                 markLine : {
                     data : [
                         {type : 'average', name: 'Average'}
                     ]
                 }
             },
             {
                 name:'Male',
                 type:'scatter',
                 data: [[174.0, 65.6], [175.3, 71.8], [193.5, 80.7], [186.5, 72.6], [187.2, 78.8],
                     [181.5, 74.8], [184.0, 86.4], [184.5, 78.4], [175.0, 62.0], [184.0, 81.6],
                     [180.0, 76.6], [177.8, 83.6], [192.0, 90.0], [176.0, 74.6], [174.0, 71.0],
                     [184.0, 79.6], [192.7, 93.8], [171.5, 70.0], [173.0, 72.4], [176.0, 85.9],
                     [176.0, 78.8], [180.5, 77.8], [172.7, 66.2], [176.0, 86.4], [173.5, 81.8],
                     [178.0, 89.6], [180.3, 82.8], [180.3, 76.4], [164.5, 63.2], [173.0, 60.9],
                     [183.5, 74.8], [175.5, 70.0], [188.0, 72.4], [189.2, 84.1], [172.8, 69.1],
                     [170.0, 59.5], [182.0, 67.2], [170.0, 61.3], [177.8, 68.6], [184.2, 80.1],
                     [186.7, 87.8], [171.4, 84.7], [172.7, 73.4], [175.3, 72.1], [180.3, 82.6],
                     [182.9, 88.7], [188.0, 84.1], [177.2, 94.1], [172.1, 74.9], [167.0, 59.1],
                     [169.5, 75.6], [174.0, 86.2], [172.7, 75.3], [182.2, 87.1], [164.1, 55.2],
                     [163.0, 57.0], [171.5, 61.4], [184.2, 76.8], [174.0, 86.8], [174.0, 72.2],
                     [177.0, 71.6], [186.0, 84.8], [167.0, 68.2], [171.8, 66.1], [182.0, 72.0],
                     [167.0, 64.6], [177.8, 74.8], [164.5, 70.0], [192.0, 101.6], [175.5, 63.2],
                     [171.2, 79.1], [181.6, 78.9], [167.4, 67.7], [181.1, 66.0], [177.0, 68.2],
                     [174.5, 63.9], [177.5, 72.0], [170.5, 56.8], [182.4, 74.5], [197.1, 90.9],
                     [180.1, 93.0], [175.5, 80.9], [180.6, 72.7], [184.4, 68.0], [175.5, 70.9],
                     [180.6, 72.5], [177.0, 72.5], [177.1, 83.4], [181.6, 75.5], [176.5, 73.0],
                     [175.0, 70.2], [174.0, 73.4], [165.1, 70.5], [177.0, 68.9], [192.0, 102.3],
                     [176.5, 68.4], [169.4, 65.9], [182.1, 75.7], [179.8, 84.5], [175.3, 87.7],
                     [184.9, 86.4], [177.3, 73.2], [167.4, 53.9], [178.1, 72.0], [168.9, 55.5],
                     [157.2, 58.4], [180.3, 83.2], [170.2, 72.7], [177.8, 64.1], [172.7, 72.3],
                     [165.1, 65.0], [186.7, 86.4], [165.1, 65.0], [174.0, 88.6], [175.3, 84.1],
                     [185.4, 66.8], [177.8, 75.5], [180.3, 93.2], [180.3, 82.7], [177.8, 58.0],
                     [177.8, 79.5], [177.8, 78.6], [177.8, 71.8], [177.8, 116.4], [163.8, 72.2],
                     [188.0, 83.6], [198.1, 85.5], [175.3, 90.9], [166.4, 85.9], [190.5, 89.1],
                     [166.4, 75.0], [177.8, 77.7], [179.7, 86.4], [172.7, 90.9], [190.5, 73.6],
                     [185.4, 76.4], [168.9, 69.1], [167.6, 84.5], [175.3, 64.5], [170.2, 69.1],
                     [190.5, 108.6], [177.8, 86.4], [190.5, 80.9], [177.8, 87.7], [184.2, 94.5],
                     [176.5, 80.2], [177.8, 72.0], [180.3, 71.4], [171.4, 72.7], [172.7, 84.1],
                     [172.7, 76.8], [177.8, 63.6], [177.8, 80.9], [182.9, 80.9], [170.2, 85.5],
                     [167.6, 68.6], [175.3, 67.7], [165.1, 66.4], [185.4, 102.3], [181.6, 70.5],
                     [172.7, 95.9], [190.5, 84.1], [179.1, 87.3], [175.3, 71.8], [170.2, 65.9],
                     [193.0, 95.9], [171.4, 91.4], [177.8, 81.8], [177.8, 96.8], [167.6, 69.1],
                     [167.6, 82.7], [180.3, 75.5], [182.9, 79.5], [176.5, 73.6], [186.7, 91.8],
                     [188.0, 84.1], [188.0, 85.9], [177.8, 81.8], [174.0, 82.5], [177.8, 80.5],
                     [171.4, 70.0], [185.4, 81.8], [185.4, 84.1], [188.0, 90.5], [188.0, 91.4],
                     [182.9, 89.1], [176.5, 85.0], [175.3, 69.1], [175.3, 73.6], [188.0, 80.5],
                     [188.0, 82.7], [175.3, 86.4], [170.5, 67.7], [179.1, 92.7], [177.8, 93.6],
                     [175.3, 70.9], [182.9, 75.0], [170.8, 93.2], [188.0, 93.2], [180.3, 77.7],
                     [177.8, 61.4], [185.4, 94.1], [168.9, 75.0], [185.4, 83.6], [180.3, 85.5],
                     [174.0, 73.9], [167.6, 66.8], [182.9, 87.3], [160.0, 72.3], [180.3, 88.6],
                     [167.6, 75.5], [186.7, 101.4], [175.3, 91.1], [175.3, 67.3], [175.9, 77.7],
                     [175.3, 81.8], [179.1, 75.5], [181.6, 84.5], [177.8, 76.6], [182.9, 85.0],
                     [177.8, 102.5], [184.2, 77.3], [179.1, 71.8], [176.5, 87.9], [188.0, 94.3],
                     [174.0, 70.9], [167.6, 64.5], [170.2, 77.3], [167.6, 72.3], [188.0, 87.3],
                     [174.0, 80.0], [176.5, 82.3], [180.3, 73.6], [167.6, 74.1], [188.0, 85.9],
                     [180.3, 73.2], [167.6, 76.3], [183.0, 65.9], [183.0, 90.9], [179.1, 89.1],
                     [170.2, 62.3], [177.8, 82.7], [179.1, 79.1], [190.5, 98.2], [177.8, 84.1],
                     [180.3, 83.2], [180.3, 83.2]
                 ],
                 markPoint : {
                     data : [
                         {type : 'max', name: 'Max'},
                         {type : 'min', name: 'Min'}
                     ]
                 },
                 markLine : {
                     data : [
                         {type : 'average', name: 'Average'}
                     ]
                 }
             }
         ]
     };
 
     if (option && typeof option === "object") {
         bsChart.setOption(option, false);
     }
 
    // <!--Radar echarts init-->
 
     var dom = document.getElementById("radar");
     var rdChart = echarts.init(dom);
 
     var app = {};
     option = null;
     option = {
         color: ['#0000FF','#00A2FF'],
         tooltip : {
             trigger: 'axis'
         },
         legend: {
             orient : 'vertical',
             x : 'left',
             y : 0,
             data:['Allocated Budget','Actual Spending']
         },
         polar : [
             {
                 indicator : [
                     { text: 'Sales', max: 6000},
                     { text: 'Administration', max: 16000},
                     { text: 'Information Techology', max: 30000},
                     { text: 'Customer Support', max: 38000},
                     { text: 'Development', max: 52000},
                     { text: 'Marketing', max: 25000}
                 ]
             }
         ],
         calculable : true,
         series : [
             {
                 name: 'Budget vs spending',
                 type: 'radar',
                 data : [
                     {
                         value : [4300, 10000, 28000, 35000, 50000, 19000],
                         name : 'Allocated Budget'
                     },
                     {
                         value : [5000, 14000, 28000, 31000, 42000, 21000],
                         name : 'Actual Spending'
                     }
                 ]
             }
         ]
     };
 
     if (option && typeof option === "object") {
         rdChart.setOption(option, false);
     }
 
 
    // <!--Gauge echarts init-->
 
     var dom = document.getElementById("gauge");
     var gaugeChart = echarts.init(dom);
 
     var app = {};
     option = null;
     option = {
         color: ['#62549a','#4aa9e9', '#ff6c60'],
         tooltip : {
             formatter: '{a} <br/>{b} : {c}%'
         },
         series : [
             {
                 name:'Task',
                 type:'gauge',
                 detail : {formatter:'{value}%'},
                 data:[{value: 50, name: 'Finished'}]
             }
         ]
     };
 
     if (option && typeof option === "object") {
         gaugeChart.setOption(option, false);
     }
 
     /**
      * Resize chart on window resize
      * @return {void}
      */
     window.onresize = function() {
         chartOne.resize();
         myChart.resize();
         rainChart.resize();
         nbChart.resize();
         bpChart.resize();
         npChart.resize();
         dnutChart.resize();
         bsChart.resize();
         rdChart.resize();
         gaugeChart.resize();
     };
 
 
 });
 
(function($) {
    "use strict"

    CKEDITOR.replace('ck_editor');




})(jQuery);
(function($) {
    "use strict"

    tinymce.init({
        selector: '#tinymice_editor'
    });




})(jQuery);
(function($) {
    "use strict"

    tinymce.init({
        selector: '#email-compose-editor'
    });


})(jQuery);
jQuery(function($){
	$('#table').footable();
});
(function($) {
    'use strict';

    $(document).ready(function() {
        $(".bs-submit").click(function() {
      
          //Fetch form to apply custom Bootstrap validation
          var form = $(".needs-validation")
      
          if (form[0].checkValidity() === false) {
            event.preventDefault()
            event.stopPropagation()
          }

          form.addClass('was-validated');
      
          //Make ajax call here
      
        })
      });

      function isNumberKey(evt){
        var charCode = (evt.which) ? evt.which : event.keyCode
        if (charCode > 31 && (charCode < 48 || charCode > 57))
            return false;
        return true;
    }




    //to confirm input takes only number input
    //use class ".shouldNumber" in your html <input type="text" /> element
    $('.shouldNumber').on('keypress', function() {
        return isNumberKey(event)
    });

  })(jQuery);
(function($) {
    "use strict"


    // MAterial Date picker
    $('#mdate').bootstrapMaterialDatePicker({
        weekStart: 0,
        time: false
    });
    $('#timepicker').bootstrapMaterialDatePicker({
        format: 'HH:mm',
        time: true,
        date: false
    });
    $('#date-format').bootstrapMaterialDatePicker({
        format: 'dddd DD MMMM YYYY - HH:mm'
    });

    $('#min-date').bootstrapMaterialDatePicker({
        format: 'DD/MM/YYYY HH:mm',
        minDate: new Date()
    });
    // Clock pickers
    $('#single-input').clockpicker({
        placement: 'bottom',
        align: 'left',
        autoclose: true,
        'default': 'now'
    });
    $('.clockpicker').clockpicker({
        donetext: 'Done',
    }).find('input').change(function() {
        console.log(this.value);
    });
    
    $('#check-minutes').click(function(e) {
        // Have to stop propagation here
        e.stopPropagation();
        input.clockpicker('show').clockpicker('toggleView', 'minutes');
    });
    if (/mobile/i.test(navigator.userAgent)) {
        $('input').prop('readOnly', true);
    }
    // Colorpicker
    $(".colorpicker").asColorPicker();
    $(".complex-colorpicker").asColorPicker({
        mode: 'complex'
    });
    $(".gradient-colorpicker").asColorPicker({
        mode: 'gradient'
    });
    // Date Picker
    jQuery('.mydatepicker, #datepicker').datepicker();
    jQuery('#datepicker-autoclose').datepicker({
        autoclose: true,
        todayHighlight: true
    });
    jQuery('#date-range').datepicker({
        toggleActive: true
    });
    jQuery('#datepicker-inline').datepicker({
        todayHighlight: true
    });
    // Daterange picker
    $('.input-daterange-datepicker').daterangepicker({
        buttonClasses: ['btn', 'btn-sm'],
        applyClass: 'btn-danger',
        cancelClass: 'btn-inverse'
    });
    $('.input-daterange-timepicker').daterangepicker({
        timePicker: true,
        format: 'MM/DD/YYYY h:mm A',
        timePickerIncrement: 30,
        timePicker12Hour: true,
        timePickerSeconds: false,
        buttonClasses: ['btn', 'btn-sm'],
        applyClass: 'btn-danger',
        cancelClass: 'btn-inverse'
    });
    $('.input-limit-datepicker').daterangepicker({
        format: 'MM/DD/YYYY',
        minDate: '06/01/2015',
        maxDate: '06/30/2015',
        buttonClasses: ['btn', 'btn-sm'],
        applyClass: 'btn-danger',
        cancelClass: 'btn-inverse',
        dateLimit: {
            days: 6
        }
    });

















})(jQuery);
! function(e) {
    "use strict";
    var t = function() {
        this.$body = e("body"), this.$modal = e("#event-modal"), this.$event = "#external-events div.external-event", this.$calendar = e("#calendar"), this.$saveCategoryBtn = e(".save-category"), this.$categoryForm = e("#add-category form"), this.$extEvents = e("#external-events"), this.$calendarObj = null
    };
    t.prototype.onDrop = function(t, n) {
        var a = t.data("eventObject"),
            o = t.attr("data-class"),
            i = e.extend({}, a);
        i.start = n, o && (i.className = [o]), this.$calendar.fullCalendar("renderEvent", i, !0), e("#drop-remove").is(":checked") && t.remove()
    }, t.prototype.onEventClick = function(t, n, a) {
        var o = this,
            i = e("<form></form>");
        i.append("<label>Change event name</label>"), i.append("<div class='input-group'><input class='form-control' type=text value='" + t.title + "' /><span class='input-group-btn'><button type='submit' class='btn btn-success waves-effect waves-light'><i class='fa fa-check'></i> Save</button></span></div>"), o.$modal.modal({
            backdrop: "static"
        }), o.$modal.find(".delete-event").show().end().find(".save-event").hide().end().find(".modal-body").empty().prepend(i).end().find(".delete-event").unbind("click").on("click", function() {
            o.$calendarObj.fullCalendar("removeEvents", function(e) {
                return e._id == t._id
            }), o.$modal.modal("hide")
        }), o.$modal.find("form").on("submit", function() {
            return t.title = i.find("input[type=text]").val(), o.$calendarObj.fullCalendar("updateEvent", t), o.$modal.modal("hide"), !1
        })
    }, t.prototype.onSelect = function(t, n, a) {
        var o = this;
        o.$modal.modal({
            backdrop: "static"
        });
        var i = e("<form></form>");
        i.append("<div class='row'></div>"), i.find(".row").append("<div class='col-md-6'><div class='form-group'><label class='control-label'>Event Name</label><input class='form-control' placeholder='Insert Event Name' type='text' name='title'/></div></div>").append("<div class='col-md-6'><div class='form-group'><label class='control-label'>Category</label><select class='form-control' name='category'></select></div></div>").find("select[name='category']").append("<option value='bg-danger'>Danger</option>").append("<option value='bg-success'>Success</option>").append("<option value='bg-dark'>Dark</option>").append("<option value='bg-primary'>Primary</option>").append("<option value='bg-pink'>Pink</option>").append("<option value='bg-info'>Info</option>").append("<option value='bg-warning'>Warning</option></div></div>"), o.$modal.find(".delete-event").hide().end().find(".save-event").show().end().find(".modal-body").empty().prepend(i).end().find(".save-event").unbind("click").on("click", function() {
            i.submit()
        }), o.$modal.find("form").on("submit", function() {
            var e = i.find("input[name='title']").val(),
                a = (i.find("input[name='beginning']").val(), i.find("input[name='ending']").val(), i.find("select[name='category'] option:checked").val());
            return null !== e && 0 != e.length ? (o.$calendarObj.fullCalendar("renderEvent", {
                title: e,
                start: t,
                end: n,
                allDay: !1,
                className: a
            }, !0), o.$modal.modal("hide")) : alert("You have to give a title to your event"), !1
        }), o.$calendarObj.fullCalendar("unselect")
    }, t.prototype.enableDrag = function() {
        e(this.$event).each(function() {
            var t = {
                title: e.trim(e(this).text())
            };
            e(this).data("eventObject", t), e(this).draggable({
                zIndex: 999,
                revert: !0,
                revertDuration: 0
            })
        })
    }, t.prototype.init = function() {
        this.enableDrag();
        var t = new Date,
            n = (t.getDate(), t.getMonth(), t.getFullYear(), new Date(e.now())),
            a = [{
                title: "Hey!",
                start: new Date(e.now() + 158e6),
                className: "bg-dark"
            }, {
                title: "See John Deo",
                start: n,
                end: n,
                className: "bg-danger"
            }, {
                title: "Buy a Theme",
                start: new Date(e.now() + 338e6),
                className: "bg-primary"
            }],
            o = this;
        o.$calendarObj = o.$calendar.fullCalendar({
            slotDuration: "00:15:00",
            minTime: "08:00:00",
            maxTime: "19:00:00",
            defaultView: "month",
            handleWindowResize: !0,
            height: e(window).height() - 200,
            header: {
                left: "prev,next today",
                center: "title",
                right: "month,agendaWeek,agendaDay"
            },
            events: a,
            editable: !0,
            droppable: !0,
            eventLimit: !0,
            selectable: !0,
            drop: function(t) {
                o.onDrop(e(this), t)
            },
            select: function(e, t, n) {
                o.onSelect(e, t, n)
            },
            eventClick: function(e, t, n) {
                o.onEventClick(e, t, n)
            }
        }), this.$saveCategoryBtn.on("click", function() {
            var e = o.$categoryForm.find("input[name='category-name']").val(),
                t = o.$categoryForm.find("select[name='category-color']").val();
            null !== e && 0 != e.length && (o.$extEvents.append('<div class="external-event bg-' + t + '" data-class="bg-' + t + '" style="position: relative;"><i class="fa fa-move"></i>' + e + "</div>"), o.enableDrag())
        })
    }, e.CalendarApp = new t, e.CalendarApp.Constructor = t
}(window.jQuery),
function(e) {
    "use strict";
    e.CalendarApp.init()
}(window.jQuery);


$(function () {
    Highcharts.chart('basic-line', {
        chart:{
            backgroundColor: 'transparent',
        },
        title: {
            text: 'Monthly Average Temperature',
            x: -20 //center
        },
        subtitle: {
            text: 'Source: WorldClimate.com',
            x: -20
        },
        xAxis: {
            
            categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
                'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
        },
        yAxis: {
            gridLineColor:'transparent',
            title: {
                text: 'Temperature (°C)'
            },
            plotLines: [{
                value: 0,
                width: 1,
                color: '#808080'
            }]
        },
        tooltip: {
            valueSuffix: '°C'
        },
        legend: {
            layout: 'vertical',
            align: 'right',
            verticalAlign: 'middle',
            borderWidth: 0,
        },
        series: [{
            name: 'Tokyo',
            data: [7.0, 6.9, 9.5, 14.5, 18.2, 21.5, 25.2, 26.5, 23.3, 18.3, 13.9, 9.6],
            color: '#00A2FF'
        }, {
            name: 'New York',
            data: [-0.2, 0.8, 5.7, 11.3, 17.0, 22.0, 24.8, 24.1, 20.1, 14.1, 8.6, 2.5],
            color: '#0000FF'
        }, {
            name: 'Berlin',
            data: [-0.9, 0.6, 3.5, 8.4, 13.5, 17.0, 18.6, 17.9, 14.3, 9.0, 3.9, 1.0],
            color: '#F44336'
        }, {
            name: 'London',
            data: [3.9, 4.2, 5.7, 8.5, 11.9, 15.2, 17.0, 16.6, 14.2, 10.3, 6.6, 4.8],
            color: '#34C73B'
        }]
    });
});

// area inverted

$(function () {
    Highcharts.chart('area-inverted', {
        chart: {
            type: 'area',
            backgroundColor: 'transparent',
            inverted: true
        },
        title: {
            text: 'Average fruit consumption during one week'
        },
        subtitle: {
            style: {
                position: 'absolute',
                right: '0px',
                bottom: '10px'
            }
        },
        legend: {
            layout: 'vertical',
            align: 'right',
            verticalAlign: 'top',
            x: -150,
            y: 100,
            floating: true,
            borderWidth: 1,
            backgroundColor: (Highcharts.theme && Highcharts.theme.legendBackgroundColor) || '#FFFFFF'
        },
        xAxis: {
            categories: [
                'Monday',
                'Tuesday',
                'Wednesday',
                'Thursday',
                'Friday',
                'Saturday',
                'Sunday'
            ]
        },
        yAxis: {
            title: {
                text: 'Number of units'
            },
            labels: {
                formatter: function () {
                    return this.value;
                }
            },
            min: 0
        },
        plotOptions: {
            area: {
                fillOpacity: 0.5
            }
        },
        series: [{
            name: 'John',
            data: [3, 4, 3, 5, 4, 10, 12],
            color: '#34C73B'
        }, {
            name: 'Jane',
            data: [1, 3, 4, 3, 3, 5, 4],
            color: '#00A2FF'
        }]
    });
});

// bubble chart

$(function () {
    Highcharts.chart('bubble-chart', {

        chart: {
            type: 'bubble',
            plotBorderWidth: 1,
            zoomType: 'xy',
            backgroundColor: 'transparent',
        },

        legend: {
            enabled: false
        },

        title: {
            text: 'Sugar and fat intake per country'
        },

        subtitle: {
            text: 'Source: <a href="http://www.euromonitor.com/">Euromonitor</a> and <a href="https://data.oecd.org/">OECD</a>'
        },

        xAxis: {
            gridLineWidth: 1,
            title: {
                text: 'Daily fat intake'
            },
            labels: {
                format: '{value} gr'
            },
            plotLines: [{
                color: 'black',
                dashStyle: 'dot',
                width: 2,
                value: 65,
                label: {
                    rotation: 0,
                    y: 15,
                    style: {
                        fontStyle: 'italic'
                    },
                    text: 'Safe fat intake 65g/day'
                },
                zIndex: 3
            }]
        },

        yAxis: {
            startOnTick: false,
            endOnTick: false,
            title: {
                text: 'Daily sugar intake'
            },
            labels: {
                format: '{value} gr'
            },
            maxPadding: 0.2,
            plotLines: [{
                color: 'black',
                dashStyle: 'dot',
                width: 2,
                value: 50,
                label: {
                    align: 'right',
                    style: {
                        fontStyle: 'italic'
                    },
                    text: 'Safe sugar intake 50g/day',
                    x: -10
                },
                zIndex: 3
            }]
        },

        tooltip: {
            useHTML: true,
            headerFormat: '<table>',
            pointFormat: '<tr><th colspan="2"><h3>{point.country}</h3></th></tr>' +
            '<tr><th>Fat intake:</th><td>{point.x}g</td></tr>' +
            '<tr><th>Sugar intake:</th><td>{point.y}g</td></tr>' +
            '<tr><th>Obesity (adults):</th><td>{point.z}%</td></tr>',
            footerFormat: '</table>',
            followPointer: true
        },

        plotOptions: {
            series: {
                dataLabels: {
                    enabled: true,
                    format: '{point.name}'
                }
            }
        },

        series: [{
            data: [
                { x: 95, y: 95, z: 13.8, name: 'BE', country: 'Belgium', color: '#00A2FF'},
                { x: 86.5, y: 102.9, z: 14.7, name: 'DE', country: 'Germany', color: '#00A2FF'},
                { x: 80.8, y: 91.5, z: 15.8, name: 'FI', country: 'Finland', color: '#00A2FF'},
                { x: 80.4, y: 102.5, z: 12, name: 'NL', country: 'Netherlands', color: '#00A2FF'},
                { x: 80.3, y: 86.1, z: 11.8, name: 'SE', country: 'Sweden', color: '#00A2FF'},
                { x: 78.4, y: 70.1, z: 16.6, name: 'ES', country: 'Spain', color: '#00A2FF'},
                { x: 74.2, y: 68.5, z: 14.5, name: 'FR', country: 'France', color: '#00A2FF'},
                { x: 73.5, y: 83.1, z: 10, name: 'NO', country: 'Norway', color: '#00A2FF'},
                { x: 71, y: 93.2, z: 24.7, name: 'UK', country: 'United Kingdom', color: '#00A2FF'},
                { x: 69.2, y: 57.6, z: 10.4, name: 'IT', country: 'Italy', color: '#00A2FF'},
                { x: 68.6, y: 20, z: 16, name: 'RU', country: 'Russia', color: '#00A2FF'},
                { x: 65.5, y: 126.4, z: 35.3, name: 'US', country: 'United States', color: '#00A2FF'},
                { x: 65.4, y: 50.8, z: 28.5, name: 'HU', country: 'Hungary', color: '#00A2FF'},
                { x: 63.4, y: 51.8, z: 15.4, name: 'PT', country: 'Portugal', color: '#00A2FF'},
                { x: 64, y: 82.9, z: 31.3, name: 'NZ', country: 'New Zealand', color: '#00A2FF'},
            ]
        }]

    });
});

//polar chart

$(function () {

    Highcharts.chart('polar-chart', {

        chart: {
            polar: true,
            backgroundColor: 'transparent',
        },

        title: {
            text: 'Highcharts Polar Chart'
        },

        pane: {
            startAngle: 0,
            endAngle: 360
        },

        xAxis: {
            tickInterval: 45,
            min: 0,
            max: 360,
            labels: {
                formatter: function () {
                    return this.value + '°';
                }
            }
        },

        yAxis: {
            min: 0
        },

        plotOptions: {
            series: {
                pointStart: 0,
                pointInterval: 45
            },
            column: {
                pointPadding: 0,
                groupPadding: 0
            }
        },

        series: [{
            type: 'column',
            name: 'Column',
            data: [8, 7, 6, 5, 4, 3, 2, 1],
            pointPlacement: 'between',
            color: '#34C73B'
        }, {
            type: 'line',
            name: 'Line',
            data: [1, 2, 3, 4, 5, 6, 7, 8],
            color: '#0000FF'
        }, {
            type: 'area',
            name: 'Area',
            data: [1, 8, 2, 7, 3, 6, 4, 5],
            color: '#00A2FF'
        }]
    });
});


// box plot

$(function () {
    Highcharts.chart('box-plot', {

        chart: {
            type: 'boxplot',
            backgroundColor: 'transparent',
        },

        title: {
            text: 'Highcharts Box Plot Example'
        },

        legend: {
            enabled: false
        },

        xAxis: {
            categories: ['1', '2', '3', '4', '5'],
            title: {
                text: 'Experiment No.'
            }
        },

        yAxis: {
            title: {
                text: 'Observations'
            },
            plotLines: [{
                value: 932,
                color: '#0000FF',
                width: 1,
                label: {
                    text: 'Theoretical mean: 932',
                    align: 'center',
                    style: {
                        color: 'gray'
                    }
                }
            }]
        },

        series: [{
            name: 'Observations',
            data: [
                [760, 801, 848, 895, 965],
                [733, 853, 939, 980, 1080],
                [714, 762, 817, 870, 918],
                [724, 802, 806, 871, 950],
                [834, 836, 864, 882, 910]
            ],
            color: '#00A2FF',
            tooltip: {
                headerFormat: '<em>Experiment No {point.key}</em><br/>'
            }
        }, {
            name: 'Outlier',
            color: Highcharts.getOptions().colors[0],
            type: 'scatter',
            data: [ // x, y positions where 0 is the first category
                [0, 644],
                [4, 718],
                [4, 951],
                [4, 969]
            ],
            marker: {
                fillColor: 'white',
                lineWidth: 1,
                lineColor: Highcharts.getOptions().colors[0]
            },
            tooltip: {
                pointFormat: 'Observation: {point.y}'
            }
        }]

    });
});


function icheckfirstinit(){$().iCheck&&($(".check").each(function(){var i=$(this).attr("data-checkbox")?$(this).attr("data-checkbox"):"icheckbox_minimal-red",a=$(this).attr("data-radio")?$(this).attr("data-radio"):"iradio_minimal-red";i.indexOf("_line")>-1||a.indexOf("_line")>-1?$(this).iCheck({checkboxClass:i,radioClass:a,insert:'<div class="icheck_line-icon"></div>'+$(this).attr("data-label")}):$(this).iCheck({checkboxClass:i,radioClass:a})}),$(".skin-polaris input").iCheck({checkboxClass:"icheckbox_polaris",radioClass:"iradio_polaris"}),$(".skin-futurico input").iCheck({checkboxClass:"icheckbox_futurico",radioClass:"iradio_futurico"}))}var iCheckcontrol={init:function(){$(".icolors li").click(function(){var i=$(this);if(!i.hasClass("active")){i.siblings().removeClass("active");var a=i.closest(".skin"),c=i.attr("class")?"-"+i.attr("class"):"",e="-black"==(e=a.data("color")?"-"+a.data("color"):"-red")?"":e;checkbox_default="icheckbox_minimal",radio_default="iradio_minimal",checkbox="icheckbox_minimal"+e,radio="iradio_minimal"+e,a.hasClass("skin-square")&&(checkbox_default="icheckbox_square",radio_default="iradio_square",checkbox="icheckbox_square"+e,radio="iradio_square"+e),a.hasClass("skin-flat")&&(checkbox_default="icheckbox_flat",radio_default="iradio_flat",checkbox="icheckbox_flat"+e,radio="iradio_flat"+e),a.hasClass("skin-line")&&(checkbox_default="icheckbox_line",radio_default="iradio_line",checkbox="icheckbox_line"+e,radio="iradio_line"+e),a.find(".check").each(function(){var i=$(this).hasClass("state")?$(this):$(this).parent(),a=i.attr("class").replace(checkbox,checkbox_default+c).replace(radio,radio_default+c);i.attr("class",a)}),a.data("color",i.attr("class")?i.attr("class"):"black"),i.addClass("active")}})}};$(document).ready(function(){icheckfirstinit(),iCheckcontrol.init()});
(function($) {
    "use strict"
    
    // Colorpicker
    $(".colorpicker").asColorPicker();
    $(".complex-colorpicker").asColorPicker({
        mode: 'complex'
    });
    $(".gradient-colorpicker").asColorPicker({
        mode: 'gradient'
    });
})(jQuery);
(function($) {
    "use strict"
    
    jQuery(".counter-one").appear(function() {
      jQuery(".counter-content").each(function() {
          var e = jQuery(this).attr("data-count");
          jQuery(this).find(".counter-number").delay(6e3).countTo({
              from: 0,
              to: e,
              speed: 5e3,
              refreshInterval: 100
          })
      })
    });


})(jQuery);




(function($) {
    "use strict"

    var form = $("#step-form-horizontal");
    form.children('div').steps({
        headerTag: "h4",
        bodyTag: "section",
        transitionEffect: "slideLeft",
        autoFocus: true, 
        transitionEffect: "slideLeft",
        onStepChanging: function (event, currentIndex, newIndex)
        {
            form.validate().settings.ignore = ":disabled,:hidden";
            return form.valid();
        }
    });

    var form2 = $("#step-form-tab");
    form2.children('div').steps({
        headerTag: "h4",
        bodyTag: "section",
        // Disables the finish button (required if pagination is enabled)
        enableFinishButton: false, 
        // Disables the next and previous buttons (optional)
        enablePagination: false, 
        // Enables all steps from the begining
        enableAllSteps: true, 
        // Removes the number from the title
        titleTemplate: "#title#" 
    });

    var form3 = $('#step-form-vertical');
    form3.children('div').steps({
        headerTag: "h4",
        bodyTag: "section",
        transitionEffect: "slideLeft",
        stepsOrientation: "vertical" ,
        // onStepChanging: function (event, currentIndex, newIndex)
        // {
        //     form3.validate().settings.ignore = ":disabled,:hidden";
        //     return form.valid();
        // }
    });


})(jQuery);
$("#bootgrid-basic").bootgrid();

$("#bootgrid-data").bootgrid({
    icon: "icon glyphicon",

iconColumns: "glyphicon-list",

iconDown: "glyphicon-triangle-bottom",

iconRefresh: "glyphicon-repeat",

iconSearch: "glyphicon-search"
});
$(function() {
    'use strict';

    $.plot("#flotBar1", [{
        data: [
            [0, 10],
            [2, 8],
            [4, 5],
            [6, 13],
            [8, 5],
            [10, 17],
            [12, 4],
            [14, 16]
        ]
    }], {
        series: {
            bars: {
                show: true,
                lineWidth: 0,
                fillColor: '#6ed3cf'
            }
        },
        grid: {
            borderWidth: 1,
            borderColor: 'transparent'
        },
        yaxis: {
            tickColor: 'transparent',
            font: {
                color: '#fff',
                size: 10
            }
        },
        xaxis: {
            tickColor: 'transparent',
            font: {
                color: '#fff',
                size: 10
            }
        }
    });

    $.plot("#flotBar2", [{
        data: [
            [0, 3],
            [2, 8],
            [4, 5],
            [6, 13],
            [8, 5],
            [10, 7],
            [12, 8],
            [14, 10]
        ],
        bars: {
            show: true,
            lineWidth: 0,
            fillColor: '#6ed3cf'
        }
    }, {
        data: [
            [1, 5],
            [3, 7],
            [5, 10],
            [7, 7],
            [9, 9],
            [11, 5],
            [13, 4],
            [15, 6]
        ],
        bars: {
            show: true,
            lineWidth: 0,
            fillColor: '#9068be'
        }
    }], {
        grid: {
            borderWidth: 1,
            borderColor: 'transparent'
        },
        yaxis: {
            tickColor: 'transparent',
            font: {
                color: '#fff',
                size: 10
            }
        },
        xaxis: {
            tickColor: 'transparent',
            font: {
                color: '#fff',
                size: 10
            }
        }
    });

    var newCust = [
        [4, 1],
        [5, 3],
        [6, 6],
        [7, 5],
        [8, 7],
        [9, 8],
        [10, 10]
    ];
    var retCust = [
        [4, 1],
        [5, 2],
        [6, 5],
        [7, 3],
        [8, 5],
        [9, 6],
        [10, 9]
    ];

    var plot = $.plot($('#flotLine1'), [{
            data: newCust,
            label: 'New Customer',
            color: '#9068be'
        },
        {
            data: retCust,
            label: 'Returning Customer',
            color: '#6ed3cf'
        }
    ], {
        series: {
            lines: {
                show: true,
                lineWidth: 1
            },
            shadowSize: 0
        },
        points: {
            show: false,
        },
        legend: {
            noColumns: 1,
            position: 'nw'
        },
        grid: {
            hoverable: true,
            clickable: true,
            borderColor: '#ddd',
            borderWidth: 0,
            labelMargin: 5,
            backgroundColor: 'transparent'
        },
        yaxis: {
            min: 0,
            max: 15,
            color: 'transparent',
            font: {
                size: 10,
                color: '#999'
            }
        },
        xaxis: {
            color: 'transparent',
            font: {
                size: 10,
                color: '#999'
            }
        }
    });

    var plot = $.plot($('#flotLine2'), [{
            data: newCust,
            label: 'New Customer',
            color: '#9068be'
        },
        {
            data: retCust,
            label: 'Returning Customer',
            color: '#6ed3cf'
        }
    ], {
        series: {
            lines: {
                show: false
            },
            splines: {
                show: true,
                tension: 0.4,
                lineWidth: 1,
                //fill: 0.4
            },
            shadowSize: 0
        },
        points: {
            show: false,
        },
        legend: {
            noColumns: 1,
            position: 'nw'
        },
        grid: {
            hoverable: true,
            clickable: true,
            borderColor: '#ddd',
            borderWidth: 0,
            labelMargin: 5,
            backgroundColor: 'transparent'
        },
        yaxis: {
            min: 0,
            max: 15,
            color: 'transparent',
            font: {
                size: 10,
                color: '#fff'
            }
        },
        xaxis: {
            color: 'transparent',
            font: {
                size: 10,
                color: '#fff'
            }
        }
    });

    var newCust2 = [
        [0, 10],
        [1, 7],
        [2, 8],
        [3, 9],
        [4, 6],
        [5, 5],
        [6, 7]
    ];
    var retCust2 = [
        [0, 8],
        [1, 5],
        [2, 6],
        [3, 8],
        [4, 4],
        [5, 3],
        [6, 6]
    ];

    var plot = $.plot($('#flotLine3'), [{
            data: newCust2,
            label: 'New Customer',
            color: '#F37AAD'
        },
        {
            data: retCust2,
            label: 'Returning Customer',
            color: '#6AC3C9'
        }
    ], {
        series: {
            lines: {
                show: true,
                lineWidth: 1
            },
            shadowSize: 0
        },
        points: {
            show: true,
        },
        legend: {
            noColumns: 1,
            position: 'nw'
        },
        grid: {
            hoverable: true,
            clickable: true,
            borderColor: '#ddd',
            borderWidth: 0,
            labelMargin: 5,
            backgroundColor: 'transparent'
        },
        yaxis: {
            min: 0,
            max: 15,
            color: 'transparent',
            font: {
                size: 10,
                color: '#fff'
            }
        },
        xaxis: {
            color: 'transparent',
            font: {
                size: 10,
                color: '#fff'
            }
        }
    });

    var plot = $.plot($('#flotLine4'), [{
            data: newCust2,
            label: 'New Customer',
            color: '#F37AAD'
        },
        {
            data: retCust2,
            label: 'Returning Customer',
            color: '#6AC3C9'
        }
    ], {
        series: {
            lines: {
                show: false
            },
            splines: {
                show: true,
                tension: 0.4,
                lineWidth: 1,
                //fill: 0.4
            },
            shadowSize: 0
        },
        points: {
            show: true,
        },
        legend: {
            noColumns: 1,
            position: 'nw'
        },
        grid: {
            hoverable: true,
            clickable: true,
            borderColor: '#ddd',
            borderWidth: 0,
            labelMargin: 5,
            backgroundColor: 'transparent'
        },
        yaxis: {
            min: 0,
            max: 15,
            color: 'transparent',
            font: {
                size: 10,
                color: '#fff'
            }
        },
        xaxis: {
            color: 'transparent',
            font: {
                size: 10,
                color: '#fff'
            }
        }
    });

    var plot = $.plot($('#flotArea1'), [{
            data: newCust,
            label: 'New Customer',
            color: '#9068be'
        },
        {
            data: retCust,
            label: 'Returning Customer',
            color: '#6ed3cf'
        }
    ], {
        series: {
            lines: {
                show: true,
                lineWidth: 0,
                fill: 0.8
            },
            shadowSize: 0
        },
        points: {
            show: false,
        },
        legend: {
            noColumns: 1,
            position: 'nw'
        },
        grid: {
            hoverable: true,
            clickable: true,
            borderColor: '#ddd',
            borderWidth: 0,
            labelMargin: 5,
            backgroundColor: 'transparent'
        },
        yaxis: {
            min: 0,
            max: 15,
            color: 'transparent',
            font: {
                size: 10,
                color: '#fff'
            }
        },
        xaxis: {
            color: 'transparent',
            font: {
                size: 10,
                color: '#fff'
            }
        }
    });

    var plot = $.plot($('#flotArea2'), [{
            data: newCust,
            label: 'New Customer',
            color: '#9068be'
        },
        {
            data: retCust,
            label: 'Returning Customer',
            color: '#6ed3cf'
        }
    ], {
        series: {
            lines: {
                show: false
            },
            splines: {
                show: true,
                tension: 0.4,
                lineWidth: 0,
                fill: 0.8
            },
            shadowSize: 0
        },
        points: {
            show: false,
        },
        legend: {
            noColumns: 1,
            position: 'nw'
        },
        grid: {
            hoverable: true,
            clickable: true,
            borderColor: '#ddd',
            borderWidth: 0,
            labelMargin: 5,
            backgroundColor: 'transparent'
        },
        yaxis: {
            min: 0,
            max: 15,
            color: 'transparent',
            font: {
                size: 10,
                color: '#fff'
            }
        },
        xaxis: {
            color: 'transparent',
            font: {
                size: 10,
                color: '#fff'
            }
        }
    });

    var previousPoint = null;

    $('#flotLine3, #flotLine4').bind('plothover', function(event, pos, item) {
        $('#x').text(pos.x.toFixed(2));
        $('#y').text(pos.y.toFixed(2));

        if (item) {
            if (previousPoint != item.dataIndex) {
                previousPoint = item.dataIndex;

                $('#tooltip').remove();
                var x = item.datapoint[0].toFixed(2),
                    y = item.datapoint[1].toFixed(2);

                showTooltip(item.pageX, item.pageY, item.series.label + ' of ' + x + ' = ' + y);
            }
        } else {

            $('#tooltip').remove();
            previousPoint = null;
        }
    });

    $('#flotLine3, #flotLine4').bind('plotclick', function(event, pos, item) {
        if (item) {
            plot.highlight(item.series, item.datapoint);
        }
    });

    function showTooltip(x, y, contents) {
        $('<div id="tooltip" class="tooltipflot">' + contents + '</div>').css({
            position: 'absolute',
            display: 'none',
            top: y + 5,
            left: x + 5
        }).appendTo('body').fadeIn(200);
    }


    /*********** REAL TIME UPDATES **************/

    var data = [],
        totalPoints = 50;

    function getRandomData() {
        if (data.length > 0)
            data = data.slice(1);
        while (data.length < totalPoints) {
            var prev = data.length > 0 ? data[data.length - 1] : 50,
                y = prev + Math.random() * 10 - 5;
            if (y < 0) {
                y = 0;
            } else if (y > 100) {
                y = 100;
            }
            data.push(y);
        }
        var res = [];
        for (var i = 0; i < data.length; ++i) {
            res.push([i, data[i]])
        }
        return res;
    }


    // Set up the control widget
    var updateInterval = 1000;

    var plot4 = $.plot('#flotRealtime1', [getRandomData()], {
        colors: ['#9068be'],
        series: {
            lines: {
                show: true,
                lineWidth: 1
            },
            shadowSize: 0 // Drawing is faster without shadows
        },
        grid: {
            borderColor: 'transparent',
            borderWidth: 1,
            labelMargin: 5
        },
        xaxis: {
            color: 'transparent',
            font: {
                size: 10,
                color: '#fff'
            }
        },
        yaxis: {
            min: 0,
            max: 100,
            color: 'transparent',
            font: {
                size: 10,
                color: '#fff'
            }
        }
    });

    var plot5 = $.plot('#flotRealtime2', [getRandomData()], {
        colors: ['#9068be'],
        series: {
            lines: {
                show: true,
                lineWidth: 0,
                fill: 0.9
            },
            shadowSize: 0 // Drawing is faster without shadows
        },
        grid: {
            borderColor: 'transparent',
            borderWidth: 1,
            labelMargin: 5
        },
        xaxis: {
            color: 'transparent',
            font: {
                size: 10,
                color: '#fff'
            }
        },
        yaxis: {
            min: 0,
            max: 100,
            color: 'transparent',
            font: {
                size: 10,
                color: '#fff'
            }
        }
    });

    function update_plot4() {
        plot4.setData([getRandomData()]);
        plot4.draw();
        setTimeout(update_plot4, updateInterval);
    }

    function update_plot5() {
        plot5.setData([getRandomData()]);
        plot5.draw();
        setTimeout(update_plot5, updateInterval);
    }

    update_plot4();
    update_plot5();


    /**************** PIE CHART *******************/
    var piedata = [{
            label: "Series 1",
            data: [
                [1, 50]
            ],
            color: '#e1e8f0'
        },
        {
            label: "Series 2",
            data: [
                [1, 90]
            ],
            color: '#6ed3cf'
        },
        {
            label: "Series 3",
            data: [
                [1, 50]
            ],
            color: '#9068be'
        },
        {
            label: "Series 4",
            data: [
                [1, 70]
            ],
            color: '#e62739'
        },
        {
            label: "Series 5",
            data: [
                [1, 30]
            ],
            color: '#173e43'
        }
    ];

    $.plot('#flotPie1', piedata, {
        series: {
            pie: {
                show: true,
                radius: 1,
                label: {
                    show: true,
                    radius: 2 / 3,
                    formatter: labelFormatter,
                    threshold: 0.1
                }
            }
        },
        grid: {
            hoverable: true,
            clickable: true
        }
    });

    $.plot('#flotPie2', piedata, {
        series: {
            pie: {
                show: true,
                radius: 1,
                innerRadius: 0.5,
                label: {
                    show: true,
                    radius: 2 / 3,
                    formatter: labelFormatter,
                    threshold: 0.1
                }
            }
        },
        grid: {
            hoverable: true,
            clickable: true
        }
    });

    function labelFormatter(label, series) {
        return "<div style='font-size:8pt; text-align:center; padding:2px; color:white;'>" + label + "<br/>" + Math.round(series.percent) + "%</div>";
    }

});
jQuery(".form-valide").validate({
    rules: {
        "val-username": {
            required: !0,
            minlength: 3
        },
        "val-email": {
            required: !0,
            email: !0
        },
        "val-password": {
            required: !0,
            minlength: 5
        },
        "val-confirm-password": {
            required: !0,
            equalTo: "#val-password"
        },
        "val-select2": {
            required: !0
        },
        "val-select2-multiple": {
            required: !0,
            minlength: 2
        },
        "val-suggestions": {
            required: !0,
            minlength: 5
        },
        "val-skill": {
            required: !0
        },
        "val-currency": {
            required: !0,
            currency: ["$", !0]
        },
        "val-website": {
            required: !0,
            url: !0
        },
        "val-phoneus": {
            required: !0,
            phoneUS: !0
        },
        "val-digits": {
            required: !0,
            digits: !0
        },
        "val-number": {
            required: !0,
            number: !0
        },
        "val-range": {
            required: !0,
            range: [1, 5]
        },
        "val-terms": {
            required: !0
        }
    },
    messages: {
        "val-username": {
            required: "Please enter a username",
            minlength: "Your username must consist of at least 3 characters"
        },
        "val-email": "Please enter a valid email address",
        "val-password": {
            required: "Please provide a password",
            minlength: "Your password must be at least 5 characters long"
        },
        "val-confirm-password": {
            required: "Please provide a password",
            minlength: "Your password must be at least 5 characters long",
            equalTo: "Please enter the same password as above"
        },
        "val-select2": "Please select a value!",
        "val-select2-multiple": "Please select at least 2 values!",
        "val-suggestions": "What can we do to become better?",
        "val-skill": "Please select a skill!",
        "val-currency": "Please enter a price!",
        "val-website": "Please enter your website!",
        "val-phoneus": "Please enter a US phone!",
        "val-digits": "Please enter only digits!",
        "val-number": "Please enter a number!",
        "val-range": "Please enter a number between 1 and 5!",
        "val-terms": "You must agree to the service terms!"
    },

    ignore: [],
    errorClass: "invalid-feedback animated fadeInUp",
    errorElement: "div",
    errorPlacement: function(e, a) {
        jQuery(a).parents(".form-group > div").append(e)
    },
    highlight: function(e) {
        jQuery(e).closest(".form-group").removeClass("is-invalid").addClass("is-invalid")
    },
    success: function(e) {
        jQuery(e).closest(".form-group").removeClass("is-invalid"), jQuery(e).remove()
    },
});


jQuery(".form-valide-with-icon").validate({
    rules: {
        "val-username": {
            required: !0,
            minlength: 3
        },
        "val-password": {
            required: !0,
            minlength: 5
        }
    },
    messages: {
        "val-username": {
            required: "Please enter a username",
            minlength: "Your username must consist of at least 3 characters"
        },
        "val-password": {
            required: "Please provide a password",
            minlength: "Your password must be at least 5 characters long"
        }
    },

    ignore: [],
    errorClass: "invalid-feedback animated fadeInUp",
    errorElement: "div",
    errorPlacement: function(e, a) {
        jQuery(a).parents(".form-group > div").append(e)
    },
    highlight: function(e) {
        jQuery(e).closest(".form-group").removeClass("is-invalid").addClass("is-invalid")
    },
    success: function(e) {
        jQuery(e).closest(".form-group").removeClass("is-invalid").addClass("is-valid")
    }




});
(function($) {
    "use strict"

    $('#world-map').vectorMap({ 
        map: 'world_en',
        backgroundColor: '#a5bfdd',
        borderColor: '#818181',
        borderOpacity: 0.25,
        borderWidth: 1,
        color: '#f4f3f0',
        enableZoom: true,
        hoverColor: '#c9dfaf',
        hoverOpacity: null,
        normalizeFunction: 'linear',
        scaleColors: ['#b6d6ff', '#005ace'],
        selectedColor: '#c9dfaf',
        selectedRegions: null,
        showTooltip: true,
        onRegionClick: function(element, code, region)
        {
            var message = 'You clicked "'
                + region
                + '" which has the code: '
                + code.toUpperCase();
     
            alert(message);
        }
    });

    $('#usa').vectorMap({ 
        map: 'usa_en',
        backgroundColor: '#a5bfdd',
        borderColor: '#818181',
        borderOpacity: 0.25,
        borderWidth: 1,
        color: '#f4f3f0',
        enableZoom: true,
        hoverColor: '#c9dfaf',
        hoverOpacity: null,
        normalizeFunction: 'linear',
        scaleColors: ['#b6d6ff', '#005ace'],
        selectedColor: '#c9dfaf',
        selectedRegions: null,
        showTooltip: true,
        onRegionClick: function(element, code, region)
        {
            var message = 'You clicked "'
                + region
                + '" which has the code: '
                + code.toUpperCase();
     
            alert(message);
        }
    });






})(jQuery);


(function($){
    'use strict'

    //basic jsgrid table
    let clients = [
        { "Name": "Otto Clay", "Age": 25, "Country": 1, "Address": "Ap #897-1459 Quam Avenue", "Married": false },
        { "Name": "Connor Johnston", "Age": 45, "Country": 2, "Address": "Ap #370-4647 Dis Av.", "Married": true },
        { "Name": "Lacey Hess", "Age": 29, "Country": 3, "Address": "Ap #365-8835 Integer St.", "Married": false },
        { "Name": "Timothy Henson", "Age": 56, "Country": 1, "Address": "911-5143 Luctus Ave", "Married": true },
        { "Name": "Timothy Henson", "Age": 56, "Country": 1, "Address": "911-5143 Luctus Ave", "Married": true },
        { "Name": "Timothy Henson", "Age": 56, "Country": 1, "Address": "911-5143 Luctus Ave", "Married": true },
        { "Name": "Timothy Henson", "Age": 56, "Country": 1, "Address": "911-5143 Luctus Ave", "Married": true },
        { "Name": "Timothy Henson", "Age": 56, "Country": 1, "Address": "911-5143 Luctus Ave", "Married": true },
        { "Name": "Timothy Henson", "Age": 56, "Country": 1, "Address": "911-5143 Luctus Ave", "Married": true },
        { "Name": "Timothy Henson", "Age": 56, "Country": 1, "Address": "911-5143 Luctus Ave", "Married": true },
        { "Name": "Timothy Henson", "Age": 56, "Country": 1, "Address": "911-5143 Luctus Ave", "Married": true },
        { "Name": "Ramona Benton", "Age": 32, "Country": 3, "Address": "Ap #614-689 Vehicula Street", "Married": false }
    ];
    let countries = [
        { Name: "", Id: 0 },
        { Name: "United States", Id: 1 },
        { Name: "Canada", Id: 2 },
        { Name: "United Kingdom", Id: 3 }
    ];
    $("#jsGrid-basic").jsGrid({
        width: "100%",
        height: "400px",

        inserting: true,
        editing: true,
        sorting: true,
        paging: true,

        data: clients,

        fields: [
            { name: "Name", type: "text", width: 150, validate: "required" },
            { name: "Age", type: "number", width: 50, css:"text-center" },
            { name: "Address", type: "text", width: 200 },
            { name: "Country", type: "select", items: countries, valueField: "Id", textField: "Name" },
            { name: "Married", type: "checkbox", title: "Is Married", sorting: false },
            { type: "control" }
        ]
    });



})(jQuery)

(function($) {
    'use strict'

    $('#jstree_basic').jstree();













})(jQuery);
document.addEventListener("DOMContentLoaded", function(e) {
    var t, n, a, i, o, m, l, d, t = new JustGage({
            id: "g1",
            value: getRandomInt(0, 100),
            min: 0,
            max: 100,
            title: "Custom Width",
            label: "miles traveled",
            gaugeWidthScale: .2,
            levelColors: ['#0000FF', '#34C73B', '#00A2FF']
        }),
        n = new JustGage({
            id: "g2",
            value: getRandomInt(0, 100),
            min: 0,
            max: 100,
            title: "Custom Shadow",
            label: "",
            shadowOpacity: 1,
            shadowSize: 10,
            shadowVerticalOffset: 5,
            levelColors: ['#0000FF', '#34C73B', '#00A2FF']
        }),
        a = new JustGage({
            id: "g3",
            value: getRandomInt(0, 100),
            min: 0,
            max: 100,
            title: "Custom Colors",
            label: "",
            levelColors: ['#0000FF', '#34C73B', '#00A2FF']
        }),
        i = new JustGage({
            id: "g4",
            value: getRandomInt(0, 100),
            min: 0,
            max: 100,
            title: "Hide Labels",
            hideMinMax: !0,
            levelColors: ['#0000FF', '#34C73B', '#00A2FF']
        }),
        o = new JustGage({
            id: "g5",
            value: getRandomInt(0, 100),
            min: 0,
            max: 100,
            title: "Animation Type",
            label: "",
            startAnimationTime: 2e3,
            startAnimationType: ">",
            refreshAnimationTime: 1e3,
            refreshAnimationType: "bounce",
            levelColors: ['#0000FF', '#34C73B', '#00A2FF']
        }),
        m = new JustGage({
            id: "g6",
            value: getRandomInt(0, 100),
            min: 0,
            max: 100,
            title: "Minimal",
            label: "",
            hideMinMax: !0,
            gaugeColor: "#fff",
            levelColors: ['#0000FF', '#34C73B', '#00A2FF'],
            hideInnerShadow: !0,
            startAnimationTime: 1,
            startAnimationType: "linear",
            refreshAnimationTime: 1,
            refreshAnimationType: "linear"
        }),
        l = new JustGage({
            id: "g7",
            value: 72,
            min: 0,
            max: 100,
            donut: !0,
            gaugeWidthScale: .6,
            counter: !0,
            hideInnerShadow: !0,
            levelColors: ['#0000FF', '#34C73B', '#00A2FF']
        }),
        d = new JustGage({
            id: "g8",
            value: 72.15,
            min: 0,
            max: 100,
            decimals: 2,
            gaugeWidthScale: .6,
            customSectors: [{
                color: "#34C73B",
                lo: 0,
                hi: 50
            }, {
                color: "#00A2FF",
                lo: 50,
                hi: 100
            }],
            counter: !0
        })
    document.getElementById("g8_refresh").addEventListener("click", function() {
        d.refresh(getRandomInt(0, 100))
    }), setInterval(function() {
        t.refresh(getRandomInt(0, 100)), n.refresh(getRandomInt(0, 100)), a.refresh(getRandomInt(0, 100)), i.refresh(getRandomInt(0, 100)), o.refresh(getRandomInt(0, 100)), m.refresh(getRandomInt(0, 100)), l.refresh(getRandomInt(0, 100))
    }, 2500)
})
$(function($) {
    "use strict";

    $(".knob").knob({
        change : function (value) {
            //console.log("change : " + value);
        },
        release : function (value) {
            //console.log(this.$.attr('value'));
            console.log("release : " + value);
        },
        cancel : function () {
            console.log("cancel : ", this);
        },
        /*format : function (value) {
         return value + '%';
         },*/
        draw : function () {

            // "tron" case
            if(this.$.data('skin') == 'tron') {

                this.cursorExt = 0.3;

                var a = this.arc(this.cv)  // Arc
                    , pa                   // Previous arc
                    , r = 1;

                this.g.lineWidth = this.lineWidth;

                if (this.o.displayPrevious) {
                    pa = this.arc(this.v);
                    this.g.beginPath();
                    this.g.strokeStyle = this.pColor;
                    this.g.arc(this.xy, this.xy, this.radius - this.lineWidth, pa.s, pa.e, pa.d);
                    this.g.stroke();
                }

                this.g.beginPath();
                this.g.strokeStyle = r ? this.o.fgColor : this.fgColor ;
                this.g.arc(this.xy, this.xy, this.radius - this.lineWidth, a.s, a.e, a.d);
                this.g.stroke();

                this.g.lineWidth = 2;
                this.g.beginPath();
                this.g.strokeStyle = this.o.fgColor;
                this.g.arc( this.xy, this.xy, this.radius - this.lineWidth + 1 + this.lineWidth * 2 / 3, 0, 2 * Math.PI, false);
                this.g.stroke();

                return false;
            }
        }
    });

    // Example of infinite knob, iPod click wheel
    var v, up=0,down=0,i=0
        ,$idir = $("div.idir")
        ,$ival = $("div.ival")
        ,incr = function() { i++; $idir.show().html("+").fadeOut(); $ival.html(i); }
        ,decr = function() { i--; $idir.show().html("-").fadeOut(); $ival.html(i); };
    $("input.infinite").knob(
        {
            min : 0
            , max : 20
            , stopper : false
            , change : function () {
            if(v > this.cv){
                if(up){
                    decr();
                    up=0;
                }else{up=1;down=0;}
            } else {
                if(v < this.cv){
                    if(down){
                        incr();
                        down=0;
                    }else{down=1;up=0;}
                }
            }
            v = this.cv;
        }
        });
});





//Superpose (clock) function

function clock() {
    var $s = $(".second"),
        $m = $(".minute"),
        $h = $(".hour");
    d = new Date(),
        s = d.getSeconds(),
        m = d.getMinutes(),
        h = d.getHours();
    $s.val(s).trigger("change");
    $m.val(m).trigger("change");
    $h.val(h).trigger("change");
    setTimeout("clock()", 1000);
}
clock();
$(document).ready(function() {
	$('.card-gallery-wrapper').magnificPopup({
		delegate: '.card-footer a',
		type: 'image',
		tLoading: 'Loading image #%curr%...',
		mainId: 'image-popup-vertical-fit',
		gallery: {
			enabled: true,
			navigateByImgClick: true,
			preload: [0,1] // Will preload 0 - before current, and 1 after the current image
		},
		image: {
			tError: '<a href="%url%">The image #%curr%</a> could not be loaded.',
			titleSrc: function(item) {
				return item.el.attr('title') + '<small>by QuixLab</small>';
			}
		}
	});


	$('.image-popup-vertical-fit').magnificPopup({
		type: 'image',
		closeOnContentClick: true,
		mainClass: 'mfp-img-mobile',
		image: {
			verticalFit: true
		}
		
	});

	$('.image-popup-fit-width').magnificPopup({
		type: 'image',
		closeOnContentClick: true,
		image: {
			verticalFit: false
		}
	});

	$('.image-popup-no-margins').magnificPopup({
		type: 'image',
		closeOnContentClick: true,
		closeBtnInside: false,
		fixedContentPos: true,
		mainClass: 'mfp-no-margins mfp-with-zoom', // class to remove default margin from left and right side
		image: {
			verticalFit: true
		},
		zoom: {
			enabled: true,
			duration: 300 // don't foget to change the duration also in CSS
		}
	});


	$('.popup-gallery').magnificPopup({
		delegate: 'a',
		type: 'image',
		tLoading: 'Loading image #%curr%...',
		mainClass: 'mfp-img-mobile',
		gallery: {
			enabled: true,
			navigateByImgClick: true,
			preload: [0,1] // Will preload 0 - before current, and 1 after the current image
		},
		image: {
			tError: '<a href="%url%">The image #%curr%</a> could not be loaded.',
			titleSrc: function(item) {
				return item.el.attr('title') + '<small>by Marsel Van Oosten</small>';
			}
		}
	});


	$('.popup-with-form').magnificPopup({
		type: 'inline',
		preloader: false,
		focus: '#name',

		// When elemened is focused, some mobile browsers in some cases zoom in
		// It looks not nice, so we disable it:
		callbacks: {
			beforeOpen: function() {
				if($(window).width() < 700) {
					this.st.focus = false;
				} else {
					this.st.focus = '#name';
				}
			}
		}
	});


	$('.popup-modal').magnificPopup({
		type: 'inline',
		preloader: false,
		focus: '#username',
		modal: true
	});
	
	$(document).on('click', '.popup-modal-dismiss', function (e) {
		e.preventDefault();
		$.magnificPopup.close();
	});


	$('.popup-link').magnificPopup({ 
		removalDelay: 300,
		type: 'image',
		callbacks: {
			beforeOpen: function() {
				this.st.image.markup = this.st.image.markup.replace('mfp-figure', 'mfp-figure animated ' + this.st.el.attr('data-effect'));
			}
	  	},
	});











});

(function($) {
    "use strict"

    // MAterial Date picker
    $('#mdate').bootstrapMaterialDatePicker({
        weekStart: 0,
        time: false
    });
    $('#timepicker').bootstrapMaterialDatePicker({
        format: 'HH:mm',
        time: true,
        date: false
    });
    $('#date-format').bootstrapMaterialDatePicker({
        format: 'dddd DD MMMM YYYY - HH:mm'
    });

    $('#min-date').bootstrapMaterialDatePicker({
        format: 'DD/MM/YYYY HH:mm',
        minDate: new Date()
    });

})(jQuery);
// Dashboard 1 Morris-chart
$(function () {
    "use strict";
   

    // LINE CHART
    let line = new Morris.Line({
        element: 'morris-line-chart',
        resize: true,
        data: [
            {
                y: '2011 Q1',
                item1: 2666
            },
            {
                y: '2011 Q2',
                item1: 2778
            },
            {
                y: '2011 Q3',
                item1: 4912
            },
            {
                y: '2011 Q4',
                item1: 3767
            },
            {
                y: '2012 Q1',
                item1: 6810
            },
            {
                y: '2012 Q2',
                item1: 5670
            },
            {
                y: '2012 Q3',
                item1: 4820
            },
            {
                y: '2012 Q4',
                item1: 15073
            },
            {
                y: '2013 Q1',
                item1: 10687
            },
            {
                y: '2013 Q2',
                item1: 8432
            }
        ],
        xkey: 'y',
        ykeys: ['item1'],
        labels: ['Item 1'],
        gridLineColor: 'transparent',
        lineColors: ['#4d7cff'],
        lineWidth: 1,
        hideHover: 'auto',
    });
    // Morris donut chart

    Morris.Donut({
        element: 'morris-donut-chart',
        data: [{
            label: "Download Sales",
            value: 12,

        }, {
            label: "In-Store Sales",
            value: 30
        }, {
            label: "Mail-Order Sales",
            value: 20
        }],
        resize: true,
        colors: ['#4d7cff', '#7571F9', '#9097c4']
    });


    // Extra chart
    Morris.Area({
        element: 'extra-area-chart',
        data: [{
            period: '2001',
            smartphone: 0,
            windows: 0,
            mac: 0
        }, {
            period: '2002',
            smartphone: 90,
            windows: 60,
            mac: 25
        }, {
            period: '2003',
            smartphone: 40,
            windows: 80,
            mac: 35
        }, {
            period: '2004',
            smartphone: 30,
            windows: 47,
            mac: 17
        }, {
            period: '2005',
            smartphone: 150,
            windows: 40,
            mac: 120
        }, {
            period: '2006',
            smartphone: 25,
            windows: 80,
            mac: 40
        }, {
            period: '2007',
            smartphone: 10,
            windows: 10,
            mac: 10
        }


        ],
        lineColors: ['#7571F9', '#9097c4', '#4d7cff'],
        xkey: 'period',
        ykeys: ['smartphone', 'windows', 'mac'],
        labels: ['Phone', 'Windows', 'Mac'],
        pointSize: 0,
        lineWidth: 0,
        resize: true,
        fillOpacity: 0.8,
        behaveLikeLine: true,
        gridLineColor: 'transparent',
        hideHover: 'auto'

    });
    Morris.Area({
        element: 'morris-area-chart',
        data: [{
            period: '2001',
            smartphone: 0,
            windows: 0,
            mac: 0
        }, {
            period: '2002',
            smartphone: 90,
            windows: 60,
            mac: 25
        }, {
            period: '2003',
            smartphone: 40,
            windows: 80,
            mac: 35
        }, {
            period: '2004',
            smartphone: 30,
            windows: 47,
            mac: 17
        }, {
            period: '2005',
            smartphone: 150,
            windows: 40,
            mac: 120
        }, {
            period: '2006',
            smartphone: 25,
            windows: 80,
            mac: 40
        }, {
            period: '2007',
            smartphone: 10,
            windows: 10,
            mac: 10
        }


        ],
        xkey: 'period',
        ykeys: ['smartphone', 'windows', 'mac'],
        labels: ['Phone', 'Windows', 'Mac'],
        pointSize: 3,
        fillOpacity: 0,
        pointStrokeColors: ['#7571F9', '#4d7cff', '#9097c4'],
        behaveLikeLine: true,
        gridLineColor: 'transparent',
        lineWidth: 3,
        hideHover: 'auto',
        lineColors: ['#7571F9', '#4d7cff', '#9097c4'],
        resize: true

    });

    Morris.Area({
        element: 'morris-area-chart0',
        data: [{
            period: '2010',
            SiteA: 0,
            SiteB: 0,

        }, {
            period: '2011',
            SiteA: 130,
            SiteB: 100,

        }, {
            period: '2012',
            SiteA: 80,
            SiteB: 60,

        }, {
            period: '2013',
            SiteA: 70,
            SiteB: 200,

        }, {
            period: '2014',
            SiteA: 180,
            SiteB: 150,

        }, {
            period: '2015',
            SiteA: 105,
            SiteB: 90,

        },
        {
            period: '2016',
            SiteA: 250,
            SiteB: 150,

        }],
        xkey: 'period',
        ykeys: ['SiteA', 'SiteB'],
        labels: ['Site A', 'Site B'],
        pointSize: 0,
        fillOpacity: 0.4,
        pointStrokeColors: ['#b4becb', '#4d7cff'],
        behaveLikeLine: true,
        gridLineColor: 'transparent',
        lineWidth: 0,
        smooth: false,
        hideHover: 'auto',
        lineColors: ['#b4becb', '#4d7cff'],
        resize: true

    });
    
 // Morris bar chart
 Morris.Bar({
    element: 'morris-bar-chart',
    data: [{
        y: '2006',
        a: 100,
        b: 90,
        c: 60
    }, {
        y: '2007',
        a: 75,
        b: 65,
        c: 40
    }, {
        y: '2008',
        a: 50,
        b: 40,
        c: 30
    }, {
        y: '2009',
        a: 75,
        b: 65,
        c: 40
    }, {
        y: '2010',
        a: 50,
        b: 40,
        c: 30
    }, {
        y: '2011',
        a: 75,
        b: 65,
        c: 40
    }, {
        y: '2012',
        a: 100,
        b: 90,
        c: 40
    }],
    xkey: 'y',
    ykeys: ['a', 'b', 'c'],
    labels: ['A', 'B', 'C'],
    barColors: ['#7571F9', '#9097c4', '#4d7cff'],
    hideHover: 'auto',
    gridLineColor: 'transparent',
    resize: true
});

});

$(document).ready(function () { "use strict"; var e = function (e) { var t = e.length ? e : $(e.target), a = t.data("output"); window.JSON ? a.val(window.JSON.stringify(t.nestable("serialize"))) : a.val("JSON browser support required for this demo.") }; $("#nestable").nestable({ group: 1 }).on("change", e), $("#nestable2").nestable({ group: 1 }).on("change", e), e($("#nestable").data("output", $("#nestable-output"))), e($("#nestable2").data("output", $("#nestable2-output"))), $("#nestable-menu").on("click", function (e) { var t = $(e.target).data("action"); "expand-all" === t && $(".dd").nestable("expandAll"), "collapse-all" === t && $(".dd").nestable("collapseAll") }), $("#nestable3").nestable() });
(function($) {
    "use strict"

    // //basic slider
    let basicSlide = document.getElementById('basic-slider');
    noUiSlider.create(basicSlide, {
        start: [20, 80],
        connect: true,
        range: {
            'min': 0,
            'max': 100
        }
    });
    // //basic slider ^
    

    // //stepping and snapping the values
    var stepSlider = document.getElementById('slider-step');
    noUiSlider.create(stepSlider, {
        start: [4000],
        step: 1000,
        range: {
            'min': [2000],
            'max': [10000]
        }
    });

    var stepSliderValueElement = document.getElementById('slider-step-value');
    stepSlider.noUiSlider.on('update', function (values, handle) {
        stepSliderValueElement.innerHTML = values[handle];
    });
    // //stepping and snapping the values ^


    // //slider margin
    var marginSlider = document.getElementById('slider-margin');
    noUiSlider.create(marginSlider, {
        start: [20, 80],
        margin: 30,
        range: {
            'min': 0,
            'max': 100
        }
    });

    var marginMin = document.getElementById('slider-margin-value-min'),
    marginMax = document.getElementById('slider-margin-value-max');
    marginSlider.noUiSlider.on('update', function (values, handle) {
        if (handle) {
            marginMax.innerHTML = values[handle];
        } else {
            marginMin.innerHTML = values[handle];
        }
    });
    // //slider margin ^


    // //slider limit
    var limitSlider = document.getElementById('slider-limit');
    noUiSlider.create(limitSlider, {
        start: [10, 120],
        limit: 40,
        behaviour: 'drag',
        connect: true,
        range: {
            'min': 0,
            'max': 100
        }
    });

    var limitFieldMin = document.getElementById('slider-limit-value-min');
    var limitFieldMax = document.getElementById('slider-limit-value-max');

    limitSlider.noUiSlider.on('update', function (values, handle) {
        (handle ? limitFieldMax : limitFieldMin).innerHTML = values[handle];
    });
    // //slider limit ^


    // //slider padding
    var paddingSlider = document.getElementById('slider-padding');
    noUiSlider.create(paddingSlider, {
        start: [20, 80],
        padding: [10, 15], // Or just 10
        range: {
            'min': 0,
            'max': 100
        }
    });

    var paddingMin = document.getElementById('slider-padding-value-min');
    var paddingMax = document.getElementById('slider-padding-value-max');
    paddingSlider.noUiSlider.on('update', function (values, handle) {
        if (handle) {
            paddingMax.innerHTML = values[handle];
        } else {
            paddingMin.innerHTML = values[handle];
        }
    });
    // //slider padding ^

    // //slider tooltips
    var tooltipSlider = document.getElementById('slider-tooltips');
    noUiSlider.create(tooltipSlider, {
        start: [20, 80, 120],
        tooltips: [false, wNumb({decimals: 1}), true],
        range: {
            'min': 0,
            'max': 200
        }
    });
    // //slider tooltips ^


    // //slider behaviour drag
    var behaviourSlider = document.getElementById('behaviour');
    noUiSlider.create(behaviourSlider, {
        start: [20, 40],
        step: 10,
        behaviour: 'drag',
        connect: true,
        range: {
            'min': 20,
            'max': 80
        }
    });
    // //slider behaviour drag ^


    // //slider behaviour tap
    var tapSlider = document.getElementById('tap');
    noUiSlider.create(tapSlider, {
        start: 40,
        behaviour: 'tap',
        connect: [false, true],
        range: {
            'min': 20,
            'max': 80
        }
    });
    // //slider behaviour tap ^


    // //slider behaviour fixed dragging
    var dragFixedSlider = document.getElementById('drag-fixed');

    noUiSlider.create(dragFixedSlider, {
        start: [40, 60],
        behaviour: 'drag-fixed',
        connect: true,
        range: {
            'min': 20,
            'max': 80
        }
    });
    // //slider behaviour fixed dragging ^


    // //slider behaviour snap
    var snapSlider2 = document.getElementById('snap');
    noUiSlider.create(snapSlider2, {
        start: 40,
        behaviour: 'snap',
        connect: [true, false],
        range: {
            'min': 20,
            'max': 80
        }
    });
    // //slider behaviour snap ^


    // //slider behaviour hover
    var hoverSlider = document.getElementById('hover');
    var field = document.getElementById('hover-val');

    noUiSlider.create(hoverSlider, {
        start: 20,
        behaviour: 'hover-snap',
        direction: 'rtl',
        range: {
            'min': 0,
            'max': 10
        }
    });

    hoverSlider.noUiSlider.on('hover', function (value) {
        field.innerHTML = value;
    });
    // //slider behaviour hover ^


    // //slider behaviour unconstrained
    var unconstrainedSlider = document.getElementById('unconstrained');
    var unconstrainedValues = document.getElementById('unconstrained-values');

    noUiSlider.create(unconstrainedSlider, {
        start: [20, 50, 80],
        behaviour: 'unconstrained-tap',
        connect: true,
        range: {
            'min': 0,
            'max': 100
        }
    });

    unconstrainedSlider.noUiSlider.on('update', function (values) {
        unconstrainedValues.innerHTML = values.join(' :: ');
    });
    // //slider behaviour unconstrained ^


})(jQuery);


(function($) {
    "use strict"

     //Moving the slider by clicking pips
     var pipsSlider = document.getElementById('slider-pips-2');
     noUiSlider.create(pipsSlider, {
         range: {
             min: 0,
             max: 100
         },
         start: [50],
         pips: {mode: 'count', values: 5}
     });
 
     
    

})(jQuery);
var basicCarousel = $("#basic-carousel");

basicCarousel.owlCarousel({
    loop:true,
    nav:true,
    responsive:{
        0:{
            items:1
        }
    }
})
$(function() {
    "use strict";
    $(".bar-line").peity("bar", {
        width: "100",
        height: "100"
    });

    
    $("span.pie").peity("pie", {
        width: "100",
        height: "100"
    });
    
    
    
    $("span.donut").peity("donut", {
        width: "100",
        height: "100"
    });
    
    
    
    $(".peity-line").peity("line", {
        width: "300",
        height: "100"
    });
    
    
    
    $(".bar").peity("bar", {
        width: "300",
        height: "100"
    });
    
    
    
    $(".bar-colours-1").peity("bar", {
        fill: ["red", "green", "blue"],
        width: "100",
        height: "100"
    });
    
    
    
    $(".bar-colours-2").peity("bar", {
        fill: function(t) {
            return t > 0 ? "green" : "red"
        },
        width: "100",
        height: "100"
    });
    
    
    
    $(".bar-colours-3").peity("bar", {
        fill: function(t, e, i) {
            return "rgb(255, " + parseInt(e / i.length * 255) + ", 0)"
        },
        width: "100",
        height: "100"
    });
    
    
    
    $(".pie-colours-1").peity("pie", {
        fill: ["cyan", "magenta", "yellow", "black"],
        width: "100",
        height: "100"
    });
    
    
    
    $(".pie-colours-2").peity("pie", {
        fill: function(t, e, i) {
            return "rgb(255, " + parseInt(e / i.length * 255) + ", 0)"
        },
        width: "100",
        height: "100"
    });
    
    
    
    $(".data-attr").peity("donut");



    $("select").change(function() {
        var t = $(this).val() + "/5";
        $(this).siblings("span.graph").text(t).change(),
        $("#notice").text("Chart updated: " + t)
    }).change(), $("span.graph").peity("pie");


    var t = $(".updating-chart").peity("line", {
        width: "100%",
        height: 100
    });
    setInterval(function() {
        var e = Math.round(10 * Math.random()),
            i = t.text().split(",");
        i.shift(), i.push(e), t.text(i.join(",")).change()
    }, 1e3)
});
(function($) {
    "use strict"

    //date picker classic default
    $('.datepicker-default').pickadate();

    //sting sort
    $('.datepicker-string-sort').pickadate({
        weekdaysShort: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
        showMonthsShort: true
    });

    //change button text
    $('.datepicker-button-text').pickadate({
        today: '',
        clear: 'Clear selection',
        close: 'Cancel'
    });

    //change accessibility labels
    $('.datepicker-acc-labels').pickadate({
        labelMonthNext: 'Go to the next month',
        labelMonthPrev: 'Go to the previous month',
        labelMonthSelect: 'Pick a month from the dropdown',
        labelYearSelect: 'Pick a year from the dropdown',
        selectMonths: true,
        selectYears: true
    });

    //default translation
    $('.datepicker-default-translation').pickadate({
        monthsFull: ['Janvier', 'Février', 'Mars', 'Avril', 'Mai', 'Juin', 'Juillet', 'Août', 'Septembre', 'Octobre', 'Novembre', 'Décembre'],
        weekdaysShort: ['Dim', 'Lun', 'Mar', 'Mer', 'Jeu', 'Ven', 'Sam'],
        today: 'aujourd\'hui',
        clear: 'effacer',
        formatSubmit: 'yyyy/mm/dd'
    });

    //default formation
    $('.datepicker-default-formats').pickadate({
        // Escape any “rule” characters with an exclamation mark (!).
        format: 'You selecte!d: dddd, dd mmm, yyyy',
        formatSubmit: 'yyyy/mm/dd',
        hiddenPrefix: 'prefix__',
        hiddenSuffix: '__suffix'
    });

    //prefilled value
    $('.datepicker-default-pre-value').pickadate();

    //editable input
    $('.datepicker-default-editable-input').pickadate({
        editable: true
    });

    //select option
    $('.datepicker-default-select-option').pickadate({
        selectYears: true,
        selectMonths: true
    });

    //select option
    $('.datepicker-default-select-year').pickadate({
        selectYears: 4
    });

    //select option
    $('.datepicker-default-date-limits').pickadate({
        min: new Date(2015,3,20), max: new Date(2015,7,14)
    });

    //classic styles
    $('.datepicker-classic').pickadate();


})(jQuery);
(function($) {
    "use strict"

    //default timepicker
    $('.timepicker-default').pickatime();

    //clear buttons
    $('.timepicker-clear-buttons').pickatime({
        clear: ""
    });

    //formation
    $('.timepicker-formation').pickatime({
        format: 'T!ime selected: h:i a',
        formatLabel: '<b>h</b>:i <!i>a</!i>',
        formatSubmit: 'HH:i',
        hiddenPrefix: 'prefix__',
        hiddenSuffix: '__suffix'
    });

    //clear buttons
    $('.timepicker-intervals').pickatime({
        interval: 150
    });

    //time limits
    $('.timepicker-limits').pickatime({
        min: new Date(2015,3,20,7),
        max: new Date(2015,7,14,18,30)
    });



})(jQuery);
$(function(){"use strict";$(".year-calendar").pignoseCalendar({theme:"blue"}),$("input.calendar").pignoseCalendar({format:"YYYY-MM-DD"})});
(function($) {
    "use strict"



    var elem1 = $('.js-switch-1');
    new Switchery(elem1[0], {
        color: '#FF5275', 
        secondaryColor: '#FF5275' 
    });



    
})(jQuery);
var toolbarOptions = [
    ['bold', 'italic', 'underline', 'strike'],        // toggled buttons
    ['blockquote', 'code-block'],

    [{ 'header': 1 }, { 'header': 2 }],               // custom button values
    [{ 'list': 'ordered'}, { 'list': 'bullet' }],
    [{ 'script': 'sub'}, { 'script': 'super' }],      // superscript/subscript
    [{ 'indent': '-1'}, { 'indent': '+1' }],          // outdent/indent
    [{ 'direction': 'rtl' }],                         // text direction

    [{ 'size': ['small', false, 'large', 'huge'] }],  // custom dropdown
    [{ 'header': [1, 2, 3, 4, 5, 6, false] }],

    [{ 'color': [] }, { 'background': [] }],          // dropdown with defaults from theme
    [{ 'font': [] }],
    [{ 'align': [] }],

    ['clean']                                         // remove formatting button
];
var quill = new Quill('#editor', {
modules: {
    toolbar: toolbarOptions
},
placeholder: 'Compose an epic...',
theme: 'snow'
});
(function($) {
    "use strict"

    $('.repeater-default').repeater();


    $('.repeater-custom').repeater({
        show: function () {
            $(this).slideDown();
        },
        hide: function (remove) {
            if(confirm('Are you sure you want to remove this item?')) {
                $(this).slideUp(remove);
            }
        }
    });


    $('.repeater-default-value').repeater({
        defaultValues: {
            features: ['abs'],
            make: 'ford',
            model: 'Mustang'
        }
    });















})(jQuery);

$(document).ready(function() {

    // Realtime Rickshaw Chart
    if ($('#rickshaw-realtime').length != 0) {

        (function() {

            var container = '#rickshaw-realtime';

            var seriesData = [
                [],
                [],
                []
            ];
            var random = new Rickshaw.Fixtures.RandomData(50);
            for (var i = 0; i < 50; i++) {
                random.addData(seriesData);
            }
            var graph = new Rickshaw.Graph({
                element: document.querySelector(container),
                height: 338,
                renderer: 'area',
                padding: {
                    top: 0.4
                },
                series: [{
                    data: seriesData[0],
                    color: '#00A2FF', // change contextual color rgba(98, 84, 154, 0.3)
                    name: 'Server 1'
                }, {
                    data: seriesData[1],
                    color: 'rgba(0, 162, 255, .1)', // change contextual color
                    name: 'Server 2'
                }]
            });

            var y_axis = new Rickshaw.Graph.Axis.Y({
                graph: graph,
                orientation: 'right',
                tickFormat: Rickshaw.Fixtures.Number.formatKMBT,
                element: document.getElementById('rickshaw-realtime_y_axis'),
            });

            var hoverDetail = new Rickshaw.Graph.HoverDetail({
                graph: graph
            });

            // Update the graph with realtime data
            setInterval(function() {
                random.removeData(seriesData);
                random.addData(seriesData);
                graph.update();
            }, 1000);

            d3.selectAll('#rickshaw-realtime_y_axis .tick.major line').attr('x2', '9');
            d3.selectAll('#rickshaw-realtime_y_axis .tick.major text').attr('x', '14');

            $(window).resize(function() {
                graph.configure({
                    width: $(container).width(),
                    height: 338
                });
                graph.render()
            });

            $(container).data('chart', graph);

        })();

    }

    // Stacked bar chart using Rickshaw
    if ($('#rickshaw-stacked-bars').length != 0) {

        (function() {
            var container = '#rickshaw-stacked-bars';

            var seriesData = [
                [],
                []
            ];
            var random = new Rickshaw.Fixtures.RandomData(50);
            for (var i = 0; i < 50; i++) {
                random.addData(seriesData);
            }

            var graph = new Rickshaw.Graph({
                renderer: 'bar',
                element: document.querySelector(container),
                height: 400,
                padding: {
                    top: 0.4
                },
                series: [{
                    data: seriesData[0],
                    color: '#00A2FF', // Change contextual color
                    name: "New users"
                }, {
                    data: seriesData[1],
                    color: 'rgba(0, 162, 255, .2)', // Change contextual color
                    name: "Returning users"

                }]

            });

            var hoverDetail = new Rickshaw.Graph.HoverDetail({
                graph: graph,
                formatter: function(series, x, y) {
                    var date = '<span class="date">' + new Date(x * 1000).toUTCString() + '</span>';
                    var swatch = '<span class="detail_swatch" style="background-color: ' + series.color + '"></span>';
                    var content = swatch + series.name + ": " + parseInt(y) + '<br>' + date;
                    return content;
                }
            });

            graph.render();


            $(window).resize(function() {
                graph.configure({
                    width: $(container).width(),
                    height: 400
                });
                graph.render()
            });

            $(container).data('chart', graph);

        })();

    }


});



(function($) {
    "use strict"
    
    // single select box
    $("#single-select").select2();

    // multi select box
    $('.multi-select').select2();

    // dropdown option groups
    $('.dropdown-groups').select2();

    //disabling options
    $('.disabling-options').select2();

    //disabling a select2 control
    $(".js-example-disabled").select2();
    $(".js-example-disabled-multi").select2();
    $("#js-programmatic-enable").on("click", function () {
        $(".js-example-disabled").prop("disabled", false);
        $(".js-example-disabled-multi").prop("disabled", false);
    });
    $("#js-programmatic-disable").on("click", function () {
        $(".js-example-disabled").prop("disabled", true);
        $(".js-example-disabled-multi").prop("disabled", true);
    });


    // select2 with labels
    $(".select2-with-label-single").select2();
    $(".select2-with-label-multiple").select2();


    //select2 container width
    $(".select2-width-50").select2();
    $(".select2-width-75").select2();


    //select2 themes
    $(".js-example-theme-single").select2({
        theme: "classic"
    });
    $(".js-example-theme-multiple").select2({
        theme: "classic"
    });


    //ajax remote data
    $(".js-data-example-ajax").select2({
        width: "100%",
        ajax: {
          url: "https://api.github.com/search/repositories",
          dataType: 'json',
          delay: 250,
          data: function (params) {
            return {
              q: params.term, // search term
              page: params.page
            };
          },
          processResults: function (data, params) {
            // parse the results into the format expected by Select2
            // since we are using custom formatting functions we do not need to
            // alter the remote JSON data, except to indicate that infinite
            // scrolling can be used
            params.page = params.page || 1;
      
            return {
              results: data.items,
              pagination: {
                more: (params.page * 30) < data.total_count
              }
            };
          },
          cache: true
        },
        placeholder: 'Search for a repository',
        escapeMarkup: function (markup) { return markup; }, // let our custom formatter work
        minimumInputLength: 1,
        templateResult: formatRepo,
        templateSelection: formatRepoSelection
      });

      function formatRepo (repo) {
        if (repo.loading) {
          return repo.text;
        }
      
        var markup = "<div class='select2-result-repository clearfix'>" +
          "<div class='select2-result-repository__avatar'><img src='" + repo.owner.avatar_url + "' /></div>" +
          "<div class='select2-result-repository__meta'>" +
            "<div class='select2-result-repository__title'>" + repo.full_name + "</div>";
      
        if (repo.description) {
          markup += "<div class='select2-result-repository__description'>" + repo.description + "</div>";
        }
      
        markup += "<div class='select2-result-repository__statistics'>" +
          "<div class='select2-result-repository__forks'><i class='fa fa-flash'></i> " + repo.forks_count + " Forks</div>" +
          "<div class='select2-result-repository__stargazers'><i class='fa fa-star'></i> " + repo.stargazers_count + " Stars</div>" +
          "<div class='select2-result-repository__watchers'><i class='fa fa-eye'></i> " + repo.watchers_count + " Watchers</div>" +
        "</div>" +
        "</div></div>";
      
        return markup;
      }
      
    function formatRepoSelection (repo) {
        return repo.full_name || repo.text;
    }




    // loading array data
    var data = [
        {
            id: 0,
            text: 'enhancement'
        },
        {
            id: 1,
            text: 'bug'
        },
        {
            id: 2,
            text: 'duplicate'
        },
        {
            id: 3,
            text: 'invalid'
        },
        {
            id: 4,
            text: 'wontfix'
        }
    ];
    $(".js-example-data-array").select2({
      data: data
    })


    //automatic selection
    $('#automatic-selection').select2({
        selectOnClose: true
    });
      

    //remain open after selection
    $('#remain-open').select2({
        closeOnSelect: false
    });


    //dropdown-placement
    $('#dropdown-placement').select2({
        dropdownParent: $('#select2-modal')
    });


    // limit the number of selection
    $('#limit-selection').select2({
        maximumSelectionLength: 2
    });


    // dynamic option
    $('#dynamic-option-creation').select2({
        tags: true
    });


    // tagging with multi value select box
    $('#multi-value-select').select2({
        tags: true
    });


    // single-select-placeholder
    $(".single-select-placeholder").select2({
        placeholder: "Select a state",
        allowClear: true
    });


    // multi select placeholder
    $(".multi-select-placeholder").select2({
        placeholder: "Select a state"
    });


    //default selection placeholder
    $(".default-placeholder").select2({
        placeholder: {
            id: '-1', // the value of the option
            text: 'Select an option'
          }
    });


    // customizing how results are matched
    function matchCustom(params, data) {
        // If there are no search terms, return all of the data
        if ($.trim(params.term) === '') {
          return data;
        }
    
        // Do not display the item if there is no 'text' property
        if (typeof data.text === 'undefined') {
          return null;
        }
    
        // `params.term` should be the term that is used for searching
        // `data.text` is the text that is displayed for the data object
        if (data.text.indexOf(params.term) > -1) {
          var modifiedData = $.extend({}, data, true);
          modifiedData.text += ' (matched)';
    
          // You can return modified objects from here
          // This includes matching the `children` how you want in nested data sets
          return modifiedData;
        }
    
        // Return `null` if the term should not be displayed
        return null;
    }
    $(".customize-result").select2({
        matcher: matchCustom
    });


    // matching grouped options 

    function matchStart(params, data) {
        // If there are no search terms, return all of the data
        if ($.trim(params.term) === '') {
          return data;
        }
      
        // Skip if there is no 'children' property
        if (typeof data.children === 'undefined') {
          return null;
        }
      
        // `data.children` contains the actual options that we are matching against
        var filteredChildren = [];
        $.each(data.children, function (idx, child) {
          if (child.text.toUpperCase().indexOf(params.term.toUpperCase()) == 0) {
            filteredChildren.push(child);
          }
        });
      
        // If we matched any of the timezone group's children, then set the matched children on the group
        // and return the group object
        if (filteredChildren.length) {
          var modifiedData = $.extend({}, data, true);
          modifiedData.children = filteredChildren;
      
          // You can return modified objects from here
          // This includes matching the `children` how you want in nested data sets
          return modifiedData;
        }
      
        // Return `null` if the term should not be displayed
        return null;
    }
    $(".match-grouped-options").select2({
        matcher: matchStart
    });


    //minimum search term length
    $(".minimum-search-length").select2({
        minimumInputLength: 3 // only start searching when the user has input 3 or more characters
    });

    //maximum search term length
    $(".maximum-search-length").select2({
        maximumInputLength: 20 // only allow terms up to 20 characters long
    });


    // programmatically add new option
    var data = {
        id: 1,
        text: 'New Item'
    };
    var newOption = new Option(data.text, data.id, false, false);
    $(".add-new-options").append(newOption).trigger('change').select2();


    // create if not exists

    // Set the value, creating a new option if necessary
    if ($('.create-if-not-exists').find("option[value='" + data.id + "']").length) {
        $('.create-if-not-exists').val(data.id).trigger('change');
    } else { 
        // Create a DOM Option and pre-select by default
        var newOption = new Option(data.text, data.id, true, true);
        // Append it to the select
        $('.create-if-not-exists').append(newOption).trigger('change').select2();
    } 

    

    // using jquery selector

    $('.jquery-selector').select2();
    $('.jquery-selector').on("change", function(){
        var selectData = $(this).find(':selected');
        var value = selectData.val();
        alert("you select " + value);
    });


    // select2 rtl support
    $(".rtl-select2").select2({
        dir: "rtl"
    });


    // destroy selector
    $(".destroy-selector").select2();

    $("#destroy-selector-trigger").click(function(){
        $(".destroy-selector").select2("destroy");
    });


    // opening options
    $(".opening-dropdown").select2();
    $("#dropdown-trigger-open").click(function(){
        $(".opening-dropdown").select2('open');
    });


    // open or close dropdown
    $(".open-close-dropdown").select2();
    $("#opening-dropdown-trigger").click(function(){
        $(".open-close-dropdown").select2('open');
    });
    $("#closing-dropdown-trigger").click(function(){
        $(".open-close-dropdown").select2('close');
    });


    // select2 methods
    var $singleUnbind = $(".single-event-unbind").select2();

    $(".js-programmatic-set-val").on("click", function () {
        $singleUnbind.val("CA").trigger("change");
    });
    
    $(".js-programmatic-open").on("click", function () {
        $singleUnbind.select2("open");
    });
    
    $(".js-programmatic-close").on("click", function () {
        $singleUnbind.select2("close");
    });
    
    $(".js-programmatic-init").on("click", function () {
        $singleUnbind.select2({
            width: "400px"
        });
    });
    
    $(".js-programmatic-destroy").on("click", function () {
        $singleUnbind.select2("destroy");
    });


    var $unbindMulti = $(".js-example-programmatic-multi").select2();
    $(".js-programmatic-multi-set-val").on("click", function () {
        $unbindMulti.val(["CA", "HA"]).trigger("change");
    });
    
    $(".js-programmatic-multi-clear").on("click", function () {
        $unbindMulti.val(null).trigger("change");
    });


})(jQuery);
(function($) {
    "use strict"

    const tour = new Shepherd.Tour({
        defaultStepOptions: {
          classes: 'shadow-md bg-purple-dark',
          scrollTo: true
        }
    });

    tour.addStep('nav-header', {
        text: 'This is Navigation Header',
        attachTo: '.nav-header bottom',
        classes: 'example-step-extra-class',
        advanceOn: '.header-right', 
        buttons: [
          {
            text: 'Next',
            action: tour.next
          }
        ]
    });

    tour.addStep('header-right', {
        text: 'This is header right',
        attachTo: '.header-right bottom',
        classes: 'example-step-extra-class',
        buttons: [
          {
            text: 'Next',
            action: tour.next, 
            classes: 'btn btn-primary'
          }
        ]
    });

    tour.addStep('nk-sidebar', {
        text: 'This is left sidebar',
        attachTo: '.nk-sidebar right',
        classes: 'example-step-extra-class',
        buttons: [
          {
            text: 'Next',
            action: tour.next
          }
        ]
    });

    tour.addStep('right-sidebar', {
        text: 'This is left sidebar',
        attachTo: '.sidebar-right-trigger left',
        classes: 'example-step-extra-class',
        buttons: [
          {
            text: 'Next',
            action: tour.next
          }
        ]
    });

    tour.addStep('step 1', {
        text: 'This is step one',
        attachTo: '#step1 top',
        classes: 'example-step-extra-class',
        buttons: [
          {
            text: 'Next',
            action: tour.next
          }
        ]
    });

    tour.addStep('step 2', {
        text: 'This is step two',
        attachTo: '#step2 top',
        classes: 'example-step-extra-class',
        buttons: [
          {
            text: 'Next',
            action: tour.next
          }
        ]
    });

    tour.addStep('step 3', {
        text: 'This is step three',
        attachTo: '#step3 top',
        classes: 'example-step-extra-class',
        buttons: [
          {
            text: 'Next',
            action: tour.next
          }
        ]
    });

    tour.start();



})(jQuery);
(function($) {
    "use strict"

    //smartwizard1 initialization

    // Step show event
    $("#smartwizard1").on("showStep", function(e, anchorObject, stepNumber, stepDirection, stepPosition) {
        //alert("You are on step "+stepNumber+" now");
        if(stepPosition === 'first'){
            $("#prev-btn").addClass('disabled');
        }else if(stepPosition === 'final'){
            $("#next-btn").addClass('disabled');
        }else{
            $("#prev-btn").removeClass('disabled');
            $("#next-btn").removeClass('disabled');
        }
    });

    // Toolbar extra buttons
    var btnFinish = $('<button></button>').text('Finish').addClass('btn btn-info').on('click', function(){
         alert('Thanks for submiting!'); 
    });
    var btnCancel = $('<button></button>').text('Cancel').addClass('btn btn-danger').on('click', function(){
         $('#smartwizard1').smartWizard("reset"); 
    });

    // Smart Wizard
    $('#smartwizard1').smartWizard({
        selected: 0,
        theme: 'circles',
        transitionEffect:'fade',
        showStepURLhash: true,
        toolbarSettings: {
            toolbarButtonPosition: 'end',
            toolbarExtraButtons: [btnFinish, btnCancel]
        }
    });

    // External Button Events
    $("#reset-btn").on("click", function() {
        // Reset wizard
        $('#smartwizard1').smartWizard("reset");
        return true;
    });

    $("#prev-btn").on("click", function() {
        // Navigate previous
        $('#smartwizard1').smartWizard("prev");
        return true;
    });

    $("#next-btn").on("click", function() {
        // Navigate next
        $('#smartwizard1').smartWizard("next");
        return true;
    });

    $("#theme_selector").on("change", function() {
        // Change theme
        $('#smartwizard1').smartWizard("theme", $(this).val());
        return true;
    });

    // Set selected theme on page refresh
    $("#theme_selector").change();





})(jQuery);
$(document).ready(function() {
    "use strict";

    // Line Chart
    $("#sparklinedash").sparkline([10, 15, 26, 27, 28, 31, 34, 40, 41, 44, 49, 64, 68, 69, 72], {
        type: "bar",
        height: "50",
        barWidth: "4",
        resize: !0,
        barSpacing: "5",
        barColor: "#6ed3cf"
    });


    $("#sparkline8").sparkline([79, 72, 29, 6, 52, 32, 73, 40, 14, 75, 77, 39, 9, 15, 10], {
        type: "line",
        width: "100%",
        height: "50",
        lineColor: "#7571F9",
        fillColor: "rgba(144, 104, 190, 0.2)",
        minSpotColor: "#7571F9",
        maxSpotColor: "#7571F9",
        highlightLineColor: "rgba(0, 0, 0, 0.2)",
        highlightSpotColor: "#7571F9"
    });

    $("#sparkline9").sparkline([27, 31, 35, 28, 45, 52, 24, 4, 50, 11, 54, 49, 72, 59, 75], {
        type: "line",
        width: "100%",
        height: "50",
        lineColor: "#7571F9",
        fillColor: "#7571F9",
        minSpotColor: "#7571F9",
        maxSpotColor: "#7571F9",
        highlightLineColor: "rgba(0, 0, 0, 0.2)",
        highlightSpotColor: "#7571F9"
    });


    // Bar Chart


    $("#spark-bar").sparkline([33, 22, 68, 54, 8, 30, 74, 7, 36, 5, 41, 19, 43, 29, 38], {
        type: "bar",
        height: "200",
        barWidth: 10,
        barSpacing: 7,
        barColor: "#F5A3E3"
    });

    $('#StackedBarChart').sparkline([
        [1, 4, 2],
        [2, 3, 2],
        [3, 2, 2],
        [4, 1, 2]
    ], {
        type: "bar",
        height: "200",
        barWidth: 10,
        barSpacing: 7,
    });

    $("#tristate").sparkline([1, 1, 0, 1, -1, -1, 1, -1, 0, 0, 1, 1], {
        type: 'tristate',
        height: "200",
        barWidth: 10,
        barSpacing: 7,
    });

    // Composite

    $("#composite-bar").sparkline([73, 53, 50, 67, 3, 56, 19, 70, 58, 48, 26, 72, 59, 37, 32, 40, 26, 71, 19, 75, 57, 47, 4, 53, 55, 31, 37, 67, 10, 21], {
        type: "bar",
        height: "200",
        barWidth: "10",
        resize: !0,
        barSpacing: "7",
        barColor: "#c43235"
    });

    $("#composite-bar").sparkline([40, 26, 71, 19, 75, 57, 47, 4, 53, 55, 31, 37, 67, 10, 21, 73, 53, 50, 67, 3, 56, 19, 70, 58, 48, 26, 72, 59, 37, 32], {
        type: "line",
        height: "200",
        lineColor: "#c43235",
        fillColor: "transparent",
        composite: !0,
        highlightLineColor: "rgba(0,0,0,.1)",
        highlightSpotColor: "rgba(0,0,0,.2)"
    });

    $("#sparkline-composite-chart").sparkline([5, 6, 7, 2, 0, 3, 6, 8, 1, 2, 2, 0, 3, 6], {
        type: 'line',
        width: '100%',
        height: '200'
    });

    $("#sparkline-composite-chart").sparkline([5, 6, 7, 2, 0, 3, 6, 8, 1, 2, 2, 0, 3, 6], {
        type: 'bar',
        height: '150px',
        width: '100%',
        barWidth: 10,
        barSpacing: 5,
        barColor: '#173e43',
        negBarColor: '#173e43',
        composite: true
    });


    //Pie
    $("#sparkline11").sparkline([24, 61, 51], {
        type: "pie",
        height: "200",
        resize: !0,
        sliceColors: ["#D70206", "#F4C63D", "#D17905"]
    });

    // Bullet
    $("#bullet-chart").sparkline([10, 12, 12, 9, 7], {
        type: 'bullet',
        height: '100',
        width: '100%',
    });

    //Boxplot
    $("#boxplot").sparkline([4, 27, 34, 52, 54, 59, 61, 68, 78, 82, 85, 87, 91, 93, 100], {
        type: 'box'
    });


});
jQuery(document).ready(function() {
    $(".summernote").summernote({
        height: 350,
        minHeight: null,
        maxHeight: null,
        focus: !1
    }), $(".inline-editor").summernote({
        airMode: !0
    })
}), window.edit = function() {
    $(".click2edit").summernote()
}, window.save = function() {
    $(".click2edit").summernote("destroy")
};
document.querySelector(".sweet-wrong").onclick = function () { sweetAlert("Oops...", "Something went wrong !!", "error") }, document.querySelector(".sweet-message").onclick = function () { swal("Hey, Here's a message !!") }, document.querySelector(".sweet-text").onclick = function () { swal("Hey, Here's a message !!", "It's pretty, isn't it?") }, document.querySelector(".sweet-success").onclick = function () { swal("Hey, Good job !!", "You clicked the button !!", "success") }, document.querySelector(".sweet-confirm").onclick = function () { swal({ title: "Are you sure to delete ?", text: "You will not be able to recover this imaginary file !!", type: "warning", showCancelButton: !0, confirmButtonColor: "#DD6B55", confirmButtonText: "Yes, delete it !!", closeOnConfirm: !1 }, function () { swal("Deleted !!", "Hey, your imaginary file has been deleted !!", "success") }) }, document.querySelector(".sweet-success-cancel").onclick = function () { swal({ title: "Are you sure to delete ?", text: "You will not be able to recover this imaginary file !!", type: "warning", showCancelButton: !0, confirmButtonColor: "#DD6B55", confirmButtonText: "Yes, delete it !!", cancelButtonText: "No, cancel it !!", closeOnConfirm: !1, closeOnCancel: !1 }, function (e) { e ? swal("Deleted !!", "Hey, your imaginary file has been deleted !!", "success") : swal("Cancelled !!", "Hey, your imaginary file is safe !!", "error") }) }, document.querySelector(".sweet-image-message").onclick = function () { swal({ title: "Sweet !!", text: "Hey, Here's a custom image !!", imageUrl: "../assets/images/hand.jpg" }) }, document.querySelector(".sweet-html").onclick = function () { swal({ title: "Sweet !!", text: "<span style='color:#ff0000'>Hey, you are using HTML !!<span>", html: !0 }) }, document.querySelector(".sweet-auto").onclick = function () { swal({ title: "Sweet auto close alert !!", text: "Hey, i will close in 2 seconds !!", timer: 2e3, showConfirmButton: !1 }) }, document.querySelector(".sweet-prompt").onclick = function () { swal({ title: "Enter an input !!", text: "Write something interesting !!", type: "input", showCancelButton: !0, closeOnConfirm: !1, animation: "slide-from-top", inputPlaceholder: "Write something" }, function (e) { return !1 !== e && ("" === e ? (swal.showInputError("You need to write something!"), !1) : void swal("Hey !!", "You wrote: " + e, "success")) }) }, document.querySelector(".sweet-ajax").onclick = function () { swal({ title: "Sweet ajax request !!", text: "Submit to run ajax request !!", type: "info", showCancelButton: !0, closeOnConfirm: !1, showLoaderOnConfirm: !0 }, function () { setTimeout(function () { swal("Hey, your ajax request finished !!") }, 2e3) }) };
(function($) {
  "use strict"
  
  //circular switch
  var elem1 = Array.prototype.slice.call($('.js-switch-1'));
  elem1.forEach(html => {
    new Switchery(html, {
      color: '#2290FF', 
      secondaryColor: '#2290FF'
    });
  });

  //square switch
  var elem2 = Array.prototype.slice.call($('.js-switch-2'));
  elem2.forEach(html => {
    new Switchery(html, {
      color: '#F62D51', 
      secondaryColor: '#F62D51'
    });
  });
    

})(jQuery);
$("#toastr-success-top-right").on("click", function () { toastr.success("This Is Success Message", "Top Right", { timeOut: 5e3, closeButton: !0, debug: !1, newestOnTop: !0, progressBar: !0, positionClass: "toast-top-right", preventDuplicates: !0, onclick: null, showDuration: "300", hideDuration: "1000", extendedTimeOut: "1000", showEasing: "swing", hideEasing: "linear", showMethod: "fadeIn", hideMethod: "fadeOut", tapToDismiss: !1 }) }), $("#toastr-success-bottom-right").on("click", function () { toastr.success("This Is Success Message", "Bottom Right", { positionClass: "toast-bottom-right", timeOut: 5e3, closeButton: !0, debug: !1, newestOnTop: !0, progressBar: !0, preventDuplicates: !0, onclick: null, showDuration: "300", hideDuration: "1000", extendedTimeOut: "1000", showEasing: "swing", hideEasing: "linear", showMethod: "fadeIn", hideMethod: "fadeOut", tapToDismiss: !1 }) }), $("#toastr-success-bottom-left").on("click", function () { toastr.success("This Is Success Message", "Bottom Left", { positionClass: "toast-bottom-left", timeOut: 5e3, closeButton: !0, debug: !1, newestOnTop: !0, progressBar: !0, preventDuplicates: !0, onclick: null, showDuration: "300", hideDuration: "1000", extendedTimeOut: "1000", showEasing: "swing", hideEasing: "linear", showMethod: "fadeIn", hideMethod: "fadeOut", tapToDismiss: !1 }) }), $("#toastr-success-top-left").on("click", function () { toastr.success("This Is Success Message", "Top Left", { positionClass: "toast-top-left", timeOut: 5e3, closeButton: !0, debug: !1, newestOnTop: !0, progressBar: !0, preventDuplicates: !0, onclick: null, showDuration: "300", hideDuration: "1000", extendedTimeOut: "1000", showEasing: "swing", hideEasing: "linear", showMethod: "fadeIn", hideMethod: "fadeOut", tapToDismiss: !1 }) }), $("#toastr-success-top-full-width").on("click", function () { toastr.success("This Is Success Message", "Top Full Width", { positionClass: "toast-top-full-width", timeOut: 5e3, closeButton: !0, debug: !1, newestOnTop: !0, progressBar: !0, preventDuplicates: !0, onclick: null, showDuration: "300", hideDuration: "1000", extendedTimeOut: "1000", showEasing: "swing", hideEasing: "linear", showMethod: "fadeIn", hideMethod: "fadeOut", tapToDismiss: !1 }) }), $("#toastr-success-bottom-full-width").on("click", function () { toastr.success("This Is Success Message", "Bottom Full Width", { positionClass: "toast-bottom-full-width", timeOut: 5e3, closeButton: !0, debug: !1, newestOnTop: !0, progressBar: !0, preventDuplicates: !0, onclick: null, showDuration: "300", hideDuration: "1000", extendedTimeOut: "1000", showEasing: "swing", hideEasing: "linear", showMethod: "fadeIn", hideMethod: "fadeOut", tapToDismiss: !1 }) }), $("#toastr-success-top-center").on("click", function () { toastr.success("This Is Success Message", "Top Center", { positionClass: "toast-top-center", timeOut: 5e3, closeButton: !0, debug: !1, newestOnTop: !0, progressBar: !0, preventDuplicates: !0, onclick: null, showDuration: "300", hideDuration: "1000", extendedTimeOut: "1000", showEasing: "swing", hideEasing: "linear", showMethod: "fadeIn", hideMethod: "fadeOut", tapToDismiss: !1 }) }), $("#toastr-success-bottom-center").on("click", function () { toastr.success("This Is Success Message", "Bottom Center", { positionClass: "toast-bottom-center", timeOut: 5e3, closeButton: !0, debug: !1, newestOnTop: !0, progressBar: !0, preventDuplicates: !0, onclick: null, showDuration: "300", hideDuration: "1000", extendedTimeOut: "1000", showEasing: "swing", hideEasing: "linear", showMethod: "fadeIn", hideMethod: "fadeOut", tapToDismiss: !1 }) }), $("#toastr-info-top-right").on("click", function () { toastr.info("This Is info Message", "Top Right", { positionClass: "toast-top-right", timeOut: 5e3, closeButton: !0, debug: !1, newestOnTop: !0, progressBar: !0, preventDuplicates: !0, onclick: null, showDuration: "300", hideDuration: "1000", extendedTimeOut: "1000", showEasing: "swing", hideEasing: "linear", showMethod: "fadeIn", hideMethod: "fadeOut", tapToDismiss: !1 }) }), $("#toastr-info-bottom-right").on("click", function () { toastr.info("This Is info Message", "Bottom Right", { positionClass: "toast-bottom-right", timeOut: 5e3, closeButton: !0, debug: !1, newestOnTop: !0, progressBar: !0, preventDuplicates: !0, onclick: null, showDuration: "300", hideDuration: "1000", extendedTimeOut: "1000", showEasing: "swing", hideEasing: "linear", showMethod: "fadeIn", hideMethod: "fadeOut", tapToDismiss: !1 }) }), $("#toastr-info-bottom-left").on("click", function () { toastr.info("This Is info Message", "Bottom Left", { positionClass: "toast-bottom-left", timeOut: 5e3, closeButton: !0, debug: !1, newestOnTop: !0, progressBar: !0, preventDuplicates: !0, onclick: null, showDuration: "300", hideDuration: "1000", extendedTimeOut: "1000", showEasing: "swing", hideEasing: "linear", showMethod: "fadeIn", hideMethod: "fadeOut", tapToDismiss: !1 }) }), $("#toastr-info-top-left").on("click", function () { toastr.info("This Is info Message", "Top Left", { positionClass: "toast-top-left", timeOut: 5e3, closeButton: !0, debug: !1, newestOnTop: !0, progressBar: !0, preventDuplicates: !0, onclick: null, showDuration: "300", hideDuration: "1000", extendedTimeOut: "1000", showEasing: "swing", hideEasing: "linear", showMethod: "fadeIn", hideMethod: "fadeOut", tapToDismiss: !1 }) }), $("#toastr-info-top-full-width").on("click", function () { toastr.info("This Is info Message", "Top Full Width", { positionClass: "toast-top-full-width", timeOut: 5e3, closeButton: !0, debug: !1, newestOnTop: !0, progressBar: !0, preventDuplicates: !0, onclick: null, showDuration: "300", hideDuration: "1000", extendedTimeOut: "1000", showEasing: "swing", hideEasing: "linear", showMethod: "fadeIn", hideMethod: "fadeOut", tapToDismiss: !1 }) }), $("#toastr-info-bottom-full-width").on("click", function () { toastr.info("This Is info Message", "Bottom Full Width", { positionClass: "toast-bottom-full-width", timeOut: 5e3, closeButton: !0, debug: !1, newestOnTop: !0, progressBar: !0, preventDuplicates: !0, onclick: null, showDuration: "300", hideDuration: "1000", extendedTimeOut: "1000", showEasing: "swing", hideEasing: "linear", showMethod: "fadeIn", hideMethod: "fadeOut", tapToDismiss: !1 }) }), $("#toastr-info-top-center").on("click", function () { toastr.info("This Is info Message", "Top Center", { positionClass: "toast-top-center", timeOut: 5e3, closeButton: !0, debug: !1, newestOnTop: !0, progressBar: !0, preventDuplicates: !0, onclick: null, showDuration: "300", hideDuration: "1000", extendedTimeOut: "1000", showEasing: "swing", hideEasing: "linear", showMethod: "fadeIn", hideMethod: "fadeOut", tapToDismiss: !1 }) }), $("#toastr-info-bottom-center").on("click", function () { toastr.info("This Is info Message", "Bottom Center", { positionClass: "toast-bottom-center", timeOut: 5e3, closeButton: !0, debug: !1, newestOnTop: !0, progressBar: !0, preventDuplicates: !0, onclick: null, showDuration: "300", hideDuration: "1000", extendedTimeOut: "1000", showEasing: "swing", hideEasing: "linear", showMethod: "fadeIn", hideMethod: "fadeOut", tapToDismiss: !1 }) }), $("#toastr-warning-top-right").on("click", function () { toastr.warning("This Is warning Message", "Top Right", { positionClass: "toast-top-right", timeOut: 5e3, closeButton: !0, debug: !1, newestOnTop: !0, progressBar: !0, preventDuplicates: !0, onclick: null, showDuration: "300", hideDuration: "1000", extendedTimeOut: "1000", showEasing: "swing", hideEasing: "linear", showMethod: "fadeIn", hideMethod: "fadeOut", tapToDismiss: !1 }) }), $("#toastr-warning-bottom-right").on("click", function () { toastr.warning("This Is warning Message", "Bottom Right", { positionClass: "toast-bottom-right", timeOut: 5e3, closeButton: !0, debug: !1, newestOnTop: !0, progressBar: !0, preventDuplicates: !0, onclick: null, showDuration: "300", hideDuration: "1000", extendedTimeOut: "1000", showEasing: "swing", hideEasing: "linear", showMethod: "fadeIn", hideMethod: "fadeOut", tapToDismiss: !1 }) }), $("#toastr-warning-bottom-left").on("click", function () { toastr.warning("This Is warning Message", "Bottom Left", { positionClass: "toast-bottom-left", timeOut: 5e3, closeButton: !0, debug: !1, newestOnTop: !0, progressBar: !0, preventDuplicates: !0, onclick: null, showDuration: "300", hideDuration: "1000", extendedTimeOut: "1000", showEasing: "swing", hideEasing: "linear", showMethod: "fadeIn", hideMethod: "fadeOut", tapToDismiss: !1 }) }), $("#toastr-warning-top-left").on("click", function () { toastr.warning("This Is warning Message", "Top Left", { positionClass: "toast-top-left", timeOut: 5e3, closeButton: !0, debug: !1, newestOnTop: !0, progressBar: !0, preventDuplicates: !0, onclick: null, showDuration: "300", hideDuration: "1000", extendedTimeOut: "1000", showEasing: "swing", hideEasing: "linear", showMethod: "fadeIn", hideMethod: "fadeOut", tapToDismiss: !1 }) }), $("#toastr-warning-top-full-width").on("click", function () { toastr.warning("This Is warning Message", "Top Full Width", { positionClass: "toast-top-full-width", timeOut: 5e3, closeButton: !0, debug: !1, newestOnTop: !0, progressBar: !0, preventDuplicates: !0, onclick: null, showDuration: "300", hideDuration: "1000", extendedTimeOut: "1000", showEasing: "swing", hideEasing: "linear", showMethod: "fadeIn", hideMethod: "fadeOut", tapToDismiss: !1 }) }), $("#toastr-warning-bottom-full-width").on("click", function () { toastr.warning("This Is warning Message", "Bottom Full Width", { positionClass: "toast-bottom-full-width", timeOut: 5e3, closeButton: !0, debug: !1, newestOnTop: !0, progressBar: !0, preventDuplicates: !0, onclick: null, showDuration: "300", hideDuration: "1000", extendedTimeOut: "1000", showEasing: "swing", hideEasing: "linear", showMethod: "fadeIn", hideMethod: "fadeOut", tapToDismiss: !1 }) }), $("#toastr-warning-top-center").on("click", function () { toastr.warning("This Is warning Message", "Top Center", { positionClass: "toast-top-center", timeOut: 5e3, closeButton: !0, debug: !1, newestOnTop: !0, progressBar: !0, preventDuplicates: !0, onclick: null, showDuration: "300", hideDuration: "1000", extendedTimeOut: "1000", showEasing: "swing", hideEasing: "linear", showMethod: "fadeIn", hideMethod: "fadeOut", tapToDismiss: !1 }) }), $("#toastr-warning-bottom-center").on("click", function () { toastr.warning("This Is warning Message", "Bottom Center", { positionClass: "toast-bottom-center", timeOut: 5e3, closeButton: !0, debug: !1, newestOnTop: !0, progressBar: !0, preventDuplicates: !0, onclick: null, showDuration: "300", hideDuration: "1000", extendedTimeOut: "1000", showEasing: "swing", hideEasing: "linear", showMethod: "fadeIn", hideMethod: "fadeOut", tapToDismiss: !1 }) }), $("#toastr-danger-top-right").on("click", function () { toastr.error("This Is error Message", "Top Right", { positionClass: "toast-top-right", timeOut: 5e3, closeButton: !0, debug: !1, newestOnTop: !0, progressBar: !0, preventDuplicates: !0, onclick: null, showDuration: "300", hideDuration: "1000", extendedTimeOut: "1000", showEasing: "swing", hideEasing: "linear", showMethod: "fadeIn", hideMethod: "fadeOut", tapToDismiss: !1 }) }), $("#toastr-danger-bottom-right").on("click", function () { toastr.error("This Is error Message", "Bottom Right", { positionClass: "toast-bottom-right", timeOut: 5e3, closeButton: !0, debug: !1, newestOnTop: !0, progressBar: !0, preventDuplicates: !0, onclick: null, showDuration: "300", hideDuration: "1000", extendedTimeOut: "1000", showEasing: "swing", hideEasing: "linear", showMethod: "fadeIn", hideMethod: "fadeOut", tapToDismiss: !1 }) }), $("#toastr-danger-bottom-left").on("click", function () { toastr.error("This Is error Message", "Bottom Left", { positionClass: "toast-bottom-left", timeOut: 5e3, closeButton: !0, debug: !1, newestOnTop: !0, progressBar: !0, preventDuplicates: !0, onclick: null, showDuration: "300", hideDuration: "1000", extendedTimeOut: "1000", showEasing: "swing", hideEasing: "linear", showMethod: "fadeIn", hideMethod: "fadeOut", tapToDismiss: !1 }) }), $("#toastr-danger-top-left").on("click", function () { toastr.error("This Is error Message", "Top Left", { positionClass: "toast-top-left", timeOut: 5e3, closeButton: !0, debug: !1, newestOnTop: !0, progressBar: !0, preventDuplicates: !0, onclick: null, showDuration: "300", hideDuration: "1000", extendedTimeOut: "1000", showEasing: "swing", hideEasing: "linear", showMethod: "fadeIn", hideMethod: "fadeOut", tapToDismiss: !1 }) }), $("#toastr-danger-top-full-width").on("click", function () { toastr.error("This Is error Message", "Top Full Width", { positionClass: "toast-top-full-width", timeOut: 5e3, closeButton: !0, debug: !1, newestOnTop: !0, progressBar: !0, preventDuplicates: !0, onclick: null, showDuration: "300", hideDuration: "1000", extendedTimeOut: "1000", showEasing: "swing", hideEasing: "linear", showMethod: "fadeIn", hideMethod: "fadeOut", tapToDismiss: !1 }) }), $("#toastr-danger-bottom-full-width").on("click", function () { toastr.error("This Is error Message", "Bottom Full Width", { positionClass: "toast-bottom-full-width", timeOut: 5e3, closeButton: !0, debug: !1, newestOnTop: !0, progressBar: !0, preventDuplicates: !0, onclick: null, showDuration: "300", hideDuration: "1000", extendedTimeOut: "1000", showEasing: "swing", hideEasing: "linear", showMethod: "fadeIn", hideMethod: "fadeOut", tapToDismiss: !1 }) }), $("#toastr-danger-top-center").on("click", function () { toastr.error("This Is error Message", "Top Center", { positionClass: "toast-top-center", timeOut: 5e3, closeButton: !0, debug: !1, newestOnTop: !0, progressBar: !0, preventDuplicates: !0, onclick: null, showDuration: "300", hideDuration: "1000", extendedTimeOut: "1000", showEasing: "swing", hideEasing: "linear", showMethod: "fadeIn", hideMethod: "fadeOut", tapToDismiss: !1 }) }), $("#toastr-danger-bottom-center").on("click", function () { toastr.error("This Is error Message", "Bottom Center", { positionClass: "toast-bottom-center", timeOut: 5e3, closeButton: !0, debug: !1, newestOnTop: !0, progressBar: !0, preventDuplicates: !0, onclick: null, showDuration: "300", hideDuration: "1000", extendedTimeOut: "1000", showEasing: "swing", hideEasing: "linear", showMethod: "fadeIn", hideMethod: "fadeOut", tapToDismiss: !1 }) });

(function($) {
    "use strict"


    //todo list
    $(".tdl-new").on('keypress', function(e) {

        var code = (e.keyCode ? e.keyCode : e.which);

        if (code == 13) {

            var v = $(this).val();

            var s = v.replace(/ +?/g, '');

            if (s == "") {

                return false;

            } else {

                $(".tdl-content ul").append("<li><label><input type='checkbox'><i></i><span>" + v + "</span><a href='#' class='ti-trash'></a></label></li>");

                $(this).val("");

            }

        }

    });





    $(".tdl-content a").on("click", function() {

        var _li = $(this).parent().parent("li");

        _li.addClass("remove").stop().delay(100).slideUp("fast", function() {

            _li.remove();

        });

        return false;

    });



    // for dynamically created a tags

    $(".tdl-content").on('click', "a", function() {

        var _li = $(this).parent().parent("li");

        _li.addClass("remove").stop().delay(100).slideUp("fast", function() {

            _li.remove();

        });

        return false;

    });








})(jQuery);


(function($) {
    "use strict"

    var i = new Datamap( {
        scope: "world", 
        element: document.getElementById("world-map"), 
        responsive: !0, 
        geographyConfig: {
            popupOnHover: !1, 
            highlightOnHover: !1, 
            borderColor: "transparent", 
            borderWidth: 1, 
            highlightBorderWidth: 3, 
            highlightFillColor: "rgba(0,123,255,0.5)", 
            highlightBorderColor: "transparent", 
            borderWidth: 1
        }, 
        bubblesConfig: {
            popupTemplate: function (e, i) {
                return '<div class="datamap-sales-hover-tooltip">' + i.country + '<span class="ml-2"></span>' + i.sold + "</div>"
            }, 
            borderWidth: 0, 
            highlightBorderWidth: 3, 
            highlightFillColor: "rgba(0,123,255,0.5)", 
            highlightBorderColor: "transparent", 
            fillOpacity: .75
        }, 
        fills: {
            Visited: "#777", 
            neato: "#777", 
            white: "#777", 
            defaultFill: "#EBEFF2"
        }
    });
    
    i.bubbles([{
        centered: "USA", fillKey: "white", radius: 5, sold: "$500", country: "United States"
    }, {
        centered: "SAU", fillKey: "Visited", radius: 5, sold: "$900", country: "Saudia Arabia"
    }, {
        centered: "RUS", fillKey: "neato", radius: 5, sold: "$250", country: "Russia"
    }, {
        centered: "CAN", fillKey: "white", radius: 5, sold: "$1000", country: "Canada"
    }, {
        centered: "IND", fillKey: "Visited", radius: 5, sold: "$50", country: "India"
    }, {
        centered: "AUS", fillKey: "white", radius: 5, sold: "$700", country: "Australia"
    }, {
        centered: "BGD", fillKey: "Visited", radius: 5, sold: "$1500", country: "Bangladesh"
    }
    ]),
    window.addEventListener("resize", function (e) {
        i.resize()
    });





})(jQuery);

(function($) {
    "use strict"


     // LINE CHART
      // Morris bar chart
 Morris.Bar({
    element: 'morris-bar-chart',
    data: [{
        y: '2016',
        a: 100,
        b: 90,
    }, {
        y: '2017',
        a: 75,
        b: 65,
    }, {
        y: '2018',
        a: 50,
        b: 40,
    }, {
        y: '2019',
        a: 75,
        b: 65,
    }, {
        y: '2020',
        a: 50,
        b: 40,
    }, {
        y: '2021',
        a: 75,
        b: 65,
    }, {
        y: '2022',
        a: 100,
        b: 90,
    }],
    xkey: 'y',
    ykeys: ['a', 'b', 'c'],
    labels: ['A', 'B', 'C'],
    barColors: ['#FC6C8E', '#7571f9'],
    hideHover: 'auto',
    gridLineColor: 'transparent',
    resize: true
});









})(jQuery);


(function($) {
    "use strict"


    $('#todo_list').slimscroll({
        position: "right",
        size: "5px",
        height: "250px",
        color: "transparent"
    });

    $('#activity').slimscroll({
        position: "right",
        size: "5px",
        height: "390px",
        color: "transparent"
    });





})(jQuery);



(function($) {
    "use strict"

    let ctx = document.getElementById("chart_widget_2");
    ctx.height = 280;
    new Chart(ctx, {
        type: 'line',
        data: {
            labels: ["2010", "2011", "2012", "2013", "2014", "2015", "2016"],
            type: 'line',
            defaultFontFamily: 'Montserrat',
            datasets: [{
                data: [0, 15, 57, 12, 85, 10, 50],
                label: "iPhone X",
                backgroundColor: '#847DFA',
                borderColor: '#847DFA',
                borderWidth: 0.5,
                pointStyle: 'circle',
                pointRadius: 5,
                pointBorderColor: 'transparent',
                pointBackgroundColor: '#847DFA',
            }, {
                label: "Pixel 2",
                data: [0, 30, 5, 53, 15, 55, 0],
                backgroundColor: '#F196B0',
                borderColor: '#F196B0',
                borderWidth: 0.5,
                pointStyle: 'circle',
                pointRadius: 5,
                pointBorderColor: 'transparent',
                pointBackgroundColor: '#F196B0',
            }]
        },
        options: {
            responsive: !0,
            maintainAspectRatio: false,
            tooltips: {
                mode: 'index',
                titleFontSize: 12,
                titleFontColor: '#000',
                bodyFontColor: '#000',
                backgroundColor: '#fff',
                titleFontFamily: 'Montserrat',
                bodyFontFamily: 'Montserrat',
                cornerRadius: 3,
                intersect: false,
            },
            legend: {
                display: false,
                position: 'top',
                labels: {
                    usePointStyle: true,
                    fontFamily: 'Montserrat',
                },


            },
            scales: {
                xAxes: [{
                    display: false,
                    gridLines: {
                        display: false,
                        drawBorder: false
                    },
                    scaleLabel: {
                        display: false,
                        labelString: 'Month'
                    }
                }],
                yAxes: [{
                    display: false,
                    gridLines: {
                        display: false,
                        drawBorder: false
                    },
                    scaleLabel: {
                        display: true,
                        labelString: 'Value'
                    }
                }]
            },
            title: {
                display: false,
            }
        }
    });


    


})(jQuery);

(function($) {
    "use strict"

    let ctx = document.getElementById("chart_widget_3");
    ctx.height = 130;
    new Chart(ctx, {
        type: 'line',
        data: {
            labels: ["Jan", "Feb", "Mar", "Apr", "May", "Jun"],
            type: 'line',
            defaultFontFamily: 'Montserrat',
            datasets: [{
                data: [0, 15, 57, 12, 85, 10],
                label: "iPhone X",
                backgroundColor: 'transparent',
                borderColor: '#847DFA',
                borderWidth: 2,
                pointStyle: 'circle',
                pointRadius: 5,
                pointBorderColor: '#847DFA',
                pointBackgroundColor: '#fff',
            }]
        },
        options: {
            responsive: !0,
            maintainAspectRatio: true,
            tooltips: {
                mode: 'index',
                titleFontSize: 12,
                titleFontColor: '#fff',
                bodyFontColor: '#fff',
                backgroundColor: '#000',
                titleFontFamily: 'Montserrat',
                bodyFontFamily: 'Montserrat',
                cornerRadius: 3,
                intersect: false,
            },
            legend: {
                display: false,
                position: 'top',
                labels: {
                    usePointStyle: true,
                    fontFamily: 'Montserrat',
                },


            },
            scales: {
                xAxes: [{
                    display: false,
                    gridLines: {
                        display: false,
                        drawBorder: false
                    },
                    scaleLabel: {
                        display: false,
                        labelString: 'Month'
                    }
                }],
                yAxes: [{
                    display: false,
                    gridLines: {
                        display: false,
                        drawBorder: false
                    },
                    scaleLabel: {
                        display: true,
                        labelString: 'Value'
                    }
                }]
            },
            title: {
                display: false,
            }
        }
    });


    


})(jQuery);



/*******************
Chart Chartist
*******************/
(function($) {
    "use strict"


    new Chartist.Line("#chart_widget_3", {
        labels: ["1", "2", "3", "4", "5", "6", "7", "8"],
        series: [
            [4, 5, 1.5, 6, 7, 5.5, 5.8, 4.6]
        ]
    }, {
        low: 0,
        showArea: !1,
        showPoint: !0,
        showLine: !0,
        fullWidth: !0,
        lineSmooth: !1,
        chartPadding: {
            top: 4,
            right: 4,
            bottom: -20,
            left: 4
        },
        axisX: {
            showLabel: !1,
            showGrid: !1,
            offset: 0
        },
        axisY: {
            showLabel: !1,
            showGrid: !1,
            offset: 0
        }
    });


    new Chartist.Pie("#chart_widget_3_1", {
        series: [35, 65]
    }, {
        donut: !0,
        donutWidth: 10,
        startAngle: 0,
        showLabel: !1
    });

})(jQuery);




/*******************
Pignose Calender
*******************/
(function ($) {
    "use strict";

    $(".year-calendar").pignoseCalendar({
        theme: "blue"
    }), $("input.calendar").pignoseCalendar({
        format: "YYYY-MM-DD"
    });

})(jQuery);